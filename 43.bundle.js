(()=>{"use strict";var e,r,t={3043:(e,r,t)=>{var n,i=t(5142);const o={timeout:2e4,maxPageSize:4096,cacheSize:1024,headers:{}},s="undefined"!=typeof SQLITE_DEBUG&&SQLITE_DEBUG||"undefined"!=typeof process&&void 0!==(null===(n=null===process||void 0===process?void 0:process.env)||void 0===n?void 0:n.SQLITE_DEBUG)&&process.env.SQLITE_DEBUG||"",a=["threads","vfs","cache","http"],c={};for(const e of a)c[e]=s.includes(e)?console.debug.bind(console):()=>{};const l=function(){const e=new ArrayBuffer(2),r=new Uint8Array(e),t=new Uint16Array(e);if(r[0]=240,r[1]=13,61453==t[0])return c.threads("System is Big-Endian"),!1;if(3568==t[0])return c.threads("System is Little-Endian"),!0;throw new Error(`Failed determining endianness: ${t}`)}();var d=function(e,r,t,n){return new(t||(t=Promise))((function(i,o){function s(e){try{c(n.next(e))}catch(e){o(e)}}function a(e){try{c(n.throw(e))}catch(e){o(e)}}function c(e){var r;e.done?i(e.value):(r=e.value,r instanceof t?r:new t((function(e){e(r)}))).then(s,a)}c((n=n.apply(e,r||[])).next())}))};let u;const f={},g=new i.Z({max:32});let h,p=1;const v={xOpen:function(e){return d(this,void 0,void 0,(function*(){let r=g.get(e.url);return r instanceof Promise&&(r=yield r),void 0!==r||(r=fetch(e.url,{method:"HEAD",headers:Object.assign({},null==u?void 0:u.headers)}).then((r=>{var t;return"bytes"!==r.headers.get("Accept-Ranges")&&console.warn(`Server for ${e.url} does not advertise 'Accept-Ranges'. If the server supports it, in order to remove this message, add "Accept-Ranges: bytes". Additionally, if using CORS, add "Access-Control-Expose-Headers: *".`),{url:e.url,id:p++,size:BigInt(null!==(t=r.headers.get("Content-Length"))&&void 0!==t?t:0),pageSize:null}})),g.set(e.url,r),g.set(e.url,yield r)),0}))},xAccess:function(e,r){return d(this,void 0,void 0,(function*(){const t=new Uint32Array(r.shm,0,1);try{const n=yield v.xOpen(e,r);t[0]=0===n?1:0}catch(e){t[0]=0}return 0}))},xRead:function(e,r){var t,n,i;return d(this,void 0,void 0,(function*(){let s=g.get(e.url);if(!s)throw new Error(`File ${e.url} not open`);if(s instanceof Promise&&(s=yield s),void 0===e.n||void 0===e.offset)throw new Error("Mandatory arguments missing");if(!s.pageSize){s.pageSize=1024;const r=new ArrayBuffer(2),i=yield v.xRead({msg:"xRead",url:e.url,offset:BigInt(16),n:2},{buffer:new Uint8Array(r)}),a=new Uint16Array(r);if(0!==i)return i;if(function(e){if(l)for(let r=0;r<e.length;r++)e[r]=(65280&e[r])>>8|(255&e[r])<<8}(a),s.pageSize=a[0],c.vfs(`page size is ${s.pageSize}`),1024!=s.pageSize&&(console.warn(`Page size for ${e.url} is ${s.pageSize}, recommended size is 1024`),h.delete(s.id+"|0")),s.pageSize>(null!==(t=null==u?void 0:u.maxPageSize)&&void 0!==t?t:o.maxPageSize))throw new Error(`${s.pageSize} is over the maximum configured ${null!==(n=null==u?void 0:u.maxPageSize)&&void 0!==n?n:o.maxPageSize}`)}const a=BigInt(s.pageSize),d=BigInt(e.n),f=e.offset/a;f*a!==e.offset&&c.vfs(`Read chunk ${e.offset}:${e.n} is not page-aligned`);let p=f*a;if(p+a<e.offset+d)throw new Error(`Read chunk ${e.offset}:${e.n} spans across a page-boundary`);const m=s.id+"|"+f;let y=h.get(m);if(y instanceof Promise&&(y=yield y),"number"==typeof y){c.cache(`cache hit (multi-page segment) for ${e.url}:${f}`);const r=BigInt(y)*a;y=h.get(s.id+"|"+y),y instanceof Promise&&(y=yield y),y instanceof Uint8Array?p=r:y=void 0}if(void 0===y){c.cache(`cache miss for ${e.url}:${f}`);let r=s.pageSize,t=f>0&&h.get(s.id+"|"+(Number(f)-1));t&&(t instanceof Promise&&(t=yield t),"number"==typeof t&&(t=h.get(s.id+"|"+t)),t instanceof Promise&&(t=yield t),t instanceof Uint8Array&&(r=2*t.byteLength,c.cache(`downloading super page of size ${r}`)));const n=r/s.pageSize;c.http(`downloading page ${f} of size ${r} starting at ${p}`);const a=fetch(e.url,{method:"GET",headers:Object.assign(Object.assign({},null!==(i=null==u?void 0:u.headers)&&void 0!==i?i:o.headers),{Range:`bytes=${p}-${p+BigInt(r-1)}`})}).then((e=>e.arrayBuffer())).then((e=>new Uint8Array(e)));h.set(m,a);for(let e=Number(f)+1;e<Number(f)+n;e++)h.set(s.id+"|"+e,a.then((()=>Number(f))));if(y=yield a,!(y instanceof Uint8Array)||0===y.length)throw new Error(`Invalid HTTP response received: ${JSON.stringify(a)}`);h.set(m,y);for(let e=Number(f)+1;e<Number(f)+n;e++)h.set(s.id+"|"+e,Number(f))}else c.cache(`cache hit for ${e.url}:${f}`);const w=Number(e.offset-p);return r.buffer.set(y.subarray(w,w+e.n)),0}))},xFilesize:function(e,r){return d(this,void 0,void 0,(function*(){let t=g.get(e.url);if(!t)throw new Error(`File ${e.fid} not open`);return t instanceof Promise&&(t=yield t),new BigInt64Array(r.shm,0,1)[0]=t.size,0}))}};function m({data:e}){return d(this,void 0,void 0,(function*(){let r;c.threads("Received new work message",this,e);try{r=yield v[e.msg](e,this),c.threads("operation successful",this,r),Atomics.store(this.lock,0,r)}catch(e){console.error(e),Atomics.store(this.lock,0,1)}Atomics.notify(this.lock,0)}))}if(globalThis.onmessage=({data:e})=>{var r,t,n,s;switch(c.threads("Received new control message",e),e.msg){case"handshake":{const i=new SharedArrayBuffer((null!==(r=null==u?void 0:u.maxPageSize)&&void 0!==r?r:o.maxPageSize)+Int32Array.BYTES_PER_ELEMENT),s=new Int32Array(i,null!==(t=null==u?void 0:u.maxPageSize)&&void 0!==t?t:o.maxPageSize),a=new Uint8Array(i,0,null!==(n=null==u?void 0:u.maxPageSize)&&void 0!==n?n:o.maxPageSize);s[0]=65535,f[e.id]={id:e.id,port:e.port,shm:i,lock:s,buffer:a},postMessage({msg:"ack",id:e.id,shm:i,lock:s}),e.port.onmessage=m.bind(f[e.id])}break;case"init":u=e.options,h=new i.Z({maxSize:1024*(null!==(s=null==u?void 0:u.cacheSize)&&void 0!==s?s:o.cacheSize),sizeCalculation:e=>{var r;return null!==(r=e.byteLength)&&void 0!==r?r:4}});break;case"close":postMessage({msg:"ack"}),close();break;default:throw new Error(`Invalid message received by backend: ${e}`)}},"undefined"==typeof SharedArrayBuffer)throw new Error('SharedArrayBuffer is not available. If your browser supports it, the webserver must send "Cross-Origin-Opener-Policy: same-origin "and "Cross-Origin-Embedder-Policy: require-corp" headers.')}},n={};function i(e){var r=n[e];if(void 0!==r)return r.exports;var o=n[e]={exports:{}};return t[e](o,o.exports,i),o.exports}i.m=t,i.x=()=>{var e=i.O(void 0,[142],(()=>i(3043)));return i.O(e)},e=[],i.O=(r,t,n,o)=>{if(!t){var s=1/0;for(d=0;d<e.length;d++){for(var[t,n,o]=e[d],a=!0,c=0;c<t.length;c++)(!1&o||s>=o)&&Object.keys(i.O).every((e=>i.O[e](t[c])))?t.splice(c--,1):(a=!1,o<s&&(s=o));if(a){e.splice(d--,1);var l=n();void 0!==l&&(r=l)}}return r}o=o||0;for(var d=e.length;d>0&&e[d-1][2]>o;d--)e[d]=e[d-1];e[d]=[t,n,o]},i.d=(e,r)=>{for(var t in r)i.o(r,t)&&!i.o(e,t)&&Object.defineProperty(e,t,{enumerable:!0,get:r[t]})},i.f={},i.e=e=>Promise.all(Object.keys(i.f).reduce(((r,t)=>(i.f[t](e,r),r)),[])),i.u=e=>e+".bundle.js",i.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),i.o=(e,r)=>Object.prototype.hasOwnProperty.call(e,r),(()=>{var e;i.g.importScripts&&(e=i.g.location+"");var r=i.g.document;if(!e&&r&&(r.currentScript&&(e=r.currentScript.src),!e)){var t=r.getElementsByTagName("script");t.length&&(e=t[t.length-1].src)}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),i.p=e})(),(()=>{var e={43:1};i.f.i=(r,t)=>{e[r]||importScripts(i.p+i.u(r))};var r=self.webpackChunkol_gpkg=self.webpackChunkol_gpkg||[],t=r.push.bind(r);r.push=r=>{var[n,o,s]=r;for(var a in o)i.o(o,a)&&(i.m[a]=o[a]);for(s&&s(i);n.length;)e[n.pop()]=1;t(r)}})(),r=i.x,i.x=()=>i.e(142).then(r),i.x()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,