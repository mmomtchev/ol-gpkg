(()=>{var e,t,r={5117:(e,t,r)=>{"use strict";var n,i=r(9453),o=r(4375),s=r(7428);const a="undefined"!=typeof process&&void 0!==(null===(n=null===process||void 0===process?void 0:process.env)||void 0===n?void 0:n.OL_GPKG_DEBUG)&&process.env.OL_GPKG_DEBUG?console.debug.bind(console):()=>{};var l=function(e,t,r,n){return new(r||(r=Promise))((function(i,o){function s(e){try{l(n.next(e))}catch(e){o(e)}}function a(e){try{l(n.throw(e))}catch(e){o(e)}}function l(e){var t;e.done?i(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(s,a)}l((n=n.apply(e,t||[])).next())}))};let c,d,u;i.Context.setupCustomContext(class{initialize(){const e=(0,s.iJ)({backendType:"sync",maxPageSize:4096});return(0,s.$C)({http:e}).then((e=>(this.db=new e.oo1.DB({filename:encodeURI(this.filePath),vfs:"http"}),this)))}constructor(e){if("string"!=typeof e)throw new Error("Unsupported URL type "+typeof e);this.filePath=e,this.db=null}size(){throw new Error("Method not implemented.")}readableSize(){throw new Error("Method not implemented.")}close(){if(!this.db)throw new Error("Not initialized");this.db.close()}getDBConnection(){return this.db}export(){return e=this,t=void 0,n=function*(){throw new Error("Method not implemented.")},new((r=void 0)||(r=Promise))((function(i,o){function s(e){try{l(n.next(e))}catch(e){o(e)}}function a(e){try{l(n.throw(e))}catch(e){o(e)}}function l(e){var t;e.done?i(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(s,a)}l((n=n.apply(e,t||[])).next())}));var e,t,r,n}registerFunction(e,t){throw new Error("Method not implemented.")}get(e,t){if(a("get",e),!this.db)throw new Error("Not initialized");const r=this.db.prepare(e);let n;return r.bind(t),r.step()&&(n=r.get({})),r.finalize(),n}isTableExists(e){if(a("isTableExists",e),!this.db)throw new Error("Not initialized");const t=this.db.prepare("SELECT name FROM sqlite_master WHERE type='table' AND name=:name");let r;return t.bind([e]),t.step()&&(r=t.get({})),t.finalize(),!!r}all(e,t){if(a("all",e,t),!this.db)throw new Error("Not initialized");return this.db.exec(e,{bind:t,rowMode:"object"})}each(e,t){if(a("each",e),!this.db)throw new Error("Not initialized");const r=this.db.prepare(e);return r.bind(t),{[Symbol.iterator](){return this},next:function(){return r.step()?{value:r.get({}),done:!1}:(r.finalize(),{done:!0})}}}run(e,t){if(a("run",e),!this.db)throw new Error("Not initialized");if(t&&!(t instanceof Array))for(const e in t)t["$"+e]=t[e];this.db.exec(e,{bind:t});const r=this.db.exec("select last_insert_rowid();",{rowMode:"array"});let n;return r&&(n=r[0][0]),{lastInsertRowid:+n,changes:this.db.changes()}}insert(e,t){throw new Error("HTTP VFS is read-only")}prepareStatement(e){if(!this.db)throw new Error("Not initialized");return this.db.prepare(e)}bindAndInsert(e,t){throw new Error("HTTP VFS is read-only")}closeStatement(e){e.finalize()}delete(e,t){throw new Error("HTTP VFS is read-only")}dropTable(e){throw new Error("HTTP VFS is read-only")}count(e,t,r){let n='SELECT COUNT(*) as count FROM "'+e+'"';return t&&(n+=" where "+t),this.get(n,r).count}transaction(e){}unsafe(e){}query(e,t){if(a("query",e,t),!this.db)throw new Error("Not initialized");const r=this.db.prepare(e);return r.bind(t),new i.ResultSet({[Symbol.iterator](){return this},next:function(){return r.step()?(a("query next item",r.get({})),{value:r.get({}),done:!1}):(r.finalize(),{done:!0})}},{close:()=>{r.finalize()}},this)}},i.OffscreenCanvasAdapter);const h={open:function(e){return l(this,void 0,void 0,(function*(){d={};try{c=yield i.GeoPackageManager.open(e.url);const t=c.getTileTables();for(const e of t){const t=c.getTileDao(e),r=c.getInfoForTable(t);a("tile tables",e,t,r),d[e]={id:e,extent:[r.tileMatrixSet.minX,r.tileMatrixSet.minY,r.tileMatrixSet.maxX,r.tileMatrixSet.maxY],minZoom:r.minZoom,srs:`${r.srs.organization}:${r.srs.id}`,resolutions:t.getTileMatrices().map((e=>e.getPixelXSize()))},u=new i.GeoPackageTileRetriever(t)}return{status:"ok",rasters:d}}catch(e){return d={},{status:"error",error:e}}}))},getRasterTile:function(e,t,r){return l(this,void 0,void 0,(function*(){a("getRasterTile",t,r,e);const n=yield u.getTile(t,r,e);if(console.log("GOT",n),!n)throw new Error(`Failed retrieving ${e}:${t}:${r}`);const i=n.getData();return console.log("IMAGE",i),i}))}};o.Jj(h)},1304:()=>{},9649:()=>{},9767:()=>{},165:()=>{}},n={};function i(e){var t=n[e];if(void 0!==t)return t.exports;var o=n[e]={exports:{}};return r[e](o,o.exports,i),o.exports}i.m=r,i.x=()=>{var e=i.O(void 0,[106,640,958],(()=>i(5117)));return i.O(e)},e=[],i.O=(t,r,n,o)=>{if(!r){var s=1/0;for(d=0;d<e.length;d++){for(var[r,n,o]=e[d],a=!0,l=0;l<r.length;l++)(!1&o||s>=o)&&Object.keys(i.O).every((e=>i.O[e](r[l])))?r.splice(l--,1):(a=!1,o<s&&(s=o));if(a){e.splice(d--,1);var c=n();void 0!==c&&(t=c)}}return t}o=o||0;for(var d=e.length;d>0&&e[d-1][2]>o;d--)e[d]=e[d-1];e[d]=[r,n,o]},i.d=(e,t)=>{for(var r in t)i.o(t,r)&&!i.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},i.f={},i.e=e=>Promise.all(Object.keys(i.f).reduce(((t,r)=>(i.f[r](e,t),t)),[])),i.u=e=>e+".bundle.js",i.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),i.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),(()=>{var e;i.g.importScripts&&(e=i.g.location+"");var t=i.g.document;if(!e&&t&&(t.currentScript&&(e=t.currentScript.src),!e)){var r=t.getElementsByTagName("script");r.length&&(e=r[r.length-1].src)}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),i.p=e})(),(()=>{i.b=self.location+"";var e={38:1};i.f.i=(t,r)=>{e[t]||importScripts(i.p+i.u(t))};var t=self.webpackChunkol_gpkg=self.webpackChunkol_gpkg||[],r=t.push.bind(t);t.push=t=>{var[n,o,s]=t;for(var a in o)i.o(o,a)&&(i.m[a]=o[a]);for(s&&s(i);n.length;)e[n.pop()]=1;r(t)}})(),t=i.x,i.x=()=>Promise.all([106,640,958].map(i.e,i)).then(t),i.x()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,