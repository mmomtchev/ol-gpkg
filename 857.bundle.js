"use strict";(self.webpackChunkol_gpkg=self.webpackChunkol_gpkg||[]).push([[857],{4857:(e,t,o)=>{o.r(t),o.d(t,{default:()=>f});var r,n=o(6410),s=o(4382),i=o(2724),c=o(3792),a=o(1202),l=o(4375),u=o(8948);const d="undefined"!=typeof process&&void 0!==(null===(r=null===process||void 0===process?void 0:process.env)||void 0===r?void 0:r.OL_GPKG_DEBUG)&&process.env.OL_GPKG_DEBUG?console.debug.bind(console):()=>{};class h{constructor(e){const t=new Worker(new URL(o.p+o.u(38),o.b));this.opt=e,this.worker=l.Ud(t)}open(){return this.worker.open(this.opt).then((e=>{if("error"===e.status)throw e.error;return this.metadata={rasters:e.rasters,vectors:[]},this.metadata}))}getRaster(e){const t={worker:this.worker},o=this.metadata.rasters[e];if(!o)throw new Error(`Invalid raster ${e}`);return t.projection=o.srs,t.minZoom=o.minZoom,t.tileGrid=new u.Z({extent:o.extent,minZoom:o.minZoom,resolutions:o.resolutions}),d("getRaster",t),t}}var w=o(2102),p=o(3584);class v extends w.Z{constructor(e){super(Object.assign(Object.assign({},e),{url:void 0,tileUrlFunction:t=>`${e.url}#${t[0]}:${t[1]}:${t[2]}`})),this.worker=e.worker,this.setTileLoadFunction(this.tileLoader.bind(this))}tileLoader(e,t){d("loading tile",[e.tileCoord[0],e.tileCoord[1],e.tileCoord[2]]);const o=e.getImage();this.worker.getRasterTile(e.tileCoord[0],e.tileCoord[1],e.tileCoord[2]).then((e=>{const t=new Blob([e]),r=URL.createObjectURL(t);o.src=r})).catch((t=>{d(t),e.setState(p.Z.ERROR)}))}disposeInternal(){}}var g=function(e,t,o,r){return new(o||(o=Promise))((function(n,s){function i(e){try{a(r.next(e))}catch(e){s(e)}}function c(e){try{a(r.throw(e))}catch(e){s(e)}}function a(e){var t;e.done?n(e.value):(t=e.value,t instanceof o?t:new o((function(e){e(t)}))).then(i,c)}a((r=r.apply(e,t||[])).next())}))};function f(){return g(this,void 0,void 0,(function*(){const e=new h({url:"https://velivole.b-cdn.net/StLouis.gpkg"});return yield e.open(),new n.Z({target:"map",layers:[new s.Z({source:new c.Z}),new s.Z({source:new v(e.getRaster("tiles"))})],view:new i.ZP({center:(0,a.mi)([-90.190346,38.620333]),zoom:15})})}))}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,