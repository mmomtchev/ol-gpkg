(()=>{"use strict";var e,t,r={8496:(e,t,r)=>{var o=r(88),n=r(9541),i=r(1492),s=r(9884);s.fF.threads("SQLite worker started"),globalThis.onmessage=({data:e})=>{s.fF.threads("SQLite received green light",e);const t=e;(0,o.Z)().then((e=>{s.fF.threads("SQLite init"),e.initWorker1API(),"object"==typeof t.httpChannel?(0,n.y)(e,t.httpChannel,t.httpOptions):!0===t.httpChannel&&(void 0===globalThis.XMLHttpRequest&&(globalThis.XMLHttpRequest=class extends(null){get response(){return Uint8Array.from(this.responseText.split("").map((e=>e.charCodeAt(0)))).buffer}}),(0,i.H)(e,t.httpOptions))}))}}},o={};function n(e){var t=o[e];if(void 0!==t)return t.exports;var i=o[e]={exports:{}};return r[e](i,i.exports,n),i.exports}n.m=r,n.x=()=>{var e=n.O(void 0,[106,640],(()=>n(8496)));return n.O(e)},e=[],n.O=(t,r,o,i)=>{if(!r){var s=1/0;for(c=0;c<e.length;c++){for(var[r,o,i]=e[c],a=!0,p=0;p<r.length;p++)(!1&i||s>=i)&&Object.keys(n.O).every((e=>n.O[e](r[p])))?r.splice(p--,1):(a=!1,i<s&&(s=i));if(a){e.splice(c--,1);var l=o();void 0!==l&&(t=l)}}return t}i=i||0;for(var c=e.length;c>0&&e[c-1][2]>i;c--)e[c]=e[c-1];e[c]=[r,o,i]},n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.f={},n.e=e=>Promise.all(Object.keys(n.f).reduce(((t,r)=>(n.f[r](e,t),t)),[])),n.u=e=>e+".bundle.js",n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),(()=>{var e;n.g.importScripts&&(e=n.g.location+"");var t=n.g.document;if(!e&&t&&(t.currentScript&&(e=t.currentScript.src),!e)){var r=t.getElementsByTagName("script");r.length&&(e=r[r.length-1].src)}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),n.p=e})(),(()=>{n.b=self.location+"";var e={496:1};n.f.i=(t,r)=>{e[t]||importScripts(n.p+n.u(t))};var t=self.webpackChunkol_gpkg=self.webpackChunkol_gpkg||[],r=t.push.bind(t);t.push=t=>{var[o,i,s]=t;for(var a in i)n.o(i,a)&&(n.m[a]=i[a]);for(s&&s(n);o.length;)e[o.pop()]=1;r(t)}})(),t=n.x,n.x=()=>Promise.all([n.e(106),n.e(640)]).then(t),n.x()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,