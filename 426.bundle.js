"use strict";(self.webpackChunkol_gpkg=self.webpackChunkol_gpkg||[]).push([[426],{972:(e,t,n)=>{e.exports=n.p+"ac952857b7bd9187e4ba.wasm"},926:(e,t,n)=>{var r;n.d(t,{fF:()=>l,vC:()=>s});const s={timeout:2e4,maxPageSize:4096,cacheSize:1024,headers:{}},i="undefined"!=typeof SQLITE_DEBUG&&SQLITE_DEBUG||"undefined"!=typeof process&&void 0!==(null===(r=null===process||void 0===process?void 0:process.env)||void 0===r?void 0:r.SQLITE_DEBUG)&&process.env.SQLITE_DEBUG||"",o=["threads","vfs","cache","http"],l={};for(const e of o)l[e]=i.includes(e)?console.debug.bind(console):()=>{}},6643:(e,t,n)=>{n.d(t,{y:()=>i});var r=n(926);const s={};function i(e,t,n){if("undefined"==typeof SharedArrayBuffer)throw new Error('SharedArrayBuffer is not available. If your browser supports it, the webserver must send "Cross-Origin-Opener-Policy: same-origin "and "Cross-Origin-Embedder-Policy: require-corp" headers.');if(!(t&&t.port instanceof MessagePort&&t.shm instanceof SharedArrayBuffer))throw new Error("No backend message channel in options");const i=new Int32Array(t.shm,t.shm.byteLength-Int32Array.BYTES_PER_ELEMENT),o=new Uint8Array(t.shm,0,t.shm.byteLength-Int32Array.BYTES_PER_ELEMENT),l=e.capi,a=e.wasm,c=l.sqlite3_vfs,u=l.sqlite3_file,_=l.sqlite3_io_methods,f=new c,p=new _;f.$iVersion=1,f.$szOsFile=l.sqlite3_file.structInfo.sizeof,f.$mxPathname=1024,f.$zName=a.allocCString("http"),f.$xDlOpen=f.$xDlError=f.$xDlSym=f.$xDlClose=null;const d=e=>{var s;Atomics.store(i,0,65535),t.port.postMessage(e);const o=Atomics.wait(i,0,65535,null!==(s=null==n?void 0:n.timeout)&&void 0!==s?s:r.vC.timeout);return"timed-out"===o?(console.error("Backend timeout",o,i,e),-1):Atomics.load(i,0)},m={xCheckReservedLock:function(e,t){return r.fF.vfs("xCheckReservedLock",e,t),a.poke(t,0,"i32"),0},xClose:function(e){return r.fF.vfs("xClose",e),s[e]?(delete s[e],0):l.SQLITE_NOTFOUND},xDeviceCharacteristics:function(e){return r.fF.vfs("xDeviceCharacteristics",e),l.SQLITE_IOCAP_IMMUTABLE},xFileControl:function(e,t,n){return r.fF.vfs("xFileControl",e,t,n),t===l.SQLITE_FCNTL_SYNC?l.SQLITE_OK:l.SQLITE_NOTFOUND},xFileSize:function(e,n){if(r.fF.vfs("xFileSize",e,n),!s[e])return l.SQLITE_NOTFOUND;if(0!==d({msg:"xFilesize",url:s[e].url}))return l.SQLITE_IOERR;const i=new BigUint64Array(t.shm,0,1)[0];return r.fF.vfs("file size is ",i),a.poke(n,i,"i64"),0},xLock:function(e,t){return r.fF.vfs("xLock",e,t),0},xRead:function(e,t,n,i){if(r.fF.vfs("xRead",e,t,n,i),Number(i)>Number.MAX_SAFE_INTEGER)return l.SQLITE_TOOBIG;if(!s[e])return l.SQLITE_NOTFOUND;const c=d({msg:"xRead",url:s[e].url,n,offset:i});return 0!==c?(console.error("xRead",c),l.SQLITE_IOERR):(a.heap8u().set(o.subarray(0,n),t),l.SQLITE_OK)},xSync:function(e,t){return r.fF.vfs("xSync",e,t),0},xTruncate:function(e,t){return r.fF.vfs("xTruncate",e,t),0},xUnlock:function(e,t){return r.fF.vfs("xUnlock",e,t),0},xWrite:function(e,t,n,s){return r.fF.vfs("xWrite",e,t,n,s),l.SQLITE_READONLY}},h={xAccess:function(e,n,s,i){if(r.fF.vfs("xAccess",e,n,s,i),0==(s&l.SQLITE_OPEN_READONLY))return a.poke(i,0,"i32"),l.SQLITE_OK;const o=a.cstrToJs(n),c=d({msg:"xAccess",url:o});if(0!==c)return console.error("xAccess",c),l.SQLITE_IOERR;const u=new Uint32Array(t.shm,0,1)[0];return a.poke(i,u,"i32"),l.SQLITE_OK},xCurrentTime:function(e,t){return r.fF.vfs("xCurrentTime",e,t),a.poke(t,2440587.5+(new Date).getTime()/864e5,"double"),0},xCurrentTimeInt64:function(e,t){return r.fF.vfs("xCurrentTimeInt64",e,t),a.poke(t,BigInt(2440587.5)*BigInt(864e5)+BigInt((new Date).getTime()),"i64"),0},xDelete:function(e,t,n){return r.fF.vfs("xDelete",e,t,n),l.SQLITE_READONLY},xFullPathname:function(e,t,n,s){return r.fF.vfs("xFullPathname",e,t,n,s),a.cstrncpy(s,t,n)<n?0:l.SQLITE_CANTOPEN},xGetLastError:function(e,t,n){return r.fF.vfs("xGetLastError",e,t,n),0},xOpen:function(e,t,n,i,o){if(r.fF.vfs("xOpen",e,t,n,i,o),0===t)return console.error("HTTP VFS does not support anonymous files"),l.SQLITE_CANTOPEN;if("number"!=typeof t)return l.SQLITE_ERROR;a.poke(o,l.SQLITE_OPEN_READONLY,"i32");const c=a.cstrToJs(t),_=Object.create(null);_.fid=n,_.url=c,_.sq3File=new u(n),_.sq3File.$pMethods=p.pointer,s[n]=_;const f=d({msg:"xOpen",url:c});return f<0?(console.error("xOpen",f),l.SQLITE_IOERR):0!==f?(console.error("xOpen",f),l.SQLITE_CANTOPEN):l.SQLITE_OK}};e.vfs.installVfs({io:{struct:p,methods:m},vfs:{struct:f,methods:h}}),e.oo1.DB.dbCtorHelper.setVfsPostOpenSql(f.pointer,(function(e,t){var s;t.capi.sqlite3_busy_timeout(e,null!==(s=null==n?void 0:n.timeout)&&void 0!==s?s:r.vC.timeout),t.capi.sqlite3_exec(e,["PRAGMA journal_mode=DELETE;","PRAGMA cache_size=0;"],0,0,0)}))}},8184:(e,t,n)=>{n.d(t,{H:()=>l});var r=n(5142),s=n(926);const i=function(){const e=new ArrayBuffer(2),t=new Uint8Array(e),n=new Uint16Array(e);if(t[0]=240,t[1]=13,61453==n[0])return s.fF.threads("System is Big-Endian"),!1;if(3568==n[0])return s.fF.threads("System is Little-Endian"),!0;throw new Error(`Failed determining endianness: ${n}`)}(),o={};function l(e,t){const n=e.capi,l=e.wasm,a=n.sqlite3_vfs,c=n.sqlite3_file,u=n.sqlite3_io_methods,_=new a,f=new u;_.$iVersion=1,_.$szOsFile=n.sqlite3_file.structInfo.sizeof,_.$mxPathname=1024,_.$zName=l.allocCString("http"),_.$xDlOpen=_.$xDlError=_.$xDlSym=_.$xDlClose=null;const p={xCheckReservedLock:function(e,t){return s.fF.vfs("xCheckReservedLock",e,t),l.poke(t,0,"i32"),0},xClose:function(e){return s.fF.vfs("xClose",e),o[e]?(delete o[e],0):n.SQLITE_NOTFOUND},xDeviceCharacteristics:function(e){return s.fF.vfs("xDeviceCharacteristics",e),n.SQLITE_IOCAP_IMMUTABLE},xFileControl:function(e,t,r){return s.fF.vfs("xFileControl",e,t,r),t===n.SQLITE_FCNTL_SYNC?n.SQLITE_OK:n.SQLITE_NOTFOUND},xFileSize:function(e,t){return s.fF.vfs("xFileSize",e,t),o[e]?(s.fF.vfs("file size is ",o[e].size),l.poke(t,o[e].size,"i64"),0):n.SQLITE_NOTFOUND},xLock:function(e,t){return s.fF.vfs("xLock",e,t),0},xRead:function(e,r,a,c){var u,_,f,d;if(s.fF.vfs("xRead (sync)",e,r,a,c),Number(c)>Number.MAX_SAFE_INTEGER)return n.SQLITE_TOOBIG;if(!o[e])return n.SQLITE_NOTFOUND;const m=o[e];if(!m.pageSize){m.pageSize=1024;const r=new Uint8Array(2),o=p.xRead(e,r,2,BigInt(16)),l=new Uint16Array(r.buffer);if(0!==o)return n.SQLITE_IOERR;if(function(e){if(i)for(let t=0;t<e.length;t++)e[t]=(65280&e[t])>>8|(255&e[t])<<8}(l),m.pageSize=l[0],s.fF.vfs(`page size is ${m.pageSize}`),1024!=m.pageSize&&(console.warn(`Page size for ${m.url} is ${m.pageSize}, recommended size is 1024`),m.pageCache.delete(0)),m.pageSize>(null!==(u=null==t?void 0:t.maxPageSize)&&void 0!==u?u:s.vC.maxPageSize))throw new Error(`${m.pageSize} is over the maximum configured ${null!==(_=null==t?void 0:t.maxPageSize)&&void 0!==_?_:s.vC.maxPageSize}`)}try{const e=BigInt(m.pageSize),i=BigInt(a),o=c/e;o*e!==c&&s.fF.vfs(`Read chunk ${c} is not page-aligned`);let u=o*e;if(u+e<c+i)throw new Error(`Read chunk ${c}:${a} spans across a page-boundary`);let _=m.pageCache.get(Number(o));if("number"==typeof _){s.fF.cache(`[sync] cache hit (multi-page segment) for ${m.url}:${o}`);const t=BigInt(_)*e;_=m.pageCache.get(_),_ instanceof Uint8Array?u=t:_=void 0}if(void 0===_){s.fF.cache(`[sync] cache miss for ${m.url}:${o}`);let e=m.pageSize,r=o>0&&m.pageCache.get(Number(o)-1);r&&("number"==typeof r&&(r=m.pageCache.get(r)),r instanceof Uint8Array&&(e=2*r.byteLength,s.fF.cache(`[sync] downloading super page of size ${e}`)));const i=e/m.pageSize;s.fF.http(`downloading page ${o} of size ${e} starting at ${u}`);const l=new XMLHttpRequest;l.open("GET",m.url,!1);for(const e of Object.keys(null!==(f=null==t?void 0:t.headers)&&void 0!==f?f:s.vC.headers))l.setRequestHeader(e,(null!==(d=null==t?void 0:t.headers)&&void 0!==d?d:s.vC.headers)[e]);if(l.setRequestHeader("Range",`bytes=${u}-${u+BigInt(e-1)}`),l.responseType="arraybuffer",l.onload=()=>{l.response instanceof ArrayBuffer&&(_=new Uint8Array(l.response))},l.send(),!_)return n.SQLITE_IOERR;if(!(_ instanceof Uint8Array)||0===_.length)throw new Error(`Invalid HTTP response received: ${JSON.stringify(l.response)}`);m.pageCache.set(Number(o),_);for(let e=Number(o)+1;e<Number(o)+i;e++)m.pageCache.set(e,Number(o))}else s.fF.cache(`[sync] cache hit for ${m.url}:${o}`);const p=Number(c-u);return r instanceof Uint8Array?r.set(_.subarray(p,p+a)):l.heap8u().set(_.subarray(p,p+a),r),n.SQLITE_OK}catch(e){return console.error(e),n.SQLITE_ERROR}},xSync:function(e,t){return s.fF.vfs("xSync",e,t),0},xTruncate:function(e,t){return s.fF.vfs("xTruncate",e,t),0},xUnlock:function(e,t){return s.fF.vfs("xUnlock",e,t),0},xWrite:function(e,t,r,i){return s.fF.vfs("xWrite",e,t,r,i),n.SQLITE_READONLY}},d={xAccess:function(e,t,r,i){if(s.fF.vfs("xAccess",e,t,r,i),0==(r&n.SQLITE_OPEN_READONLY))return l.poke(i,0,"i32"),n.SQLITE_OK;const o=Symbol();return d.xOpen(e,t,o,r,i)===n.SQLITE_OK?(p.xClose(o),l.poke(i,1,"i32")):l.poke(i,0,"i32"),n.SQLITE_OK},xCurrentTime:function(e,t){return s.fF.vfs("xCurrentTime",e,t),l.poke(t,2440587.5+(new Date).getTime()/864e5,"double"),0},xCurrentTimeInt64:function(e,t){return s.fF.vfs("xCurrentTimeInt64",e,t),l.poke(t,BigInt(2440587.5)*BigInt(864e5)+BigInt((new Date).getTime()),"i64"),0},xDelete:function(e,t,r){return s.fF.vfs("xDelete",e,t,r),n.SQLITE_READONLY},xFullPathname:function(e,t,r,i){return s.fF.vfs("xFullPathname",e,t,r,i),l.cstrncpy(i,t,r)<r?0:n.SQLITE_CANTOPEN},xGetLastError:function(e,t,n){return s.fF.vfs("xGetLastError",e,t,n),0},xOpen:function(e,i,a,u,_){var p,d;if(s.fF.vfs("xOpen (sync)",e,i,a,u,_),0===i)return console.error("HTTP VFS does not support anonymous files"),n.SQLITE_CANTOPEN;if("number"!=typeof i)return n.SQLITE_ERROR;const m=l.cstrToJs(i);let h=!1;try{const e=new XMLHttpRequest;e.open("HEAD",m,!1);for(const n of Object.keys(null!==(p=null==t?void 0:t.headers)&&void 0!==p?p:s.vC.headers))e.setRequestHeader(n,(null!==(d=null==t?void 0:t.headers)&&void 0!==d?d:s.vC.headers)[n]);e.onload=()=>{var n,i;const l=Object.create(null);l.fid=a,l.url=m,l.sq3File=new c(a),l.sq3File.$pMethods=f.pointer,l.size=BigInt(null!==(n=e.getResponseHeader("Content-Length"))&&void 0!==n?n:0),l.pageCache=new r.Z({maxSize:1024*(null!==(i=null==t?void 0:t.cacheSize)&&void 0!==i?i:s.vC.cacheSize),sizeCalculation:e=>{var t;return null!==(t=e.byteLength)&&void 0!==t?t:4}}),"bytes"!==e.getResponseHeader("Accept-Ranges")&&console.warn(`Server for ${m} does not advertise 'Accept-Ranges'. If the server supports it, in order to remove this message, add "Accept-Ranges: bytes". Additionally, if using CORS, add "Access-Control-Expose-Headers: *".`),o[a]=l,h=!0},e.send()}catch(e){console.error("xOpen",e)}return h?(l.poke(_,n.SQLITE_OPEN_READONLY,"i32"),n.SQLITE_OK):(console.error("xOpen"),n.SQLITE_CANTOPEN)}};e.vfs.installVfs({io:{struct:f,methods:p},vfs:{struct:_,methods:d}}),e.oo1.DB.dbCtorHelper.setVfsPostOpenSql(_.pointer,(function(e,n){var r;n.capi.sqlite3_busy_timeout(e,null!==(r=null==t?void 0:t.timeout)&&void 0!==r?r:s.vC.timeout),n.capi.sqlite3_exec(e,["PRAGMA journal_mode=DELETE;","PRAGMA cache_size=0;"],0,0,0)}))}},5848:(t,n,r)=>{r.d(n,{Z:()=>o});var s,i=(s="file:///home/mmom/src/sqlite-wasm-http/deps/dist/sqlite3-bundler-friendly.mjs",function(t={}){var n,i,o=void 0!==t?t:{};o.ready=new Promise((function(e,t){n=e,i=t}));const l=globalThis.sqlite3InitModuleState||Object.assign(Object.create(null),{debugModule:()=>{}});delete globalThis.sqlite3InitModuleState,l.debugModule("globalThis.location =",globalThis.location);const a="emscripten-bug-17951";o[a]=function e(t,n){t.env.foo=function(){};const r=o.locateFile(e.uri,void 0===h?"":h);l.debugModule("instantiateWasm() uri =",r);const s=()=>fetch(r,{credentials:"same-origin"});return(WebAssembly.instantiateStreaming?async()=>WebAssembly.instantiateStreaming(s(),t).then((e=>n(e.instance,e.module))):async()=>s().then((e=>e.arrayBuffer())).then((e=>WebAssembly.instantiate(e,t))).then((e=>n(e.instance,e.module))))(),{}},o[a].uri="sqlite3.wasm";var c,u,_,f=Object.assign({},o),p="./this.program",d="object"==typeof window,m="function"==typeof importScripts,h=("object"==typeof process&&"object"==typeof process.versions&&process.versions.node,"");(d||m)&&(m?h=self.location.href:"undefined"!=typeof document&&document.currentScript&&(h=document.currentScript.src),s&&(h=s),h=0!==h.indexOf("blob:")?h.substr(0,h.replace(/[?#].*/,"").lastIndexOf("/")+1):"",c=e=>{var t=new XMLHttpRequest;return t.open("GET",e,!1),t.send(null),t.responseText},m&&(_=e=>{var t=new XMLHttpRequest;return t.open("GET",e,!1),t.responseType="arraybuffer",t.send(null),new Uint8Array(t.response)}),u=(e,t,n)=>{var r=new XMLHttpRequest;r.open("GET",e,!0),r.responseType="arraybuffer",r.onload=()=>{200==r.status||0==r.status&&r.response?t(r.response):n()},r.onerror=n,r.send(null)});var g,q,y=o.print||console.log.bind(console),b=o.printErr||console.warn.bind(console);Object.assign(o,f),f=null,o.arguments&&o.arguments,o.thisProgram&&(p=o.thisProgram),o.quit&&o.quit,o.wasmBinary&&(g=o.wasmBinary),o.noExitRuntime,"object"!=typeof WebAssembly&&U("no native wasm support detected");var v=!1;function w(e,t){e||U(t)}var E,x,S,A,I,k="undefined"!=typeof TextDecoder?new TextDecoder("utf8"):void 0;function T(e,t,n){for(var r=t+n,s=t;e[s]&&!(s>=r);)++s;if(s-t>16&&e.buffer&&k)return k.decode(e.subarray(t,s));for(var i="";t<s;){var o=e[t++];if(128&o){var l=63&e[t++];if(192!=(224&o)){var a=63&e[t++];if((o=224==(240&o)?(15&o)<<12|l<<6|a:(7&o)<<18|l<<12|a<<6|63&e[t++])<65536)i+=String.fromCharCode(o);else{var c=o-65536;i+=String.fromCharCode(55296|c>>10,56320|1023&c)}}else i+=String.fromCharCode((31&o)<<6|l)}else i+=String.fromCharCode(o)}return i}function F(e,t,n,r){if(!(r>0))return 0;for(var s=n,i=n+r-1,o=0;o<e.length;++o){var l=e.charCodeAt(o);if(l>=55296&&l<=57343&&(l=65536+((1023&l)<<10)|1023&e.charCodeAt(++o)),l<=127){if(n>=i)break;t[n++]=l}else if(l<=2047){if(n+1>=i)break;t[n++]=192|l>>6,t[n++]=128|63&l}else if(l<=65535){if(n+2>=i)break;t[n++]=224|l>>12,t[n++]=128|l>>6&63,t[n++]=128|63&l}else{if(n+3>=i)break;t[n++]=240|l>>18,t[n++]=128|l>>12&63,t[n++]=128|l>>6&63,t[n++]=128|63&l}}return t[n]=0,n-s}function O(e,t,n){return F(e,x,t,n)}function L(e){for(var t=0,n=0;n<e.length;++n){var r=e.charCodeAt(n);r<=127?t++:r<=2047?t+=2:r>=55296&&r<=57343?(t+=4,++n):t+=3}return t}function P(){var e=q.buffer;o.HEAP8=E=new Int8Array(e),o.HEAP16=S=new Int16Array(e),o.HEAP32=A=new Int32Array(e),o.HEAPU8=x=new Uint8Array(e),o.HEAPU16=new Uint16Array(e),o.HEAPU32=I=new Uint32Array(e),o.HEAPF32=new Float32Array(e),o.HEAPF64=new Float64Array(e),o.HEAP64=new BigInt64Array(e),o.HEAPU64=new BigUint64Array(e)}var C=o.INITIAL_MEMORY||16777216;w(C>=524288,"INITIAL_MEMORY should be larger than STACK_SIZE, was "+C+"! (STACK_SIZE=524288)"),q=o.wasmMemory?o.wasmMemory:new WebAssembly.Memory({initial:C/65536,maximum:32768}),P(),C=q.buffer.byteLength;var D=[],N=[],R=[],M=0,j=null,z=null;function B(e){M++,o.monitorRunDependencies&&o.monitorRunDependencies(M)}function Q(e){if(M--,o.monitorRunDependencies&&o.monitorRunDependencies(M),0==M&&(null!==j&&(clearInterval(j),j=null),z)){var t=z;z=null,t()}}function U(e){o.onAbort&&o.onAbort(e),b(e="Aborted("+e+")"),v=!0,e+=". Build with -sASSERTIONS for more info.";var t=new WebAssembly.RuntimeError(e);throw i(t),t}var W,H,G,V,$="data:application/octet-stream;base64,";function K(e){return e.startsWith($)}function J(e){try{if(e==W&&g)return new Uint8Array(g);if(_)return _(e);throw"both async and sync fetching of the wasm failed"}catch(e){U(e)}}function X(e,t,n){return function(e){return g||!d&&!m||"function"!=typeof fetch?Promise.resolve().then((function(){return J(e)})):fetch(e,{credentials:"same-origin"}).then((function(t){if(!t.ok)throw"failed to load wasm binary file at '"+e+"'";return t.arrayBuffer()})).catch((function(){return J(e)}))}(e).then((function(e){return WebAssembly.instantiate(e,t)})).then((function(e){return e})).then(n,(function(e){b("failed to asynchronously prepare wasm: "+e),U(e)}))}function Y(e){for(;e.length>0;)e.shift()(o)}o.locateFile?K(W="sqlite3.wasm")||(H=W,W=o.locateFile?o.locateFile(H,h):h+H):W=new URL(r(972),r.b).href;var Z={isAbs:e=>"/"===e.charAt(0),splitPath:e=>/^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/.exec(e).slice(1),normalizeArray:(e,t)=>{for(var n=0,r=e.length-1;r>=0;r--){var s=e[r];"."===s?e.splice(r,1):".."===s?(e.splice(r,1),n++):n&&(e.splice(r,1),n--)}if(t)for(;n;n--)e.unshift("..");return e},normalize:e=>{var t=Z.isAbs(e),n="/"===e.substr(-1);return(e=Z.normalizeArray(e.split("/").filter((e=>!!e)),!t).join("/"))||t||(e="."),e&&n&&(e+="/"),(t?"/":"")+e},dirname:e=>{var t=Z.splitPath(e),n=t[0],r=t[1];return n||r?(r&&(r=r.substr(0,r.length-1)),n+r):"."},basename:e=>{if("/"===e)return"/";var t=(e=(e=Z.normalize(e)).replace(/\/$/,"")).lastIndexOf("/");return-1===t?e:e.substr(t+1)},join:function(){var e=Array.prototype.slice.call(arguments);return Z.normalize(e.join("/"))},join2:(e,t)=>Z.normalize(e+"/"+t)},ee={resolve:function(){for(var e="",t=!1,n=arguments.length-1;n>=-1&&!t;n--){var r=n>=0?arguments[n]:ie.cwd();if("string"!=typeof r)throw new TypeError("Arguments to path.resolve must be strings");if(!r)return"";e=r+"/"+e,t=Z.isAbs(r)}return(t?"/":"")+(e=Z.normalizeArray(e.split("/").filter((e=>!!e)),!t).join("/"))||"."},relative:(e,t)=>{function n(e){for(var t=0;t<e.length&&""===e[t];t++);for(var n=e.length-1;n>=0&&""===e[n];n--);return t>n?[]:e.slice(t,n-t+1)}e=ee.resolve(e).substr(1),t=ee.resolve(t).substr(1);for(var r=n(e.split("/")),s=n(t.split("/")),i=Math.min(r.length,s.length),o=i,l=0;l<i;l++)if(r[l]!==s[l]){o=l;break}var a=[];for(l=o;l<r.length;l++)a.push("..");return(a=a.concat(s.slice(o))).join("/")}};function te(e,t,n){var r=n>0?n:L(e)+1,s=new Array(r),i=F(e,s,0,s.length);return t&&(s.length=i),s}var ne={ttys:[],init:function(){},shutdown:function(){},register:function(e,t){ne.ttys[e]={input:[],output:[],ops:t},ie.registerDevice(e,ne.stream_ops)},stream_ops:{open:function(e){var t=ne.ttys[e.node.rdev];if(!t)throw new ie.ErrnoError(43);e.tty=t,e.seekable=!1},close:function(e){e.tty.ops.fsync(e.tty)},fsync:function(e){e.tty.ops.fsync(e.tty)},read:function(e,t,n,r,s){if(!e.tty||!e.tty.ops.get_char)throw new ie.ErrnoError(60);for(var i=0,o=0;o<r;o++){var l;try{l=e.tty.ops.get_char(e.tty)}catch(e){throw new ie.ErrnoError(29)}if(void 0===l&&0===i)throw new ie.ErrnoError(6);if(null==l)break;i++,t[n+o]=l}return i&&(e.node.timestamp=Date.now()),i},write:function(e,t,n,r,s){if(!e.tty||!e.tty.ops.put_char)throw new ie.ErrnoError(60);try{for(var i=0;i<r;i++)e.tty.ops.put_char(e.tty,t[n+i])}catch(e){throw new ie.ErrnoError(29)}return r&&(e.node.timestamp=Date.now()),i}},default_tty_ops:{get_char:function(e){if(!e.input.length){var t=null;if("undefined"!=typeof window&&"function"==typeof window.prompt?null!==(t=window.prompt("Input: "))&&(t+="\n"):"function"==typeof readline&&null!==(t=readline())&&(t+="\n"),!t)return null;e.input=te(t,!0)}return e.input.shift()},put_char:function(e,t){null===t||10===t?(y(T(e.output,0)),e.output=[]):0!=t&&e.output.push(t)},fsync:function(e){e.output&&e.output.length>0&&(y(T(e.output,0)),e.output=[])}},default_tty1_ops:{put_char:function(e,t){null===t||10===t?(b(T(e.output,0)),e.output=[]):0!=t&&e.output.push(t)},fsync:function(e){e.output&&e.output.length>0&&(b(T(e.output,0)),e.output=[])}}};function re(e){U()}var se={ops_table:null,mount:function(e){return se.createNode(null,"/",16895,0)},createNode:function(e,t,n,r){if(ie.isBlkdev(n)||ie.isFIFO(n))throw new ie.ErrnoError(63);se.ops_table||(se.ops_table={dir:{node:{getattr:se.node_ops.getattr,setattr:se.node_ops.setattr,lookup:se.node_ops.lookup,mknod:se.node_ops.mknod,rename:se.node_ops.rename,unlink:se.node_ops.unlink,rmdir:se.node_ops.rmdir,readdir:se.node_ops.readdir,symlink:se.node_ops.symlink},stream:{llseek:se.stream_ops.llseek}},file:{node:{getattr:se.node_ops.getattr,setattr:se.node_ops.setattr},stream:{llseek:se.stream_ops.llseek,read:se.stream_ops.read,write:se.stream_ops.write,allocate:se.stream_ops.allocate,mmap:se.stream_ops.mmap,msync:se.stream_ops.msync}},link:{node:{getattr:se.node_ops.getattr,setattr:se.node_ops.setattr,readlink:se.node_ops.readlink},stream:{}},chrdev:{node:{getattr:se.node_ops.getattr,setattr:se.node_ops.setattr},stream:ie.chrdev_stream_ops}});var s=ie.createNode(e,t,n,r);return ie.isDir(s.mode)?(s.node_ops=se.ops_table.dir.node,s.stream_ops=se.ops_table.dir.stream,s.contents={}):ie.isFile(s.mode)?(s.node_ops=se.ops_table.file.node,s.stream_ops=se.ops_table.file.stream,s.usedBytes=0,s.contents=null):ie.isLink(s.mode)?(s.node_ops=se.ops_table.link.node,s.stream_ops=se.ops_table.link.stream):ie.isChrdev(s.mode)&&(s.node_ops=se.ops_table.chrdev.node,s.stream_ops=se.ops_table.chrdev.stream),s.timestamp=Date.now(),e&&(e.contents[t]=s,e.timestamp=s.timestamp),s},getFileDataAsTypedArray:function(e){return e.contents?e.contents.subarray?e.contents.subarray(0,e.usedBytes):new Uint8Array(e.contents):new Uint8Array(0)},expandFileStorage:function(e,t){var n=e.contents?e.contents.length:0;if(!(n>=t)){t=Math.max(t,n*(n<1048576?2:1.125)>>>0),0!=n&&(t=Math.max(t,256));var r=e.contents;e.contents=new Uint8Array(t),e.usedBytes>0&&e.contents.set(r.subarray(0,e.usedBytes),0)}},resizeFileStorage:function(e,t){if(e.usedBytes!=t)if(0==t)e.contents=null,e.usedBytes=0;else{var n=e.contents;e.contents=new Uint8Array(t),n&&e.contents.set(n.subarray(0,Math.min(t,e.usedBytes))),e.usedBytes=t}},node_ops:{getattr:function(e){var t={};return t.dev=ie.isChrdev(e.mode)?e.id:1,t.ino=e.id,t.mode=e.mode,t.nlink=1,t.uid=0,t.gid=0,t.rdev=e.rdev,ie.isDir(e.mode)?t.size=4096:ie.isFile(e.mode)?t.size=e.usedBytes:ie.isLink(e.mode)?t.size=e.link.length:t.size=0,t.atime=new Date(e.timestamp),t.mtime=new Date(e.timestamp),t.ctime=new Date(e.timestamp),t.blksize=4096,t.blocks=Math.ceil(t.size/t.blksize),t},setattr:function(e,t){void 0!==t.mode&&(e.mode=t.mode),void 0!==t.timestamp&&(e.timestamp=t.timestamp),void 0!==t.size&&se.resizeFileStorage(e,t.size)},lookup:function(e,t){throw ie.genericErrors[44]},mknod:function(e,t,n,r){return se.createNode(e,t,n,r)},rename:function(e,t,n){if(ie.isDir(e.mode)){var r;try{r=ie.lookupNode(t,n)}catch(e){}if(r)for(var s in r.contents)throw new ie.ErrnoError(55)}delete e.parent.contents[e.name],e.parent.timestamp=Date.now(),e.name=n,t.contents[n]=e,t.timestamp=e.parent.timestamp,e.parent=t},unlink:function(e,t){delete e.contents[t],e.timestamp=Date.now()},rmdir:function(e,t){var n=ie.lookupNode(e,t);for(var r in n.contents)throw new ie.ErrnoError(55);delete e.contents[t],e.timestamp=Date.now()},readdir:function(e){var t=[".",".."];for(var n in e.contents)e.contents.hasOwnProperty(n)&&t.push(n);return t},symlink:function(e,t,n){var r=se.createNode(e,t,41471,0);return r.link=n,r},readlink:function(e){if(!ie.isLink(e.mode))throw new ie.ErrnoError(28);return e.link}},stream_ops:{read:function(e,t,n,r,s){var i=e.node.contents;if(s>=e.node.usedBytes)return 0;var o=Math.min(e.node.usedBytes-s,r);if(o>8&&i.subarray)t.set(i.subarray(s,s+o),n);else for(var l=0;l<o;l++)t[n+l]=i[s+l];return o},write:function(e,t,n,r,s,i){if(t.buffer===E.buffer&&(i=!1),!r)return 0;var o=e.node;if(o.timestamp=Date.now(),t.subarray&&(!o.contents||o.contents.subarray)){if(i)return o.contents=t.subarray(n,n+r),o.usedBytes=r,r;if(0===o.usedBytes&&0===s)return o.contents=t.slice(n,n+r),o.usedBytes=r,r;if(s+r<=o.usedBytes)return o.contents.set(t.subarray(n,n+r),s),r}if(se.expandFileStorage(o,s+r),o.contents.subarray&&t.subarray)o.contents.set(t.subarray(n,n+r),s);else for(var l=0;l<r;l++)o.contents[s+l]=t[n+l];return o.usedBytes=Math.max(o.usedBytes,s+r),r},llseek:function(e,t,n){var r=t;if(1===n?r+=e.position:2===n&&ie.isFile(e.node.mode)&&(r+=e.node.usedBytes),r<0)throw new ie.ErrnoError(28);return r},allocate:function(e,t,n){se.expandFileStorage(e.node,t+n),e.node.usedBytes=Math.max(e.node.usedBytes,t+n)},mmap:function(e,t,n,r,s){if(!ie.isFile(e.node.mode))throw new ie.ErrnoError(43);var i,o,l=e.node.contents;if(2&s||l.buffer!==E.buffer){if((n>0||n+t<l.length)&&(l=l.subarray?l.subarray(n,n+t):Array.prototype.slice.call(l,n,n+t)),o=!0,!(i=re()))throw new ie.ErrnoError(48);E.set(l,i)}else o=!1,i=l.byteOffset;return{ptr:i,allocated:o}},msync:function(e,t,n,r,s){return se.stream_ops.write(e,t,0,r,n,!1),0}}},ie={root:null,mounts:[],devices:{},streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:!1,ignorePermissions:!0,ErrnoError:null,genericErrors:{},filesystems:null,syncFSRequests:0,lookupPath:(e,t={})=>{if(!(e=ee.resolve(e)))return{path:"",node:null};if((t=Object.assign({follow_mount:!0,recurse_count:0},t)).recurse_count>8)throw new ie.ErrnoError(32);for(var n=e.split("/").filter((e=>!!e)),r=ie.root,s="/",i=0;i<n.length;i++){var o=i===n.length-1;if(o&&t.parent)break;if(r=ie.lookupNode(r,n[i]),s=Z.join2(s,n[i]),ie.isMountpoint(r)&&(!o||o&&t.follow_mount)&&(r=r.mounted.root),!o||t.follow)for(var l=0;ie.isLink(r.mode);){var a=ie.readlink(s);if(s=ee.resolve(Z.dirname(s),a),r=ie.lookupPath(s,{recurse_count:t.recurse_count+1}).node,l++>40)throw new ie.ErrnoError(32)}}return{path:s,node:r}},getPath:e=>{for(var t;;){if(ie.isRoot(e)){var n=e.mount.mountpoint;return t?"/"!==n[n.length-1]?n+"/"+t:n+t:n}t=t?e.name+"/"+t:e.name,e=e.parent}},hashName:(e,t)=>{for(var n=0,r=0;r<t.length;r++)n=(n<<5)-n+t.charCodeAt(r)|0;return(e+n>>>0)%ie.nameTable.length},hashAddNode:e=>{var t=ie.hashName(e.parent.id,e.name);e.name_next=ie.nameTable[t],ie.nameTable[t]=e},hashRemoveNode:e=>{var t=ie.hashName(e.parent.id,e.name);if(ie.nameTable[t]===e)ie.nameTable[t]=e.name_next;else for(var n=ie.nameTable[t];n;){if(n.name_next===e){n.name_next=e.name_next;break}n=n.name_next}},lookupNode:(e,t)=>{var n=ie.mayLookup(e);if(n)throw new ie.ErrnoError(n,e);for(var r=ie.hashName(e.id,t),s=ie.nameTable[r];s;s=s.name_next){var i=s.name;if(s.parent.id===e.id&&i===t)return s}return ie.lookup(e,t)},createNode:(e,t,n,r)=>{var s=new ie.FSNode(e,t,n,r);return ie.hashAddNode(s),s},destroyNode:e=>{ie.hashRemoveNode(e)},isRoot:e=>e===e.parent,isMountpoint:e=>!!e.mounted,isFile:e=>32768==(61440&e),isDir:e=>16384==(61440&e),isLink:e=>40960==(61440&e),isChrdev:e=>8192==(61440&e),isBlkdev:e=>24576==(61440&e),isFIFO:e=>4096==(61440&e),isSocket:e=>49152==(49152&e),flagModes:{r:0,"r+":2,w:577,"w+":578,a:1089,"a+":1090},modeStringToFlags:e=>{var t=ie.flagModes[e];if(void 0===t)throw new Error("Unknown file open mode: "+e);return t},flagsToPermissionString:e=>{var t=["r","w","rw"][3&e];return 512&e&&(t+="w"),t},nodePermissions:(e,t)=>ie.ignorePermissions||(!t.includes("r")||292&e.mode)&&(!t.includes("w")||146&e.mode)&&(!t.includes("x")||73&e.mode)?0:2,mayLookup:e=>ie.nodePermissions(e,"x")||(e.node_ops.lookup?0:2),mayCreate:(e,t)=>{try{return ie.lookupNode(e,t),20}catch(e){}return ie.nodePermissions(e,"wx")},mayDelete:(e,t,n)=>{var r;try{r=ie.lookupNode(e,t)}catch(e){return e.errno}var s=ie.nodePermissions(e,"wx");if(s)return s;if(n){if(!ie.isDir(r.mode))return 54;if(ie.isRoot(r)||ie.getPath(r)===ie.cwd())return 10}else if(ie.isDir(r.mode))return 31;return 0},mayOpen:(e,t)=>e?ie.isLink(e.mode)?32:ie.isDir(e.mode)&&("r"!==ie.flagsToPermissionString(t)||512&t)?31:ie.nodePermissions(e,ie.flagsToPermissionString(t)):44,MAX_OPEN_FDS:4096,nextfd:(e=0,t=ie.MAX_OPEN_FDS)=>{for(var n=e;n<=t;n++)if(!ie.streams[n])return n;throw new ie.ErrnoError(33)},getStream:e=>ie.streams[e],createStream:(e,t,n)=>{ie.FSStream||(ie.FSStream=function(){this.shared={}},ie.FSStream.prototype={},Object.defineProperties(ie.FSStream.prototype,{object:{get:function(){return this.node},set:function(e){this.node=e}},isRead:{get:function(){return 1!=(2097155&this.flags)}},isWrite:{get:function(){return 0!=(2097155&this.flags)}},isAppend:{get:function(){return 1024&this.flags}},flags:{get:function(){return this.shared.flags},set:function(e){this.shared.flags=e}},position:{get:function(){return this.shared.position},set:function(e){this.shared.position=e}}})),e=Object.assign(new ie.FSStream,e);var r=ie.nextfd(t,n);return e.fd=r,ie.streams[r]=e,e},closeStream:e=>{ie.streams[e]=null},chrdev_stream_ops:{open:e=>{var t=ie.getDevice(e.node.rdev);e.stream_ops=t.stream_ops,e.stream_ops.open&&e.stream_ops.open(e)},llseek:()=>{throw new ie.ErrnoError(70)}},major:e=>e>>8,minor:e=>255&e,makedev:(e,t)=>e<<8|t,registerDevice:(e,t)=>{ie.devices[e]={stream_ops:t}},getDevice:e=>ie.devices[e],getMounts:e=>{for(var t=[],n=[e];n.length;){var r=n.pop();t.push(r),n.push.apply(n,r.mounts)}return t},syncfs:(e,t)=>{"function"==typeof e&&(t=e,e=!1),ie.syncFSRequests++,ie.syncFSRequests>1&&b("warning: "+ie.syncFSRequests+" FS.syncfs operations in flight at once, probably just doing extra work");var n=ie.getMounts(ie.root.mount),r=0;function s(e){return ie.syncFSRequests--,t(e)}function i(e){if(e)return i.errored?void 0:(i.errored=!0,s(e));++r>=n.length&&s(null)}n.forEach((t=>{if(!t.type.syncfs)return i(null);t.type.syncfs(t,e,i)}))},mount:(e,t,n)=>{var r,s="/"===n,i=!n;if(s&&ie.root)throw new ie.ErrnoError(10);if(!s&&!i){var o=ie.lookupPath(n,{follow_mount:!1});if(n=o.path,r=o.node,ie.isMountpoint(r))throw new ie.ErrnoError(10);if(!ie.isDir(r.mode))throw new ie.ErrnoError(54)}var l={type:e,opts:t,mountpoint:n,mounts:[]},a=e.mount(l);return a.mount=l,l.root=a,s?ie.root=a:r&&(r.mounted=l,r.mount&&r.mount.mounts.push(l)),a},unmount:e=>{var t=ie.lookupPath(e,{follow_mount:!1});if(!ie.isMountpoint(t.node))throw new ie.ErrnoError(28);var n=t.node,r=n.mounted,s=ie.getMounts(r);Object.keys(ie.nameTable).forEach((e=>{for(var t=ie.nameTable[e];t;){var n=t.name_next;s.includes(t.mount)&&ie.destroyNode(t),t=n}})),n.mounted=null;var i=n.mount.mounts.indexOf(r);n.mount.mounts.splice(i,1)},lookup:(e,t)=>e.node_ops.lookup(e,t),mknod:(e,t,n)=>{var r=ie.lookupPath(e,{parent:!0}).node,s=Z.basename(e);if(!s||"."===s||".."===s)throw new ie.ErrnoError(28);var i=ie.mayCreate(r,s);if(i)throw new ie.ErrnoError(i);if(!r.node_ops.mknod)throw new ie.ErrnoError(63);return r.node_ops.mknod(r,s,t,n)},create:(e,t)=>(t=void 0!==t?t:438,t&=4095,t|=32768,ie.mknod(e,t,0)),mkdir:(e,t)=>(t=void 0!==t?t:511,t&=1023,t|=16384,ie.mknod(e,t,0)),mkdirTree:(e,t)=>{for(var n=e.split("/"),r="",s=0;s<n.length;++s)if(n[s]){r+="/"+n[s];try{ie.mkdir(r,t)}catch(e){if(20!=e.errno)throw e}}},mkdev:(e,t,n)=>(void 0===n&&(n=t,t=438),t|=8192,ie.mknod(e,t,n)),symlink:(e,t)=>{if(!ee.resolve(e))throw new ie.ErrnoError(44);var n=ie.lookupPath(t,{parent:!0}).node;if(!n)throw new ie.ErrnoError(44);var r=Z.basename(t),s=ie.mayCreate(n,r);if(s)throw new ie.ErrnoError(s);if(!n.node_ops.symlink)throw new ie.ErrnoError(63);return n.node_ops.symlink(n,r,e)},rename:(e,t)=>{var n,r,s=Z.dirname(e),i=Z.dirname(t),o=Z.basename(e),l=Z.basename(t);if(n=ie.lookupPath(e,{parent:!0}).node,r=ie.lookupPath(t,{parent:!0}).node,!n||!r)throw new ie.ErrnoError(44);if(n.mount!==r.mount)throw new ie.ErrnoError(75);var a,c=ie.lookupNode(n,o),u=ee.relative(e,i);if("."!==u.charAt(0))throw new ie.ErrnoError(28);if("."!==(u=ee.relative(t,s)).charAt(0))throw new ie.ErrnoError(55);try{a=ie.lookupNode(r,l)}catch(e){}if(c!==a){var _=ie.isDir(c.mode),f=ie.mayDelete(n,o,_);if(f)throw new ie.ErrnoError(f);if(f=a?ie.mayDelete(r,l,_):ie.mayCreate(r,l))throw new ie.ErrnoError(f);if(!n.node_ops.rename)throw new ie.ErrnoError(63);if(ie.isMountpoint(c)||a&&ie.isMountpoint(a))throw new ie.ErrnoError(10);if(r!==n&&(f=ie.nodePermissions(n,"w")))throw new ie.ErrnoError(f);ie.hashRemoveNode(c);try{n.node_ops.rename(c,r,l)}catch(e){throw e}finally{ie.hashAddNode(c)}}},rmdir:e=>{var t=ie.lookupPath(e,{parent:!0}).node,n=Z.basename(e),r=ie.lookupNode(t,n),s=ie.mayDelete(t,n,!0);if(s)throw new ie.ErrnoError(s);if(!t.node_ops.rmdir)throw new ie.ErrnoError(63);if(ie.isMountpoint(r))throw new ie.ErrnoError(10);t.node_ops.rmdir(t,n),ie.destroyNode(r)},readdir:e=>{var t=ie.lookupPath(e,{follow:!0}).node;if(!t.node_ops.readdir)throw new ie.ErrnoError(54);return t.node_ops.readdir(t)},unlink:e=>{var t=ie.lookupPath(e,{parent:!0}).node;if(!t)throw new ie.ErrnoError(44);var n=Z.basename(e),r=ie.lookupNode(t,n),s=ie.mayDelete(t,n,!1);if(s)throw new ie.ErrnoError(s);if(!t.node_ops.unlink)throw new ie.ErrnoError(63);if(ie.isMountpoint(r))throw new ie.ErrnoError(10);t.node_ops.unlink(t,n),ie.destroyNode(r)},readlink:e=>{var t=ie.lookupPath(e).node;if(!t)throw new ie.ErrnoError(44);if(!t.node_ops.readlink)throw new ie.ErrnoError(28);return ee.resolve(ie.getPath(t.parent),t.node_ops.readlink(t))},stat:(e,t)=>{var n=ie.lookupPath(e,{follow:!t}).node;if(!n)throw new ie.ErrnoError(44);if(!n.node_ops.getattr)throw new ie.ErrnoError(63);return n.node_ops.getattr(n)},lstat:e=>ie.stat(e,!0),chmod:(e,t,n)=>{var r;if(!(r="string"==typeof e?ie.lookupPath(e,{follow:!n}).node:e).node_ops.setattr)throw new ie.ErrnoError(63);r.node_ops.setattr(r,{mode:4095&t|-4096&r.mode,timestamp:Date.now()})},lchmod:(e,t)=>{ie.chmod(e,t,!0)},fchmod:(e,t)=>{var n=ie.getStream(e);if(!n)throw new ie.ErrnoError(8);ie.chmod(n.node,t)},chown:(e,t,n,r)=>{var s;if(!(s="string"==typeof e?ie.lookupPath(e,{follow:!r}).node:e).node_ops.setattr)throw new ie.ErrnoError(63);s.node_ops.setattr(s,{timestamp:Date.now()})},lchown:(e,t,n)=>{ie.chown(e,t,n,!0)},fchown:(e,t,n)=>{var r=ie.getStream(e);if(!r)throw new ie.ErrnoError(8);ie.chown(r.node,t,n)},truncate:(e,t)=>{if(t<0)throw new ie.ErrnoError(28);var n;if(!(n="string"==typeof e?ie.lookupPath(e,{follow:!0}).node:e).node_ops.setattr)throw new ie.ErrnoError(63);if(ie.isDir(n.mode))throw new ie.ErrnoError(31);if(!ie.isFile(n.mode))throw new ie.ErrnoError(28);var r=ie.nodePermissions(n,"w");if(r)throw new ie.ErrnoError(r);n.node_ops.setattr(n,{size:t,timestamp:Date.now()})},ftruncate:(e,t)=>{var n=ie.getStream(e);if(!n)throw new ie.ErrnoError(8);if(0==(2097155&n.flags))throw new ie.ErrnoError(28);ie.truncate(n.node,t)},utime:(e,t,n)=>{var r=ie.lookupPath(e,{follow:!0}).node;r.node_ops.setattr(r,{timestamp:Math.max(t,n)})},open:(e,t,n)=>{if(""===e)throw new ie.ErrnoError(44);var r;if(n=void 0===n?438:n,n=64&(t="string"==typeof t?ie.modeStringToFlags(t):t)?4095&n|32768:0,"object"==typeof e)r=e;else{e=Z.normalize(e);try{r=ie.lookupPath(e,{follow:!(131072&t)}).node}catch(e){}}var s=!1;if(64&t)if(r){if(128&t)throw new ie.ErrnoError(20)}else r=ie.mknod(e,n,0),s=!0;if(!r)throw new ie.ErrnoError(44);if(ie.isChrdev(r.mode)&&(t&=-513),65536&t&&!ie.isDir(r.mode))throw new ie.ErrnoError(54);if(!s){var i=ie.mayOpen(r,t);if(i)throw new ie.ErrnoError(i)}512&t&&!s&&ie.truncate(r,0),t&=-131713;var l=ie.createStream({node:r,path:ie.getPath(r),flags:t,seekable:!0,position:0,stream_ops:r.stream_ops,ungotten:[],error:!1});return l.stream_ops.open&&l.stream_ops.open(l),!o.logReadFiles||1&t||(ie.readFiles||(ie.readFiles={}),e in ie.readFiles||(ie.readFiles[e]=1)),l},close:e=>{if(ie.isClosed(e))throw new ie.ErrnoError(8);e.getdents&&(e.getdents=null);try{e.stream_ops.close&&e.stream_ops.close(e)}catch(e){throw e}finally{ie.closeStream(e.fd)}e.fd=null},isClosed:e=>null===e.fd,llseek:(e,t,n)=>{if(ie.isClosed(e))throw new ie.ErrnoError(8);if(!e.seekable||!e.stream_ops.llseek)throw new ie.ErrnoError(70);if(0!=n&&1!=n&&2!=n)throw new ie.ErrnoError(28);return e.position=e.stream_ops.llseek(e,t,n),e.ungotten=[],e.position},read:(e,t,n,r,s)=>{if(r<0||s<0)throw new ie.ErrnoError(28);if(ie.isClosed(e))throw new ie.ErrnoError(8);if(1==(2097155&e.flags))throw new ie.ErrnoError(8);if(ie.isDir(e.node.mode))throw new ie.ErrnoError(31);if(!e.stream_ops.read)throw new ie.ErrnoError(28);var i=void 0!==s;if(i){if(!e.seekable)throw new ie.ErrnoError(70)}else s=e.position;var o=e.stream_ops.read(e,t,n,r,s);return i||(e.position+=o),o},write:(e,t,n,r,s,i)=>{if(r<0||s<0)throw new ie.ErrnoError(28);if(ie.isClosed(e))throw new ie.ErrnoError(8);if(0==(2097155&e.flags))throw new ie.ErrnoError(8);if(ie.isDir(e.node.mode))throw new ie.ErrnoError(31);if(!e.stream_ops.write)throw new ie.ErrnoError(28);e.seekable&&1024&e.flags&&ie.llseek(e,0,2);var o=void 0!==s;if(o){if(!e.seekable)throw new ie.ErrnoError(70)}else s=e.position;var l=e.stream_ops.write(e,t,n,r,s,i);return o||(e.position+=l),l},allocate:(e,t,n)=>{if(ie.isClosed(e))throw new ie.ErrnoError(8);if(t<0||n<=0)throw new ie.ErrnoError(28);if(0==(2097155&e.flags))throw new ie.ErrnoError(8);if(!ie.isFile(e.node.mode)&&!ie.isDir(e.node.mode))throw new ie.ErrnoError(43);if(!e.stream_ops.allocate)throw new ie.ErrnoError(138);e.stream_ops.allocate(e,t,n)},mmap:(e,t,n,r,s)=>{if(0!=(2&r)&&0==(2&s)&&2!=(2097155&e.flags))throw new ie.ErrnoError(2);if(1==(2097155&e.flags))throw new ie.ErrnoError(2);if(!e.stream_ops.mmap)throw new ie.ErrnoError(43);return e.stream_ops.mmap(e,t,n,r,s)},msync:(e,t,n,r,s)=>e.stream_ops.msync?e.stream_ops.msync(e,t,n,r,s):0,munmap:e=>0,ioctl:(e,t,n)=>{if(!e.stream_ops.ioctl)throw new ie.ErrnoError(59);return e.stream_ops.ioctl(e,t,n)},readFile:(e,t={})=>{if(t.flags=t.flags||0,t.encoding=t.encoding||"binary","utf8"!==t.encoding&&"binary"!==t.encoding)throw new Error('Invalid encoding type "'+t.encoding+'"');var n,r=ie.open(e,t.flags),s=ie.stat(e).size,i=new Uint8Array(s);return ie.read(r,i,0,s,0),"utf8"===t.encoding?n=T(i,0):"binary"===t.encoding&&(n=i),ie.close(r),n},writeFile:(e,t,n={})=>{n.flags=n.flags||577;var r=ie.open(e,n.flags,n.mode);if("string"==typeof t){var s=new Uint8Array(L(t)+1),i=F(t,s,0,s.length);ie.write(r,s,0,i,void 0,n.canOwn)}else{if(!ArrayBuffer.isView(t))throw new Error("Unsupported data type");ie.write(r,t,0,t.byteLength,void 0,n.canOwn)}ie.close(r)},cwd:()=>ie.currentPath,chdir:e=>{var t=ie.lookupPath(e,{follow:!0});if(null===t.node)throw new ie.ErrnoError(44);if(!ie.isDir(t.node.mode))throw new ie.ErrnoError(54);var n=ie.nodePermissions(t.node,"x");if(n)throw new ie.ErrnoError(n);ie.currentPath=t.path},createDefaultDirectories:()=>{ie.mkdir("/tmp"),ie.mkdir("/home"),ie.mkdir("/home/web_user")},createDefaultDevices:()=>{ie.mkdir("/dev"),ie.registerDevice(ie.makedev(1,3),{read:()=>0,write:(e,t,n,r,s)=>r}),ie.mkdev("/dev/null",ie.makedev(1,3)),ne.register(ie.makedev(5,0),ne.default_tty_ops),ne.register(ie.makedev(6,0),ne.default_tty1_ops),ie.mkdev("/dev/tty",ie.makedev(5,0)),ie.mkdev("/dev/tty1",ie.makedev(6,0));var e=function(){if("object"==typeof crypto&&"function"==typeof crypto.getRandomValues){var e=new Uint8Array(1);return()=>(crypto.getRandomValues(e),e[0])}return()=>U("randomDevice")}();ie.createDevice("/dev","random",e),ie.createDevice("/dev","urandom",e),ie.mkdir("/dev/shm"),ie.mkdir("/dev/shm/tmp")},createSpecialDirectories:()=>{ie.mkdir("/proc");var e=ie.mkdir("/proc/self");ie.mkdir("/proc/self/fd"),ie.mount({mount:()=>{var t=ie.createNode(e,"fd",16895,73);return t.node_ops={lookup:(e,t)=>{var n=+t,r=ie.getStream(n);if(!r)throw new ie.ErrnoError(8);var s={parent:null,mount:{mountpoint:"fake"},node_ops:{readlink:()=>r.path}};return s.parent=s,s}},t}},{},"/proc/self/fd")},createStandardStreams:()=>{o.stdin?ie.createDevice("/dev","stdin",o.stdin):ie.symlink("/dev/tty","/dev/stdin"),o.stdout?ie.createDevice("/dev","stdout",null,o.stdout):ie.symlink("/dev/tty","/dev/stdout"),o.stderr?ie.createDevice("/dev","stderr",null,o.stderr):ie.symlink("/dev/tty1","/dev/stderr"),ie.open("/dev/stdin",0),ie.open("/dev/stdout",1),ie.open("/dev/stderr",1)},ensureErrnoError:()=>{ie.ErrnoError||(ie.ErrnoError=function(e,t){this.name="ErrnoError",this.node=t,this.setErrno=function(e){this.errno=e},this.setErrno(e),this.message="FS error"},ie.ErrnoError.prototype=new Error,ie.ErrnoError.prototype.constructor=ie.ErrnoError,[44].forEach((e=>{ie.genericErrors[e]=new ie.ErrnoError(e),ie.genericErrors[e].stack="<generic error, no stack>"})))},staticInit:()=>{ie.ensureErrnoError(),ie.nameTable=new Array(4096),ie.mount(se,{},"/"),ie.createDefaultDirectories(),ie.createDefaultDevices(),ie.createSpecialDirectories(),ie.filesystems={MEMFS:se}},init:(e,t,n)=>{ie.init.initialized=!0,ie.ensureErrnoError(),o.stdin=e||o.stdin,o.stdout=t||o.stdout,o.stderr=n||o.stderr,ie.createStandardStreams()},quit:()=>{ie.init.initialized=!1;for(var e=0;e<ie.streams.length;e++){var t=ie.streams[e];t&&ie.close(t)}},getMode:(e,t)=>{var n=0;return e&&(n|=365),t&&(n|=146),n},findObject:(e,t)=>{var n=ie.analyzePath(e,t);return n.exists?n.object:null},analyzePath:(e,t)=>{try{e=(r=ie.lookupPath(e,{follow:!t})).path}catch(e){}var n={isRoot:!1,exists:!1,error:0,name:null,path:null,object:null,parentExists:!1,parentPath:null,parentObject:null};try{var r=ie.lookupPath(e,{parent:!0});n.parentExists=!0,n.parentPath=r.path,n.parentObject=r.node,n.name=Z.basename(e),r=ie.lookupPath(e,{follow:!t}),n.exists=!0,n.path=r.path,n.object=r.node,n.name=r.node.name,n.isRoot="/"===r.path}catch(e){n.error=e.errno}return n},createPath:(e,t,n,r)=>{e="string"==typeof e?e:ie.getPath(e);for(var s=t.split("/").reverse();s.length;){var i=s.pop();if(i){var o=Z.join2(e,i);try{ie.mkdir(o)}catch(e){}e=o}}return o},createFile:(e,t,n,r,s)=>{var i=Z.join2("string"==typeof e?e:ie.getPath(e),t),o=ie.getMode(r,s);return ie.create(i,o)},createDataFile:(e,t,n,r,s,i)=>{var o=t;e&&(e="string"==typeof e?e:ie.getPath(e),o=t?Z.join2(e,t):e);var l=ie.getMode(r,s),a=ie.create(o,l);if(n){if("string"==typeof n){for(var c=new Array(n.length),u=0,_=n.length;u<_;++u)c[u]=n.charCodeAt(u);n=c}ie.chmod(a,146|l);var f=ie.open(a,577);ie.write(f,n,0,n.length,0,i),ie.close(f),ie.chmod(a,l)}return a},createDevice:(e,t,n,r)=>{var s=Z.join2("string"==typeof e?e:ie.getPath(e),t),i=ie.getMode(!!n,!!r);ie.createDevice.major||(ie.createDevice.major=64);var o=ie.makedev(ie.createDevice.major++,0);return ie.registerDevice(o,{open:e=>{e.seekable=!1},close:e=>{r&&r.buffer&&r.buffer.length&&r(10)},read:(e,t,r,s,i)=>{for(var o=0,l=0;l<s;l++){var a;try{a=n()}catch(e){throw new ie.ErrnoError(29)}if(void 0===a&&0===o)throw new ie.ErrnoError(6);if(null==a)break;o++,t[r+l]=a}return o&&(e.node.timestamp=Date.now()),o},write:(e,t,n,s,i)=>{for(var o=0;o<s;o++)try{r(t[n+o])}catch(e){throw new ie.ErrnoError(29)}return s&&(e.node.timestamp=Date.now()),o}}),ie.mkdev(s,i,o)},forceLoadFile:e=>{if(e.isDevice||e.isFolder||e.link||e.contents)return!0;if("undefined"!=typeof XMLHttpRequest)throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");if(!c)throw new Error("Cannot load without read() or XMLHttpRequest.");try{e.contents=te(c(e.url),!0),e.usedBytes=e.contents.length}catch(e){throw new ie.ErrnoError(29)}},createLazyFile:(e,t,n,r,s)=>{function i(){this.lengthKnown=!1,this.chunks=[]}if(i.prototype.get=function(e){if(!(e>this.length-1||e<0)){var t=e%this.chunkSize,n=e/this.chunkSize|0;return this.getter(n)[t]}},i.prototype.setDataGetter=function(e){this.getter=e},i.prototype.cacheLength=function(){var e=new XMLHttpRequest;if(e.open("HEAD",n,!1),e.send(null),!(e.status>=200&&e.status<300||304===e.status))throw new Error("Couldn't load "+n+". Status: "+e.status);var t,r=Number(e.getResponseHeader("Content-length")),s=(t=e.getResponseHeader("Accept-Ranges"))&&"bytes"===t,i=(t=e.getResponseHeader("Content-Encoding"))&&"gzip"===t,o=1048576;s||(o=r);var l=this;l.setDataGetter((e=>{var t=e*o,s=(e+1)*o-1;if(s=Math.min(s,r-1),void 0===l.chunks[e]&&(l.chunks[e]=((e,t)=>{if(e>t)throw new Error("invalid range ("+e+", "+t+") or no bytes requested!");if(t>r-1)throw new Error("only "+r+" bytes available! programmer error!");var s=new XMLHttpRequest;if(s.open("GET",n,!1),r!==o&&s.setRequestHeader("Range","bytes="+e+"-"+t),s.responseType="arraybuffer",s.overrideMimeType&&s.overrideMimeType("text/plain; charset=x-user-defined"),s.send(null),!(s.status>=200&&s.status<300||304===s.status))throw new Error("Couldn't load "+n+". Status: "+s.status);return void 0!==s.response?new Uint8Array(s.response||[]):te(s.responseText||"",!0)})(t,s)),void 0===l.chunks[e])throw new Error("doXHR failed!");return l.chunks[e]})),!i&&r||(o=r=1,r=this.getter(0).length,o=r,y("LazyFiles on gzip forces download of the whole file when length is accessed")),this._length=r,this._chunkSize=o,this.lengthKnown=!0},"undefined"!=typeof XMLHttpRequest){if(!m)throw"Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc";var o=new i;Object.defineProperties(o,{length:{get:function(){return this.lengthKnown||this.cacheLength(),this._length}},chunkSize:{get:function(){return this.lengthKnown||this.cacheLength(),this._chunkSize}}});var l={isDevice:!1,contents:o}}else l={isDevice:!1,url:n};var a=ie.createFile(e,t,l,r,s);l.contents?a.contents=l.contents:l.url&&(a.contents=null,a.url=l.url),Object.defineProperties(a,{usedBytes:{get:function(){return this.contents.length}}});var c={};function u(e,t,n,r,s){var i=e.node.contents;if(s>=i.length)return 0;var o=Math.min(i.length-s,r);if(i.slice)for(var l=0;l<o;l++)t[n+l]=i[s+l];else for(l=0;l<o;l++)t[n+l]=i.get(s+l);return o}return Object.keys(a.stream_ops).forEach((e=>{var t=a.stream_ops[e];c[e]=function(){return ie.forceLoadFile(a),t.apply(null,arguments)}})),c.read=(e,t,n,r,s)=>(ie.forceLoadFile(a),u(e,t,n,r,s)),c.mmap=(e,t,n,r,s)=>{ie.forceLoadFile(a);var i=re();if(!i)throw new ie.ErrnoError(48);return u(e,E,i,t,n),{ptr:i,allocated:!0}},a.stream_ops=c,a},createPreloadedFile:(e,t,n,r,s,i,o,l,a,c)=>{var _=t?ee.resolve(Z.join2(e,t)):e;function f(n){function u(n){c&&c(),l||ie.createDataFile(e,t,n,r,s,a),i&&i(),Q()}Browser.handledByPreloadPlugin(n,_,u,(()=>{o&&o(),Q()}))||u(n)}B(),"string"==typeof n?function(e,t,n,r){var s="al "+e;u(e,(t=>{w(t,'Loading data file "'+e+'" failed (no arrayBuffer).'),f(new Uint8Array(t)),s&&Q()}),(t=>{if(!n)throw'Loading data file "'+e+'" failed.';n()})),s&&B()}(n,0,o):f(n)},indexedDB:()=>window.indexedDB||window.mozIndexedDB||window.webkitIndexedDB||window.msIndexedDB,DB_NAME:()=>"EM_FS_"+window.location.pathname,DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:(e,t=(()=>{}),n=(()=>{}))=>{var r=ie.indexedDB();try{var s=r.open(ie.DB_NAME(),ie.DB_VERSION)}catch(e){return n(e)}s.onupgradeneeded=()=>{y("creating db"),s.result.createObjectStore(ie.DB_STORE_NAME)},s.onsuccess=()=>{var r=s.result.transaction([ie.DB_STORE_NAME],"readwrite"),i=r.objectStore(ie.DB_STORE_NAME),o=0,l=0,a=e.length;function c(){0==l?t():n()}e.forEach((e=>{var t=i.put(ie.analyzePath(e).object.contents,e);t.onsuccess=()=>{++o+l==a&&c()},t.onerror=()=>{l++,o+l==a&&c()}})),r.onerror=n},s.onerror=n},loadFilesFromDB:(e,t=(()=>{}),n=(()=>{}))=>{var r=ie.indexedDB();try{var s=r.open(ie.DB_NAME(),ie.DB_VERSION)}catch(e){return n(e)}s.onupgradeneeded=n,s.onsuccess=()=>{var r=s.result;try{var i=r.transaction([ie.DB_STORE_NAME],"readonly")}catch(e){return void n(e)}var o=i.objectStore(ie.DB_STORE_NAME),l=0,a=0,c=e.length;function u(){0==a?t():n()}e.forEach((e=>{var t=o.get(e);t.onsuccess=()=>{ie.analyzePath(e).exists&&ie.unlink(e),ie.createDataFile(Z.dirname(e),Z.basename(e),t.result,!0,!0,!0),++l+a==c&&u()},t.onerror=()=>{a++,l+a==c&&u()}})),i.onerror=n},s.onerror=n}},oe={DEFAULT_POLLMASK:5,calculateAt:function(e,t,n){if(Z.isAbs(t))return t;var r;if(r=-100===e?ie.cwd():oe.getStreamFromFD(e).path,0==t.length){if(!n)throw new ie.ErrnoError(44);return r}return Z.join2(r,t)},doStat:function(e,t,n){try{var r=e(t)}catch(e){if(e&&e.node&&Z.normalize(t)!==Z.normalize(ie.getPath(e.node)))return-54;throw e}A[n>>2]=r.dev,A[n+8>>2]=r.ino,A[n+12>>2]=r.mode,I[n+16>>2]=r.nlink,A[n+20>>2]=r.uid,A[n+24>>2]=r.gid,A[n+28>>2]=r.rdev,V=[r.size>>>0,(G=r.size,+Math.abs(G)>=1?G>0?(0|Math.min(+Math.floor(G/4294967296),4294967295))>>>0:~~+Math.ceil((G-+(~~G>>>0))/4294967296)>>>0:0)],A[n+40>>2]=V[0],A[n+44>>2]=V[1],A[n+48>>2]=4096,A[n+52>>2]=r.blocks;var s=r.atime.getTime(),i=r.mtime.getTime(),o=r.ctime.getTime();return V=[Math.floor(s/1e3)>>>0,(G=Math.floor(s/1e3),+Math.abs(G)>=1?G>0?(0|Math.min(+Math.floor(G/4294967296),4294967295))>>>0:~~+Math.ceil((G-+(~~G>>>0))/4294967296)>>>0:0)],A[n+56>>2]=V[0],A[n+60>>2]=V[1],I[n+64>>2]=s%1e3*1e3,V=[Math.floor(i/1e3)>>>0,(G=Math.floor(i/1e3),+Math.abs(G)>=1?G>0?(0|Math.min(+Math.floor(G/4294967296),4294967295))>>>0:~~+Math.ceil((G-+(~~G>>>0))/4294967296)>>>0:0)],A[n+72>>2]=V[0],A[n+76>>2]=V[1],I[n+80>>2]=i%1e3*1e3,V=[Math.floor(o/1e3)>>>0,(G=Math.floor(o/1e3),+Math.abs(G)>=1?G>0?(0|Math.min(+Math.floor(G/4294967296),4294967295))>>>0:~~+Math.ceil((G-+(~~G>>>0))/4294967296)>>>0:0)],A[n+88>>2]=V[0],A[n+92>>2]=V[1],I[n+96>>2]=o%1e3*1e3,V=[r.ino>>>0,(G=r.ino,+Math.abs(G)>=1?G>0?(0|Math.min(+Math.floor(G/4294967296),4294967295))>>>0:~~+Math.ceil((G-+(~~G>>>0))/4294967296)>>>0:0)],A[n+104>>2]=V[0],A[n+108>>2]=V[1],0},doMsync:function(e,t,n,r,s){if(!ie.isFile(t.node.mode))throw new ie.ErrnoError(43);if(2&r)return 0;var i=x.slice(e,e+n);ie.msync(t,i,s,n,r)},varargs:void 0,get:function(){return oe.varargs+=4,A[oe.varargs-4>>2]},getStr:function(e){var t=function(e,t){return e?T(x,e,void 0):""}(e);return t},getStreamFromFD:function(e){var t=ie.getStream(e);if(!t)throw new ie.ErrnoError(8);return t}},le=9007199254740992,ae=-9007199254740992;function ce(e){return e<ae||e>le?NaN:Number(e)}function ue(e){return I[e>>2]+4294967296*A[e+4>>2]}var _e,fe=[0,31,60,91,121,152,182,213,244,274,305,335],pe=[0,31,59,90,120,151,181,212,243,273,304,334];function de(e){var t=L(e)+1,n=we(t);return n&&F(e,E,n,t),n}function me(e){var t=q.buffer;try{return q.grow(e-t.byteLength+65535>>>16),P(),1}catch(e){}}_e=()=>performance.now();var he={};function ge(){if(!ge.strings){var e={USER:"web_user",LOGNAME:"web_user",PATH:"/",PWD:"/",HOME:"/home/web_user",LANG:("object"==typeof navigator&&navigator.languages&&navigator.languages[0]||"C").replace("-","_")+".UTF-8",_:p||"./this.program"};for(var t in he)void 0===he[t]?delete e[t]:e[t]=he[t];var n=[];for(var t in e)n.push(t+"="+e[t]);ge.strings=n}return ge.strings}var qe=function(e,t,n,r){e||(e=this),this.parent=e,this.mount=e.mount,this.mounted=null,this.id=ie.nextInode++,this.name=t,this.mode=n,this.node_ops={},this.stream_ops={},this.rdev=r};Object.defineProperties(qe.prototype,{read:{get:function(){return 365==(365&this.mode)},set:function(e){e?this.mode|=365:this.mode&=-366}},write:{get:function(){return 146==(146&this.mode)},set:function(e){e?this.mode|=146:this.mode&=-147}},isFolder:{get:function(){return ie.isDir(this.mode)}},isDevice:{get:function(){return ie.isChrdev(this.mode)}}}),ie.FSNode=qe,ie.staticInit();var ye,be={__syscall_chmod:function(e,t){try{return e=oe.getStr(e),ie.chmod(e,t),0}catch(e){if(void 0===ie||"ErrnoError"!==e.name)throw e;return-e.errno}},__syscall_faccessat:function(e,t,n,r){try{if(t=oe.getStr(t),t=oe.calculateAt(e,t),-8&n)return-28;var s=ie.lookupPath(t,{follow:!0}).node;if(!s)return-44;var i="";return 4&n&&(i+="r"),2&n&&(i+="w"),1&n&&(i+="x"),i&&ie.nodePermissions(s,i)?-2:0}catch(e){if(void 0===ie||"ErrnoError"!==e.name)throw e;return-e.errno}},__syscall_fchmod:function(e,t){try{return ie.fchmod(e,t),0}catch(e){if(void 0===ie||"ErrnoError"!==e.name)throw e;return-e.errno}},__syscall_fchown32:function(e,t,n){try{return ie.fchown(e,t,n),0}catch(e){if(void 0===ie||"ErrnoError"!==e.name)throw e;return-e.errno}},__syscall_fcntl64:function(e,t,n){oe.varargs=n;try{var r=oe.getStreamFromFD(e);switch(t){case 0:return(s=oe.get())<0?-28:ie.createStream(r,s).fd;case 1:case 2:case 6:case 7:return 0;case 3:return r.flags;case 4:var s=oe.get();return r.flags|=s,0;case 5:return s=oe.get(),S[s+0>>1]=2,0;case 16:case 8:default:return-28;case 9:return 28,A[ve()>>2]=28,-1}}catch(e){if(void 0===ie||"ErrnoError"!==e.name)throw e;return-e.errno}},__syscall_fstat64:function(e,t){try{var n=oe.getStreamFromFD(e);return oe.doStat(ie.stat,n.path,t)}catch(e){if(void 0===ie||"ErrnoError"!==e.name)throw e;return-e.errno}},__syscall_ftruncate64:function(e,t){try{return t=ce(t),isNaN(t)?-61:(ie.ftruncate(e,t),0)}catch(e){if(void 0===ie||"ErrnoError"!==e.name)throw e;return-e.errno}},__syscall_getcwd:function(e,t){try{if(0===t)return-28;var n=ie.cwd(),r=L(n)+1;return t<r?-68:(O(n,e,t),r)}catch(e){if(void 0===ie||"ErrnoError"!==e.name)throw e;return-e.errno}},__syscall_ioctl:function(e,t,n){oe.varargs=n;try{var r=oe.getStreamFromFD(e);switch(t){case 21509:case 21505:case 21510:case 21511:case 21512:case 21506:case 21507:case 21508:case 21523:case 21524:return r.tty?0:-59;case 21519:if(!r.tty)return-59;var s=oe.get();return A[s>>2]=0,0;case 21520:return r.tty?-28:-59;case 21531:return s=oe.get(),ie.ioctl(r,t,s);default:return-28}}catch(e){if(void 0===ie||"ErrnoError"!==e.name)throw e;return-e.errno}},__syscall_lstat64:function(e,t){try{return e=oe.getStr(e),oe.doStat(ie.lstat,e,t)}catch(e){if(void 0===ie||"ErrnoError"!==e.name)throw e;return-e.errno}},__syscall_mkdirat:function(e,t,n){try{return t=oe.getStr(t),t=oe.calculateAt(e,t),"/"===(t=Z.normalize(t))[t.length-1]&&(t=t.substr(0,t.length-1)),ie.mkdir(t,n,0),0}catch(e){if(void 0===ie||"ErrnoError"!==e.name)throw e;return-e.errno}},__syscall_newfstatat:function(e,t,n,r){try{t=oe.getStr(t);var s=256&r,i=4096&r;return r&=-6401,t=oe.calculateAt(e,t,i),oe.doStat(s?ie.lstat:ie.stat,t,n)}catch(e){if(void 0===ie||"ErrnoError"!==e.name)throw e;return-e.errno}},__syscall_openat:function(e,t,n,r){oe.varargs=r;try{t=oe.getStr(t),t=oe.calculateAt(e,t);var s=r?oe.get():0;return ie.open(t,n,s).fd}catch(e){if(void 0===ie||"ErrnoError"!==e.name)throw e;return-e.errno}},__syscall_readlinkat:function(e,t,n,r){try{if(t=oe.getStr(t),t=oe.calculateAt(e,t),r<=0)return-28;var s=ie.readlink(t),i=Math.min(r,L(s)),o=E[n+i];return O(s,n,r+1),E[n+i]=o,i}catch(e){if(void 0===ie||"ErrnoError"!==e.name)throw e;return-e.errno}},__syscall_rmdir:function(e){try{return e=oe.getStr(e),ie.rmdir(e),0}catch(e){if(void 0===ie||"ErrnoError"!==e.name)throw e;return-e.errno}},__syscall_stat64:function(e,t){try{return e=oe.getStr(e),oe.doStat(ie.stat,e,t)}catch(e){if(void 0===ie||"ErrnoError"!==e.name)throw e;return-e.errno}},__syscall_unlinkat:function(e,t,n){try{return t=oe.getStr(t),t=oe.calculateAt(e,t),0===n?ie.unlink(t):512===n?ie.rmdir(t):U("Invalid flags passed to unlinkat"),0}catch(e){if(void 0===ie||"ErrnoError"!==e.name)throw e;return-e.errno}},__syscall_utimensat:function(e,t,n,r){try{if(t=oe.getStr(t),t=oe.calculateAt(e,t,!0),n){var s=ue(n),i=A[n+8>>2];o=1e3*s+i/1e6,l=1e3*(s=ue(n+=16))+(i=A[n+8>>2])/1e6}else var o=Date.now(),l=o;return ie.utime(t,o,l),0}catch(e){if(void 0===ie||"ErrnoError"!==e.name)throw e;return-e.errno}},_emscripten_get_now_is_monotonic:function(){return true},_localtime_js:function(e,t){var n=new Date(1e3*ue(e));A[t>>2]=n.getSeconds(),A[t+4>>2]=n.getMinutes(),A[t+8>>2]=n.getHours(),A[t+12>>2]=n.getDate(),A[t+16>>2]=n.getMonth(),A[t+20>>2]=n.getFullYear()-1900,A[t+24>>2]=n.getDay();var r=0|function(e){var t;return((t=e.getFullYear())%4!=0||t%100==0&&t%400!=0?pe:fe)[e.getMonth()]+e.getDate()-1}(n);A[t+28>>2]=r,A[t+36>>2]=-60*n.getTimezoneOffset();var s=new Date(n.getFullYear(),0,1),i=new Date(n.getFullYear(),6,1).getTimezoneOffset(),o=s.getTimezoneOffset(),l=0|(i!=o&&n.getTimezoneOffset()==Math.min(o,i));A[t+32>>2]=l},_tzset_js:function(e,t,n){var r=(new Date).getFullYear(),s=new Date(r,0,1),i=new Date(r,6,1),o=s.getTimezoneOffset(),l=i.getTimezoneOffset(),a=Math.max(o,l);function c(e){var t=e.toTimeString().match(/\(([A-Za-z ]+)\)$/);return t?t[1]:"GMT"}I[e>>2]=60*a,A[t>>2]=Number(o!=l);var u=c(s),_=c(i),f=de(u),p=de(_);l<o?(I[n>>2]=f,I[n+4>>2]=p):(I[n>>2]=p,I[n+4>>2]=f)},emscripten_date_now:function(){return Date.now()},emscripten_get_now:_e,emscripten_resize_heap:function(e){var t,n=x.length,r=2147483648;if((e>>>=0)>r)return!1;for(var s=1;s<=4;s*=2){var i=n*(1+.2/s);if(i=Math.min(i,e+100663296),me(Math.min(r,(t=Math.max(e,i))+(65536-t%65536)%65536)))return!0}return!1},environ_get:function(e,t){var n=0;return ge().forEach((function(r,s){var i=t+n;I[e+4*s>>2]=i,function(e,t,n){for(var r=0;r<e.length;++r)E[t++>>0]=e.charCodeAt(r);E[t>>0]=0}(r,i),n+=r.length+1})),0},environ_sizes_get:function(e,t){var n=ge();I[e>>2]=n.length;var r=0;return n.forEach((function(e){r+=e.length+1})),I[t>>2]=r,0},fd_close:function(e){try{var t=oe.getStreamFromFD(e);return ie.close(t),0}catch(e){if(void 0===ie||"ErrnoError"!==e.name)throw e;return e.errno}},fd_fdstat_get:function(e,t){try{var n=oe.getStreamFromFD(e),r=n.tty?2:ie.isDir(n.mode)?3:ie.isLink(n.mode)?7:4;return E[t>>0]=r,0}catch(e){if(void 0===ie||"ErrnoError"!==e.name)throw e;return e.errno}},fd_read:function(e,t,n,r){try{var s=function(e,t,n,r){for(var s=0,i=0;i<n;i++){var o=I[t>>2],l=I[t+4>>2];t+=8;var a=ie.read(e,E,o,l,r);if(a<0)return-1;if(s+=a,a<l)break;void 0!==r&&(r+=a)}return s}(oe.getStreamFromFD(e),t,n);return I[r>>2]=s,0}catch(e){if(void 0===ie||"ErrnoError"!==e.name)throw e;return e.errno}},fd_seek:function(e,t,n,r){try{if(t=ce(t),isNaN(t))return 61;var s=oe.getStreamFromFD(e);return ie.llseek(s,t,n),V=[s.position>>>0,(G=s.position,+Math.abs(G)>=1?G>0?(0|Math.min(+Math.floor(G/4294967296),4294967295))>>>0:~~+Math.ceil((G-+(~~G>>>0))/4294967296)>>>0:0)],A[r>>2]=V[0],A[r+4>>2]=V[1],s.getdents&&0===t&&0===n&&(s.getdents=null),0}catch(e){if(void 0===ie||"ErrnoError"!==e.name)throw e;return e.errno}},fd_sync:function(e){try{var t=oe.getStreamFromFD(e);return t.stream_ops&&t.stream_ops.fsync?t.stream_ops.fsync(t):0}catch(e){if(void 0===ie||"ErrnoError"!==e.name)throw e;return e.errno}},fd_write:function(e,t,n,r){try{var s=function(e,t,n,r){for(var s=0,i=0;i<n;i++){var o=I[t>>2],l=I[t+4>>2];t+=8;var a=ie.write(e,E,o,l,r);if(a<0)return-1;s+=a,void 0!==r&&(r+=a)}return s}(oe.getStreamFromFD(e),t,n);return I[r>>2]=s,0}catch(e){if(void 0===ie||"ErrnoError"!==e.name)throw e;return e.errno}},memory:q},ve=(function(){var e,t,n,r,s={env:be,wasi_snapshot_preview1:be};function l(e,t){var n,r=e.exports;return o.asm=r,o.asm.__indirect_function_table,n=o.asm.__wasm_call_ctors,N.unshift(n),Q(),r}if(B(),o.instantiateWasm)try{return o.instantiateWasm(s,l)}catch(e){b("Module.instantiateWasm callback failed with error: "+e),i(e)}(e=g,t=W,n=s,r=function(e){l(e.instance)},e||"function"!=typeof WebAssembly.instantiateStreaming||K(t)||"function"!=typeof fetch?X(t,n,r):fetch(t,{credentials:"same-origin"}).then((function(e){return WebAssembly.instantiateStreaming(e,n).then(r,(function(e){return b("wasm streaming compile failed: "+e),b("falling back to ArrayBuffer instantiation"),X(t,n,r)}))}))).catch(i)}(),o._sqlite3_status64=function(){return(o._sqlite3_status64=o.asm.sqlite3_status64).apply(null,arguments)},o._sqlite3_status=function(){return(o._sqlite3_status=o.asm.sqlite3_status).apply(null,arguments)},o._sqlite3_db_status=function(){return(o._sqlite3_db_status=o.asm.sqlite3_db_status).apply(null,arguments)},o._sqlite3_msize=function(){return(o._sqlite3_msize=o.asm.sqlite3_msize).apply(null,arguments)},o._sqlite3_vfs_find=function(){return(o._sqlite3_vfs_find=o.asm.sqlite3_vfs_find).apply(null,arguments)},o._sqlite3_initialize=function(){return(o._sqlite3_initialize=o.asm.sqlite3_initialize).apply(null,arguments)},o._sqlite3_malloc=function(){return(o._sqlite3_malloc=o.asm.sqlite3_malloc).apply(null,arguments)},o._sqlite3_free=function(){return(o._sqlite3_free=o.asm.sqlite3_free).apply(null,arguments)},o._sqlite3_vfs_register=function(){return(o._sqlite3_vfs_register=o.asm.sqlite3_vfs_register).apply(null,arguments)},o._sqlite3_vfs_unregister=function(){return(o._sqlite3_vfs_unregister=o.asm.sqlite3_vfs_unregister).apply(null,arguments)},o._sqlite3_malloc64=function(){return(o._sqlite3_malloc64=o.asm.sqlite3_malloc64).apply(null,arguments)},o._sqlite3_realloc=function(){return(o._sqlite3_realloc=o.asm.sqlite3_realloc).apply(null,arguments)},o._sqlite3_realloc64=function(){return(o._sqlite3_realloc64=o.asm.sqlite3_realloc64).apply(null,arguments)},o._sqlite3_value_text=function(){return(o._sqlite3_value_text=o.asm.sqlite3_value_text).apply(null,arguments)},o._sqlite3_randomness=function(){return(o._sqlite3_randomness=o.asm.sqlite3_randomness).apply(null,arguments)},o._sqlite3_stricmp=function(){return(o._sqlite3_stricmp=o.asm.sqlite3_stricmp).apply(null,arguments)},o._sqlite3_strnicmp=function(){return(o._sqlite3_strnicmp=o.asm.sqlite3_strnicmp).apply(null,arguments)},o._sqlite3_uri_parameter=function(){return(o._sqlite3_uri_parameter=o.asm.sqlite3_uri_parameter).apply(null,arguments)},function(){return(ve=o.asm.__errno_location).apply(null,arguments)}),we=(o._sqlite3_uri_boolean=function(){return(o._sqlite3_uri_boolean=o.asm.sqlite3_uri_boolean).apply(null,arguments)},o._sqlite3_serialize=function(){return(o._sqlite3_serialize=o.asm.sqlite3_serialize).apply(null,arguments)},o._sqlite3_prepare_v2=function(){return(o._sqlite3_prepare_v2=o.asm.sqlite3_prepare_v2).apply(null,arguments)},o._sqlite3_step=function(){return(o._sqlite3_step=o.asm.sqlite3_step).apply(null,arguments)},o._sqlite3_column_int64=function(){return(o._sqlite3_column_int64=o.asm.sqlite3_column_int64).apply(null,arguments)},o._sqlite3_column_int=function(){return(o._sqlite3_column_int=o.asm.sqlite3_column_int).apply(null,arguments)},o._sqlite3_finalize=function(){return(o._sqlite3_finalize=o.asm.sqlite3_finalize).apply(null,arguments)},o._sqlite3_file_control=function(){return(o._sqlite3_file_control=o.asm.sqlite3_file_control).apply(null,arguments)},o._sqlite3_reset=function(){return(o._sqlite3_reset=o.asm.sqlite3_reset).apply(null,arguments)},o._sqlite3_deserialize=function(){return(o._sqlite3_deserialize=o.asm.sqlite3_deserialize).apply(null,arguments)},o._sqlite3_clear_bindings=function(){return(o._sqlite3_clear_bindings=o.asm.sqlite3_clear_bindings).apply(null,arguments)},o._sqlite3_value_blob=function(){return(o._sqlite3_value_blob=o.asm.sqlite3_value_blob).apply(null,arguments)},o._sqlite3_value_bytes=function(){return(o._sqlite3_value_bytes=o.asm.sqlite3_value_bytes).apply(null,arguments)},o._sqlite3_value_double=function(){return(o._sqlite3_value_double=o.asm.sqlite3_value_double).apply(null,arguments)},o._sqlite3_value_int=function(){return(o._sqlite3_value_int=o.asm.sqlite3_value_int).apply(null,arguments)},o._sqlite3_value_int64=function(){return(o._sqlite3_value_int64=o.asm.sqlite3_value_int64).apply(null,arguments)},o._sqlite3_value_subtype=function(){return(o._sqlite3_value_subtype=o.asm.sqlite3_value_subtype).apply(null,arguments)},o._sqlite3_value_pointer=function(){return(o._sqlite3_value_pointer=o.asm.sqlite3_value_pointer).apply(null,arguments)},o._sqlite3_value_type=function(){return(o._sqlite3_value_type=o.asm.sqlite3_value_type).apply(null,arguments)},o._sqlite3_value_nochange=function(){return(o._sqlite3_value_nochange=o.asm.sqlite3_value_nochange).apply(null,arguments)},o._sqlite3_value_frombind=function(){return(o._sqlite3_value_frombind=o.asm.sqlite3_value_frombind).apply(null,arguments)},o._sqlite3_value_dup=function(){return(o._sqlite3_value_dup=o.asm.sqlite3_value_dup).apply(null,arguments)},o._sqlite3_value_free=function(){return(o._sqlite3_value_free=o.asm.sqlite3_value_free).apply(null,arguments)},o._sqlite3_result_blob=function(){return(o._sqlite3_result_blob=o.asm.sqlite3_result_blob).apply(null,arguments)},o._sqlite3_result_error_nomem=function(){return(o._sqlite3_result_error_nomem=o.asm.sqlite3_result_error_nomem).apply(null,arguments)},o._sqlite3_result_error_toobig=function(){return(o._sqlite3_result_error_toobig=o.asm.sqlite3_result_error_toobig).apply(null,arguments)},o._sqlite3_result_double=function(){return(o._sqlite3_result_double=o.asm.sqlite3_result_double).apply(null,arguments)},o._sqlite3_result_error=function(){return(o._sqlite3_result_error=o.asm.sqlite3_result_error).apply(null,arguments)},o._sqlite3_result_int=function(){return(o._sqlite3_result_int=o.asm.sqlite3_result_int).apply(null,arguments)},o._sqlite3_result_int64=function(){return(o._sqlite3_result_int64=o.asm.sqlite3_result_int64).apply(null,arguments)},o._sqlite3_result_null=function(){return(o._sqlite3_result_null=o.asm.sqlite3_result_null).apply(null,arguments)},o._sqlite3_result_pointer=function(){return(o._sqlite3_result_pointer=o.asm.sqlite3_result_pointer).apply(null,arguments)},o._sqlite3_result_subtype=function(){return(o._sqlite3_result_subtype=o.asm.sqlite3_result_subtype).apply(null,arguments)},o._sqlite3_result_text=function(){return(o._sqlite3_result_text=o.asm.sqlite3_result_text).apply(null,arguments)},o._sqlite3_result_zeroblob=function(){return(o._sqlite3_result_zeroblob=o.asm.sqlite3_result_zeroblob).apply(null,arguments)},o._sqlite3_result_zeroblob64=function(){return(o._sqlite3_result_zeroblob64=o.asm.sqlite3_result_zeroblob64).apply(null,arguments)},o._sqlite3_result_error_code=function(){return(o._sqlite3_result_error_code=o.asm.sqlite3_result_error_code).apply(null,arguments)},o._sqlite3_user_data=function(){return(o._sqlite3_user_data=o.asm.sqlite3_user_data).apply(null,arguments)},o._sqlite3_context_db_handle=function(){return(o._sqlite3_context_db_handle=o.asm.sqlite3_context_db_handle).apply(null,arguments)},o._sqlite3_vtab_nochange=function(){return(o._sqlite3_vtab_nochange=o.asm.sqlite3_vtab_nochange).apply(null,arguments)},o._sqlite3_vtab_in_first=function(){return(o._sqlite3_vtab_in_first=o.asm.sqlite3_vtab_in_first).apply(null,arguments)},o._sqlite3_vtab_in_next=function(){return(o._sqlite3_vtab_in_next=o.asm.sqlite3_vtab_in_next).apply(null,arguments)},o._sqlite3_aggregate_context=function(){return(o._sqlite3_aggregate_context=o.asm.sqlite3_aggregate_context).apply(null,arguments)},o._sqlite3_get_auxdata=function(){return(o._sqlite3_get_auxdata=o.asm.sqlite3_get_auxdata).apply(null,arguments)},o._sqlite3_set_auxdata=function(){return(o._sqlite3_set_auxdata=o.asm.sqlite3_set_auxdata).apply(null,arguments)},o._sqlite3_column_count=function(){return(o._sqlite3_column_count=o.asm.sqlite3_column_count).apply(null,arguments)},o._sqlite3_data_count=function(){return(o._sqlite3_data_count=o.asm.sqlite3_data_count).apply(null,arguments)},o._sqlite3_column_blob=function(){return(o._sqlite3_column_blob=o.asm.sqlite3_column_blob).apply(null,arguments)},o._sqlite3_column_bytes=function(){return(o._sqlite3_column_bytes=o.asm.sqlite3_column_bytes).apply(null,arguments)},o._sqlite3_column_double=function(){return(o._sqlite3_column_double=o.asm.sqlite3_column_double).apply(null,arguments)},o._sqlite3_column_text=function(){return(o._sqlite3_column_text=o.asm.sqlite3_column_text).apply(null,arguments)},o._sqlite3_column_value=function(){return(o._sqlite3_column_value=o.asm.sqlite3_column_value).apply(null,arguments)},o._sqlite3_column_type=function(){return(o._sqlite3_column_type=o.asm.sqlite3_column_type).apply(null,arguments)},o._sqlite3_column_name=function(){return(o._sqlite3_column_name=o.asm.sqlite3_column_name).apply(null,arguments)},o._sqlite3_bind_blob=function(){return(o._sqlite3_bind_blob=o.asm.sqlite3_bind_blob).apply(null,arguments)},o._sqlite3_bind_double=function(){return(o._sqlite3_bind_double=o.asm.sqlite3_bind_double).apply(null,arguments)},o._sqlite3_bind_int=function(){return(o._sqlite3_bind_int=o.asm.sqlite3_bind_int).apply(null,arguments)},o._sqlite3_bind_int64=function(){return(o._sqlite3_bind_int64=o.asm.sqlite3_bind_int64).apply(null,arguments)},o._sqlite3_bind_null=function(){return(o._sqlite3_bind_null=o.asm.sqlite3_bind_null).apply(null,arguments)},o._sqlite3_bind_pointer=function(){return(o._sqlite3_bind_pointer=o.asm.sqlite3_bind_pointer).apply(null,arguments)},o._sqlite3_bind_text=function(){return(o._sqlite3_bind_text=o.asm.sqlite3_bind_text).apply(null,arguments)},o._sqlite3_bind_parameter_count=function(){return(o._sqlite3_bind_parameter_count=o.asm.sqlite3_bind_parameter_count).apply(null,arguments)},o._sqlite3_bind_parameter_index=function(){return(o._sqlite3_bind_parameter_index=o.asm.sqlite3_bind_parameter_index).apply(null,arguments)},o._sqlite3_db_handle=function(){return(o._sqlite3_db_handle=o.asm.sqlite3_db_handle).apply(null,arguments)},o._sqlite3_stmt_readonly=function(){return(o._sqlite3_stmt_readonly=o.asm.sqlite3_stmt_readonly).apply(null,arguments)},o._sqlite3_stmt_isexplain=function(){return(o._sqlite3_stmt_isexplain=o.asm.sqlite3_stmt_isexplain).apply(null,arguments)},o._sqlite3_stmt_status=function(){return(o._sqlite3_stmt_status=o.asm.sqlite3_stmt_status).apply(null,arguments)},o._sqlite3_sql=function(){return(o._sqlite3_sql=o.asm.sqlite3_sql).apply(null,arguments)},o._sqlite3_expanded_sql=function(){return(o._sqlite3_expanded_sql=o.asm.sqlite3_expanded_sql).apply(null,arguments)},o._sqlite3_preupdate_old=function(){return(o._sqlite3_preupdate_old=o.asm.sqlite3_preupdate_old).apply(null,arguments)},o._sqlite3_preupdate_count=function(){return(o._sqlite3_preupdate_count=o.asm.sqlite3_preupdate_count).apply(null,arguments)},o._sqlite3_preupdate_depth=function(){return(o._sqlite3_preupdate_depth=o.asm.sqlite3_preupdate_depth).apply(null,arguments)},o._sqlite3_preupdate_blobwrite=function(){return(o._sqlite3_preupdate_blobwrite=o.asm.sqlite3_preupdate_blobwrite).apply(null,arguments)},o._sqlite3_preupdate_new=function(){return(o._sqlite3_preupdate_new=o.asm.sqlite3_preupdate_new).apply(null,arguments)},o._sqlite3_value_numeric_type=function(){return(o._sqlite3_value_numeric_type=o.asm.sqlite3_value_numeric_type).apply(null,arguments)},o._sqlite3_errmsg=function(){return(o._sqlite3_errmsg=o.asm.sqlite3_errmsg).apply(null,arguments)},o._sqlite3_set_authorizer=function(){return(o._sqlite3_set_authorizer=o.asm.sqlite3_set_authorizer).apply(null,arguments)},o._sqlite3_strglob=function(){return(o._sqlite3_strglob=o.asm.sqlite3_strglob).apply(null,arguments)},o._sqlite3_strlike=function(){return(o._sqlite3_strlike=o.asm.sqlite3_strlike).apply(null,arguments)},o._sqlite3_exec=function(){return(o._sqlite3_exec=o.asm.sqlite3_exec).apply(null,arguments)},o._sqlite3_auto_extension=function(){return(o._sqlite3_auto_extension=o.asm.sqlite3_auto_extension).apply(null,arguments)},o._sqlite3_cancel_auto_extension=function(){return(o._sqlite3_cancel_auto_extension=o.asm.sqlite3_cancel_auto_extension).apply(null,arguments)},o._sqlite3_reset_auto_extension=function(){return(o._sqlite3_reset_auto_extension=o.asm.sqlite3_reset_auto_extension).apply(null,arguments)},o._sqlite3_prepare_v3=function(){return(o._sqlite3_prepare_v3=o.asm.sqlite3_prepare_v3).apply(null,arguments)},o._sqlite3_create_module=function(){return(o._sqlite3_create_module=o.asm.sqlite3_create_module).apply(null,arguments)},o._sqlite3_create_module_v2=function(){return(o._sqlite3_create_module_v2=o.asm.sqlite3_create_module_v2).apply(null,arguments)},o._sqlite3_drop_modules=function(){return(o._sqlite3_drop_modules=o.asm.sqlite3_drop_modules).apply(null,arguments)},o._sqlite3_declare_vtab=function(){return(o._sqlite3_declare_vtab=o.asm.sqlite3_declare_vtab).apply(null,arguments)},o._sqlite3_vtab_on_conflict=function(){return(o._sqlite3_vtab_on_conflict=o.asm.sqlite3_vtab_on_conflict).apply(null,arguments)},o._sqlite3_vtab_collation=function(){return(o._sqlite3_vtab_collation=o.asm.sqlite3_vtab_collation).apply(null,arguments)},o._sqlite3_vtab_in=function(){return(o._sqlite3_vtab_in=o.asm.sqlite3_vtab_in).apply(null,arguments)},o._sqlite3_vtab_rhs_value=function(){return(o._sqlite3_vtab_rhs_value=o.asm.sqlite3_vtab_rhs_value).apply(null,arguments)},o._sqlite3_vtab_distinct=function(){return(o._sqlite3_vtab_distinct=o.asm.sqlite3_vtab_distinct).apply(null,arguments)},o._sqlite3_keyword_name=function(){return(o._sqlite3_keyword_name=o.asm.sqlite3_keyword_name).apply(null,arguments)},o._sqlite3_keyword_count=function(){return(o._sqlite3_keyword_count=o.asm.sqlite3_keyword_count).apply(null,arguments)},o._sqlite3_keyword_check=function(){return(o._sqlite3_keyword_check=o.asm.sqlite3_keyword_check).apply(null,arguments)},o._sqlite3_complete=function(){return(o._sqlite3_complete=o.asm.sqlite3_complete).apply(null,arguments)},o._sqlite3_libversion=function(){return(o._sqlite3_libversion=o.asm.sqlite3_libversion).apply(null,arguments)},o._sqlite3_libversion_number=function(){return(o._sqlite3_libversion_number=o.asm.sqlite3_libversion_number).apply(null,arguments)},o._sqlite3_shutdown=function(){return(o._sqlite3_shutdown=o.asm.sqlite3_shutdown).apply(null,arguments)},o._sqlite3_last_insert_rowid=function(){return(o._sqlite3_last_insert_rowid=o.asm.sqlite3_last_insert_rowid).apply(null,arguments)},o._sqlite3_set_last_insert_rowid=function(){return(o._sqlite3_set_last_insert_rowid=o.asm.sqlite3_set_last_insert_rowid).apply(null,arguments)},o._sqlite3_changes64=function(){return(o._sqlite3_changes64=o.asm.sqlite3_changes64).apply(null,arguments)},o._sqlite3_changes=function(){return(o._sqlite3_changes=o.asm.sqlite3_changes).apply(null,arguments)},o._sqlite3_total_changes64=function(){return(o._sqlite3_total_changes64=o.asm.sqlite3_total_changes64).apply(null,arguments)},o._sqlite3_total_changes=function(){return(o._sqlite3_total_changes=o.asm.sqlite3_total_changes).apply(null,arguments)},o._sqlite3_txn_state=function(){return(o._sqlite3_txn_state=o.asm.sqlite3_txn_state).apply(null,arguments)},o._sqlite3_close_v2=function(){return(o._sqlite3_close_v2=o.asm.sqlite3_close_v2).apply(null,arguments)},o._sqlite3_busy_handler=function(){return(o._sqlite3_busy_handler=o.asm.sqlite3_busy_handler).apply(null,arguments)},o._sqlite3_progress_handler=function(){return(o._sqlite3_progress_handler=o.asm.sqlite3_progress_handler).apply(null,arguments)},o._sqlite3_busy_timeout=function(){return(o._sqlite3_busy_timeout=o.asm.sqlite3_busy_timeout).apply(null,arguments)},o._sqlite3_create_function=function(){return(o._sqlite3_create_function=o.asm.sqlite3_create_function).apply(null,arguments)},o._sqlite3_create_function_v2=function(){return(o._sqlite3_create_function_v2=o.asm.sqlite3_create_function_v2).apply(null,arguments)},o._sqlite3_create_window_function=function(){return(o._sqlite3_create_window_function=o.asm.sqlite3_create_window_function).apply(null,arguments)},o._sqlite3_overload_function=function(){return(o._sqlite3_overload_function=o.asm.sqlite3_overload_function).apply(null,arguments)},o._sqlite3_trace_v2=function(){return(o._sqlite3_trace_v2=o.asm.sqlite3_trace_v2).apply(null,arguments)},o._sqlite3_commit_hook=function(){return(o._sqlite3_commit_hook=o.asm.sqlite3_commit_hook).apply(null,arguments)},o._sqlite3_update_hook=function(){return(o._sqlite3_update_hook=o.asm.sqlite3_update_hook).apply(null,arguments)},o._sqlite3_rollback_hook=function(){return(o._sqlite3_rollback_hook=o.asm.sqlite3_rollback_hook).apply(null,arguments)},o._sqlite3_preupdate_hook=function(){return(o._sqlite3_preupdate_hook=o.asm.sqlite3_preupdate_hook).apply(null,arguments)},o._sqlite3_error_offset=function(){return(o._sqlite3_error_offset=o.asm.sqlite3_error_offset).apply(null,arguments)},o._sqlite3_errcode=function(){return(o._sqlite3_errcode=o.asm.sqlite3_errcode).apply(null,arguments)},o._sqlite3_extended_errcode=function(){return(o._sqlite3_extended_errcode=o.asm.sqlite3_extended_errcode).apply(null,arguments)},o._sqlite3_errstr=function(){return(o._sqlite3_errstr=o.asm.sqlite3_errstr).apply(null,arguments)},o._sqlite3_limit=function(){return(o._sqlite3_limit=o.asm.sqlite3_limit).apply(null,arguments)},o._sqlite3_open=function(){return(o._sqlite3_open=o.asm.sqlite3_open).apply(null,arguments)},o._sqlite3_open_v2=function(){return(o._sqlite3_open_v2=o.asm.sqlite3_open_v2).apply(null,arguments)},o._sqlite3_create_collation=function(){return(o._sqlite3_create_collation=o.asm.sqlite3_create_collation).apply(null,arguments)},o._sqlite3_create_collation_v2=function(){return(o._sqlite3_create_collation_v2=o.asm.sqlite3_create_collation_v2).apply(null,arguments)},o._sqlite3_collation_needed=function(){return(o._sqlite3_collation_needed=o.asm.sqlite3_collation_needed).apply(null,arguments)},o._sqlite3_table_column_metadata=function(){return(o._sqlite3_table_column_metadata=o.asm.sqlite3_table_column_metadata).apply(null,arguments)},o._sqlite3_extended_result_codes=function(){return(o._sqlite3_extended_result_codes=o.asm.sqlite3_extended_result_codes).apply(null,arguments)},o._sqlite3_uri_key=function(){return(o._sqlite3_uri_key=o.asm.sqlite3_uri_key).apply(null,arguments)},o._sqlite3_uri_int64=function(){return(o._sqlite3_uri_int64=o.asm.sqlite3_uri_int64).apply(null,arguments)},o._sqlite3_db_name=function(){return(o._sqlite3_db_name=o.asm.sqlite3_db_name).apply(null,arguments)},o._sqlite3_db_filename=function(){return(o._sqlite3_db_filename=o.asm.sqlite3_db_filename).apply(null,arguments)},o._sqlite3_compileoption_used=function(){return(o._sqlite3_compileoption_used=o.asm.sqlite3_compileoption_used).apply(null,arguments)},o._sqlite3_compileoption_get=function(){return(o._sqlite3_compileoption_get=o.asm.sqlite3_compileoption_get).apply(null,arguments)},o._sqlite3session_diff=function(){return(o._sqlite3session_diff=o.asm.sqlite3session_diff).apply(null,arguments)},o._sqlite3session_attach=function(){return(o._sqlite3session_attach=o.asm.sqlite3session_attach).apply(null,arguments)},o._sqlite3session_create=function(){return(o._sqlite3session_create=o.asm.sqlite3session_create).apply(null,arguments)},o._sqlite3session_delete=function(){return(o._sqlite3session_delete=o.asm.sqlite3session_delete).apply(null,arguments)},o._sqlite3session_table_filter=function(){return(o._sqlite3session_table_filter=o.asm.sqlite3session_table_filter).apply(null,arguments)},o._sqlite3session_changeset=function(){return(o._sqlite3session_changeset=o.asm.sqlite3session_changeset).apply(null,arguments)},o._sqlite3session_changeset_strm=function(){return(o._sqlite3session_changeset_strm=o.asm.sqlite3session_changeset_strm).apply(null,arguments)},o._sqlite3session_patchset_strm=function(){return(o._sqlite3session_patchset_strm=o.asm.sqlite3session_patchset_strm).apply(null,arguments)},o._sqlite3session_patchset=function(){return(o._sqlite3session_patchset=o.asm.sqlite3session_patchset).apply(null,arguments)},o._sqlite3session_enable=function(){return(o._sqlite3session_enable=o.asm.sqlite3session_enable).apply(null,arguments)},o._sqlite3session_indirect=function(){return(o._sqlite3session_indirect=o.asm.sqlite3session_indirect).apply(null,arguments)},o._sqlite3session_isempty=function(){return(o._sqlite3session_isempty=o.asm.sqlite3session_isempty).apply(null,arguments)},o._sqlite3session_memory_used=function(){return(o._sqlite3session_memory_used=o.asm.sqlite3session_memory_used).apply(null,arguments)},o._sqlite3session_object_config=function(){return(o._sqlite3session_object_config=o.asm.sqlite3session_object_config).apply(null,arguments)},o._sqlite3session_changeset_size=function(){return(o._sqlite3session_changeset_size=o.asm.sqlite3session_changeset_size).apply(null,arguments)},o._sqlite3changeset_start=function(){return(o._sqlite3changeset_start=o.asm.sqlite3changeset_start).apply(null,arguments)},o._sqlite3changeset_start_v2=function(){return(o._sqlite3changeset_start_v2=o.asm.sqlite3changeset_start_v2).apply(null,arguments)},o._sqlite3changeset_start_strm=function(){return(o._sqlite3changeset_start_strm=o.asm.sqlite3changeset_start_strm).apply(null,arguments)},o._sqlite3changeset_start_v2_strm=function(){return(o._sqlite3changeset_start_v2_strm=o.asm.sqlite3changeset_start_v2_strm).apply(null,arguments)},o._sqlite3changeset_next=function(){return(o._sqlite3changeset_next=o.asm.sqlite3changeset_next).apply(null,arguments)},o._sqlite3changeset_op=function(){return(o._sqlite3changeset_op=o.asm.sqlite3changeset_op).apply(null,arguments)},o._sqlite3changeset_pk=function(){return(o._sqlite3changeset_pk=o.asm.sqlite3changeset_pk).apply(null,arguments)},o._sqlite3changeset_old=function(){return(o._sqlite3changeset_old=o.asm.sqlite3changeset_old).apply(null,arguments)},o._sqlite3changeset_new=function(){return(o._sqlite3changeset_new=o.asm.sqlite3changeset_new).apply(null,arguments)},o._sqlite3changeset_conflict=function(){return(o._sqlite3changeset_conflict=o.asm.sqlite3changeset_conflict).apply(null,arguments)},o._sqlite3changeset_fk_conflicts=function(){return(o._sqlite3changeset_fk_conflicts=o.asm.sqlite3changeset_fk_conflicts).apply(null,arguments)},o._sqlite3changeset_finalize=function(){return(o._sqlite3changeset_finalize=o.asm.sqlite3changeset_finalize).apply(null,arguments)},o._sqlite3changeset_invert=function(){return(o._sqlite3changeset_invert=o.asm.sqlite3changeset_invert).apply(null,arguments)},o._sqlite3changeset_invert_strm=function(){return(o._sqlite3changeset_invert_strm=o.asm.sqlite3changeset_invert_strm).apply(null,arguments)},o._sqlite3changeset_apply_v2=function(){return(o._sqlite3changeset_apply_v2=o.asm.sqlite3changeset_apply_v2).apply(null,arguments)},o._sqlite3changeset_apply=function(){return(o._sqlite3changeset_apply=o.asm.sqlite3changeset_apply).apply(null,arguments)},o._sqlite3changeset_apply_v2_strm=function(){return(o._sqlite3changeset_apply_v2_strm=o.asm.sqlite3changeset_apply_v2_strm).apply(null,arguments)},o._sqlite3changeset_apply_strm=function(){return(o._sqlite3changeset_apply_strm=o.asm.sqlite3changeset_apply_strm).apply(null,arguments)},o._sqlite3changegroup_new=function(){return(o._sqlite3changegroup_new=o.asm.sqlite3changegroup_new).apply(null,arguments)},o._sqlite3changegroup_add=function(){return(o._sqlite3changegroup_add=o.asm.sqlite3changegroup_add).apply(null,arguments)},o._sqlite3changegroup_output=function(){return(o._sqlite3changegroup_output=o.asm.sqlite3changegroup_output).apply(null,arguments)},o._sqlite3changegroup_add_strm=function(){return(o._sqlite3changegroup_add_strm=o.asm.sqlite3changegroup_add_strm).apply(null,arguments)},o._sqlite3changegroup_output_strm=function(){return(o._sqlite3changegroup_output_strm=o.asm.sqlite3changegroup_output_strm).apply(null,arguments)},o._sqlite3changegroup_delete=function(){return(o._sqlite3changegroup_delete=o.asm.sqlite3changegroup_delete).apply(null,arguments)},o._sqlite3changeset_concat=function(){return(o._sqlite3changeset_concat=o.asm.sqlite3changeset_concat).apply(null,arguments)},o._sqlite3changeset_concat_strm=function(){return(o._sqlite3changeset_concat_strm=o.asm.sqlite3changeset_concat_strm).apply(null,arguments)},o._sqlite3session_config=function(){return(o._sqlite3session_config=o.asm.sqlite3session_config).apply(null,arguments)},o._sqlite3_sourceid=function(){return(o._sqlite3_sourceid=o.asm.sqlite3_sourceid).apply(null,arguments)},o._sqlite3_wasm_pstack_ptr=function(){return(o._sqlite3_wasm_pstack_ptr=o.asm.sqlite3_wasm_pstack_ptr).apply(null,arguments)},o._sqlite3_wasm_pstack_restore=function(){return(o._sqlite3_wasm_pstack_restore=o.asm.sqlite3_wasm_pstack_restore).apply(null,arguments)},o._sqlite3_wasm_pstack_alloc=function(){return(o._sqlite3_wasm_pstack_alloc=o.asm.sqlite3_wasm_pstack_alloc).apply(null,arguments)},o._sqlite3_wasm_pstack_remaining=function(){return(o._sqlite3_wasm_pstack_remaining=o.asm.sqlite3_wasm_pstack_remaining).apply(null,arguments)},o._sqlite3_wasm_pstack_quota=function(){return(o._sqlite3_wasm_pstack_quota=o.asm.sqlite3_wasm_pstack_quota).apply(null,arguments)},o._sqlite3_wasm_db_error=function(){return(o._sqlite3_wasm_db_error=o.asm.sqlite3_wasm_db_error).apply(null,arguments)},o._sqlite3_wasm_test_struct=function(){return(o._sqlite3_wasm_test_struct=o.asm.sqlite3_wasm_test_struct).apply(null,arguments)},o._sqlite3_wasm_enum_json=function(){return(o._sqlite3_wasm_enum_json=o.asm.sqlite3_wasm_enum_json).apply(null,arguments)},o._sqlite3_wasm_vfs_unlink=function(){return(o._sqlite3_wasm_vfs_unlink=o.asm.sqlite3_wasm_vfs_unlink).apply(null,arguments)},o._sqlite3_wasm_db_vfs=function(){return(o._sqlite3_wasm_db_vfs=o.asm.sqlite3_wasm_db_vfs).apply(null,arguments)},o._sqlite3_wasm_db_reset=function(){return(o._sqlite3_wasm_db_reset=o.asm.sqlite3_wasm_db_reset).apply(null,arguments)},o._sqlite3_wasm_db_export_chunked=function(){return(o._sqlite3_wasm_db_export_chunked=o.asm.sqlite3_wasm_db_export_chunked).apply(null,arguments)},o._sqlite3_wasm_db_serialize=function(){return(o._sqlite3_wasm_db_serialize=o.asm.sqlite3_wasm_db_serialize).apply(null,arguments)},o._sqlite3_wasm_vfs_create_file=function(){return(o._sqlite3_wasm_vfs_create_file=o.asm.sqlite3_wasm_vfs_create_file).apply(null,arguments)},o._sqlite3_wasm_kvvfsMakeKeyOnPstack=function(){return(o._sqlite3_wasm_kvvfsMakeKeyOnPstack=o.asm.sqlite3_wasm_kvvfsMakeKeyOnPstack).apply(null,arguments)},o._sqlite3_wasm_kvvfs_methods=function(){return(o._sqlite3_wasm_kvvfs_methods=o.asm.sqlite3_wasm_kvvfs_methods).apply(null,arguments)},o._sqlite3_wasm_vtab_config=function(){return(o._sqlite3_wasm_vtab_config=o.asm.sqlite3_wasm_vtab_config).apply(null,arguments)},o._sqlite3_wasm_db_config_ip=function(){return(o._sqlite3_wasm_db_config_ip=o.asm.sqlite3_wasm_db_config_ip).apply(null,arguments)},o._sqlite3_wasm_db_config_pii=function(){return(o._sqlite3_wasm_db_config_pii=o.asm.sqlite3_wasm_db_config_pii).apply(null,arguments)},o._sqlite3_wasm_db_config_s=function(){return(o._sqlite3_wasm_db_config_s=o.asm.sqlite3_wasm_db_config_s).apply(null,arguments)},o._sqlite3_wasm_config_i=function(){return(o._sqlite3_wasm_config_i=o.asm.sqlite3_wasm_config_i).apply(null,arguments)},o._sqlite3_wasm_config_ii=function(){return(o._sqlite3_wasm_config_ii=o.asm.sqlite3_wasm_config_ii).apply(null,arguments)},o._sqlite3_wasm_config_j=function(){return(o._sqlite3_wasm_config_j=o.asm.sqlite3_wasm_config_j).apply(null,arguments)},o._sqlite3_wasm_init_wasmfs=function(){return(o._sqlite3_wasm_init_wasmfs=o.asm.sqlite3_wasm_init_wasmfs).apply(null,arguments)},o._sqlite3_wasm_test_intptr=function(){return(o._sqlite3_wasm_test_intptr=o.asm.sqlite3_wasm_test_intptr).apply(null,arguments)},o._sqlite3_wasm_test_voidptr=function(){return(o._sqlite3_wasm_test_voidptr=o.asm.sqlite3_wasm_test_voidptr).apply(null,arguments)},o._sqlite3_wasm_test_int64_max=function(){return(o._sqlite3_wasm_test_int64_max=o.asm.sqlite3_wasm_test_int64_max).apply(null,arguments)},o._sqlite3_wasm_test_int64_min=function(){return(o._sqlite3_wasm_test_int64_min=o.asm.sqlite3_wasm_test_int64_min).apply(null,arguments)},o._sqlite3_wasm_test_int64_times2=function(){return(o._sqlite3_wasm_test_int64_times2=o.asm.sqlite3_wasm_test_int64_times2).apply(null,arguments)},o._sqlite3_wasm_test_int64_minmax=function(){return(o._sqlite3_wasm_test_int64_minmax=o.asm.sqlite3_wasm_test_int64_minmax).apply(null,arguments)},o._sqlite3_wasm_test_int64ptr=function(){return(o._sqlite3_wasm_test_int64ptr=o.asm.sqlite3_wasm_test_int64ptr).apply(null,arguments)},o._sqlite3_wasm_test_stack_overflow=function(){return(o._sqlite3_wasm_test_stack_overflow=o.asm.sqlite3_wasm_test_stack_overflow).apply(null,arguments)},o._sqlite3_wasm_test_str_hello=function(){return(o._sqlite3_wasm_test_str_hello=o.asm.sqlite3_wasm_test_str_hello).apply(null,arguments)},o._malloc=function(){return(we=o._malloc=o.asm.malloc).apply(null,arguments)});function Ee(){function e(){ye||(ye=!0,o.calledRun=!0,v||(o.noFSInit||ie.init.initialized||ie.init(),ie.ignorePermissions=!1,ne.init(),Y(N),n(o),o.onRuntimeInitialized&&o.onRuntimeInitialized(),function(){if(o.postRun)for("function"==typeof o.postRun&&(o.postRun=[o.postRun]);o.postRun.length;)e=o.postRun.shift(),R.unshift(e);var e;Y(R)}()))}M>0||(function(){if(o.preRun)for("function"==typeof o.preRun&&(o.preRun=[o.preRun]);o.preRun.length;)e=o.preRun.shift(),D.unshift(e);var e;Y(D)}(),M>0||(o.setStatus?(o.setStatus("Running..."),setTimeout((function(){setTimeout((function(){o.setStatus("")}),1),e()}),1)):e()))}if(o._free=function(){return(o._free=o.asm.free).apply(null,arguments)},o._realloc=function(){return(o._realloc=o.asm.realloc).apply(null,arguments)},o.wasmMemory=q,z=function e(){ye||Ee(),ye||(z=e)},o.preInit)for("function"==typeof o.preInit&&(o.preInit=[o.preInit]);o.preInit.length>0;)o.preInit.pop()();return Ee(),o.postRun||(o.postRun=[]),o.postRun.push((function(t){if(globalThis.sqlite3ApiBootstrap=function e(n=globalThis.sqlite3ApiConfig||e.defaultConfig){if(e.sqlite3)return console.warn("sqlite3ApiBootstrap() called multiple times.","Config and external initializers are ignored on calls after the first."),e.sqlite3;const r=Object.assign(Object.create(null),{exports:void 0,memory:void 0,bigIntEnabled:void 0!==t?!!t.HEAPU64:!!globalThis.BigInt64Array,debug:console.debug.bind(console),warn:console.warn.bind(console),error:console.error.bind(console),log:console.log.bind(console),wasmfsOpfsDir:"/opfs",useStdAlloc:!1},n||{});Object.assign(r,{allocExportName:r.useStdAlloc?"malloc":"sqlite3_malloc",deallocExportName:r.useStdAlloc?"free":"sqlite3_free",reallocExportName:r.useStdAlloc?"realloc":"sqlite3_realloc"},r),["exports","memory","wasmfsOpfsDir"].forEach((e=>{"function"==typeof r[e]&&(r[e]=r[e]())})),r.wasmOpfsDir=!1;const s=Object.create(null),i=Object.create(null),o=e=>s.sqlite3_js_rc_str&&s.sqlite3_js_rc_str(e)||"Unknown result code #"+e;class l extends Error{constructor(...e){let t;if(e.length)if("number"==typeof(n=e[0])&&n===(0|n))if(t=e[0],1===e.length)super(o(e[0]));else{const n=o(t);"object"==typeof e[1]?super(n,e[1]):(e[0]=n+":",super(e.join(" ")))}else 2===e.length&&"object"==typeof e[1]?super(...e):super(e.join(" "));var n;this.resultCode=t||s.SQLITE_ERROR,this.name="SQLite3Error"}}l.toss=(...e)=>{throw new l(...e)};const a=l.toss;r.wasmfsOpfsDir&&!/^\/[^/]+$/.test(r.wasmfsOpfsDir)&&a("config.wasmfsOpfsDir must be falsy or in the form '/dir-name'.");const c=e=>"bigint"!=typeof e&&!!(e===(0|e)&&e<=2147483647&&e>=-2147483648),u="undefined"==typeof SharedArrayBuffer?function(){}:SharedArrayBuffer,_=e=>e.buffer instanceof u,f=(e,t,n)=>_(e)?e.slice(t,n):e.subarray(t,n),p=e=>e&&(e instanceof Uint8Array||e instanceof Int8Array||e instanceof ArrayBuffer),d=e=>e&&(e instanceof Uint8Array||e instanceof Int8Array||e instanceof ArrayBuffer),m=e=>p(e)||a("Value is not of a supported TypedArray type."),h=new TextDecoder("utf-8"),g=function(e,t,n){return h.decode(f(e,t,n))};class q extends Error{constructor(...e){2===e.length&&"object"==typeof e[1]?super(...e):e.length?super(e.join(" ")):super("Allocation failed."),this.resultCode=s.SQLITE_NOMEM,this.name="WasmAllocError"}}q.toss=(...e)=>{throw new q(...e)},Object.assign(s,{sqlite3_bind_blob:void 0,sqlite3_bind_text:void 0,sqlite3_create_function_v2:(e,t,n,r,s,i,o,l,a)=>{},sqlite3_create_function:(e,t,n,r,s,i,o,l)=>{},sqlite3_create_window_function:(e,t,n,r,s,i,o,l,a,c)=>{},sqlite3_prepare_v3:(e,t,n,r,s,i)=>{},sqlite3_prepare_v2:(e,t,n,r,s)=>{},sqlite3_exec:(e,t,n,r,s)=>{},sqlite3_randomness:(e,t)=>{}});const y={affirmBindableTypedArray:m,flexibleString:function(e){return d(e)?g(e instanceof ArrayBuffer?new Uint8Array(e):e):Array.isArray(e)?e.join(""):(i.isPtr(e)&&(e=i.cstrToJs(e)),e)},bigIntFits32:e=>e>=-0x7fffffffn-1n&&e<=0x7fffffffn,bigIntFits64:function e(t){return e._max||(e._max=BigInt("0x7fffffffffffffff"),e._min=~e._max),t>=e._min&&t<=e._max},bigIntFitsDouble:function e(t){return e._min||(e._min=Number.MIN_SAFE_INTEGER,e._max=Number.MAX_SAFE_INTEGER),t>=e._min&&t<=e._max},isBindableTypedArray:p,isInt32:c,isSQLableTypedArray:d,isTypedArray:e=>!!(e&&e.constructor&&c(e.constructor.BYTES_PER_ELEMENT))&&e,typedArrayToString:g,isUIThread:()=>globalThis.window===globalThis&&!!globalThis.document,isSharedTypedArray:_,toss:function(...e){throw new Error(e.join(" "))},toss3:a,typedArrayPart:f};Object.assign(i,{ptrSizeof:r.wasmPtrSizeof||4,ptrIR:r.wasmPtrIR||"i32",bigIntEnabled:!!r.bigIntEnabled,exports:r.exports||a("Missing API config.exports (WASM module exports)."),memory:r.memory||r.exports.memory||a("API config object requires a WebAssembly.Memory object","in either config.exports.memory (exported)","or config.memory (imported)."),alloc:void 0,realloc:void 0,dealloc:void 0}),i.allocFromTypedArray=function(e){e instanceof ArrayBuffer&&(e=new Uint8Array(e)),m(e);const t=i.alloc(e.byteLength||1);return i.heapForSize(e.constructor).set(e.byteLength?e:[0],t),t};{const e=r.allocExportName,t=r.deallocExportName,n=r.reallocExportName;for(const r of[e,t,n])i.exports[r]instanceof Function||a("Missing required exports[",r,"] function.");i.alloc=function e(t){return e.impl(t)||q.toss("Failed to allocate",t," bytes.")},i.alloc.impl=i.exports[e],i.realloc=function e(t,n){const r=e.impl(t,n);return n?r||q.toss("Failed to reallocate",n," bytes."):0},i.realloc.impl=i.exports[n],i.dealloc=i.exports[t]}let b;if(i.compileOptionUsed=function e(t){if(!arguments.length){if(e._result)return e._result;e._opt||(e._rx=/^([^=]+)=(.+)/,e._rxInt=/^-?\d+$/,e._opt=function(t,n){const r=e._rx.exec(t);n[0]=r?r[1]:t,n[1]=!r||(e._rxInt.test(r[2])?+r[2]:r[2])});const t={},n=[0,0];let r,i=0;for(;r=s.sqlite3_compileoption_get(i++);)e._opt(r,n),t[n[0]]=n[1];return e._result=t}if(Array.isArray(t)){const e={};return t.forEach((t=>{e[t]=s.sqlite3_compileoption_used(t)})),e}return"object"==typeof t?(Object.keys(t).forEach((e=>{t[e]=s.sqlite3_compileoption_used(e)})),t):"string"==typeof t&&!!s.sqlite3_compileoption_used(t)},i.pstack=Object.assign(Object.create(null),{restore:i.exports.sqlite3_wasm_pstack_restore,alloc:function(e){return"string"!=typeof e||(e=i.sizeofIR(e))||q.toss("Invalid value for pstack.alloc(",arguments[0],")"),i.exports.sqlite3_wasm_pstack_alloc(e)||q.toss("Could not allocate",e,"bytes from the pstack.")},allocChunks:function(e,t){"string"!=typeof t||(t=i.sizeofIR(t))||q.toss("Invalid size value for allocChunks(",arguments[1],")");const n=i.pstack.alloc(e*t),r=[];let s=0,o=0;for(;s<e;++s,o+=t)r.push(n+o);return r},allocPtr:(e=1,t=!0)=>1===e?i.pstack.alloc(t?8:i.ptrSizeof):i.pstack.allocChunks(e,t?8:i.ptrSizeof)}),Object.defineProperties(i.pstack,{pointer:{configurable:!1,iterable:!0,writeable:!1,get:i.exports.sqlite3_wasm_pstack_ptr},quota:{configurable:!1,iterable:!0,writeable:!1,get:i.exports.sqlite3_wasm_pstack_quota},remaining:{configurable:!1,iterable:!0,writeable:!1,get:i.exports.sqlite3_wasm_pstack_remaining}}),s.sqlite3_randomness=(...e)=>{if(1===e.length&&y.isTypedArray(e[0])&&1===e[0].BYTES_PER_ELEMENT){const t=e[0];if(0===t.byteLength)return i.exports.sqlite3_randomness(0,0),t;const n=i.pstack.pointer;try{let e=t.byteLength,n=0;const r=i.exports.sqlite3_randomness,s=i.heap8u(),o=e<512?e:512,l=i.pstack.alloc(o);do{const i=e>o?o:e;r(i,l),t.set(f(s,l,l+i),n),e-=i,n+=i}while(e>0)}catch(e){console.error("Highly unexpected (and ignored!) exception in sqlite3_randomness():",e)}finally{i.pstack.restore(n)}return t}i.exports.sqlite3_randomness(...e)},s.sqlite3_wasmfs_opfs_dir=function(){if(void 0!==b)return b;const e=r.wasmfsOpfsDir;if(console.error("sqlite3_wasmfs_opfs_dir() can no longer work due to incompatible WASMFS changes. It will be removed."),!(e&&globalThis.FileSystemHandle&&globalThis.FileSystemDirectoryHandle&&globalThis.FileSystemFileHandle))return b="";try{return b=e&&0===i.xCallWrapped("sqlite3_wasm_init_wasmfs","i32",["string"],e)?e:""}catch(e){return b=""}},s.sqlite3_wasmfs_filename_is_persistent=function(e){const t=s.sqlite3_wasmfs_opfs_dir();return!(!t||!e)&&e.startsWith(t+"/")},s.sqlite3_js_db_uses_vfs=function(e,t,n=0){try{const r=s.sqlite3_vfs_find(t);return!!r&&(e?r===s.sqlite3_js_db_vfs(e,n)&&r:r===s.sqlite3_vfs_find(0)&&r)}catch(e){return!1}},s.sqlite3_js_vfs_list=function(){const e=[];let t=s.sqlite3_vfs_find(0);for(;t;){const n=new s.sqlite3_vfs(t);e.push(i.cstrToJs(n.$zName)),t=n.$pNext,n.dispose()}return e},s.sqlite3_js_db_export=function(e,t=0){(e=i.xWrap.testConvertArg("sqlite3*",e))||a("Invalid sqlite3* argument."),i.bigIntEnabled||a("BigInt64 support is not enabled.");const n=i.scopedAllocPush();let r;try{const n=i.scopedAlloc(8+i.ptrSizeof),s=n+8,o=t?i.isPtr(t)?t:i.scopedAllocCString(""+t):0;let l=i.exports.sqlite3_wasm_db_serialize(e,o,s,n,0);l&&a("Database serialization failed with code",w.capi.sqlite3_js_rc_str(l)),r=i.peekPtr(s);const c=i.peek(n,"i64");return l=c?i.heap8u().slice(r,r+Number(c)):new Uint8Array,l}finally{r&&i.exports.sqlite3_free(r),i.scopedAllocPop(n)}},s.sqlite3_js_db_vfs=(e,t=0)=>i.sqlite3_wasm_db_vfs(e,t),s.sqlite3_js_aggregate_context=(e,t)=>s.sqlite3_aggregate_context(e,t)||(t?q.toss("Cannot allocate",t,"bytes for sqlite3_aggregate_context()"):0),s.sqlite3_js_vfs_create_file=function(e,t,n,r){let o;n?(i.isPtr(n)?o=n:n instanceof ArrayBuffer&&(n=new Uint8Array(n)),n instanceof Uint8Array?(o=i.allocFromTypedArray(n),(arguments.length<4||!y.isInt32(r)||r<0)&&(r=n.byteLength)):l.toss("Invalid 3rd argument type for sqlite3_js_vfs_create_file().")):o=0,(!y.isInt32(r)||r<0)&&(i.dealloc(o),l.toss("Invalid 4th argument for sqlite3_js_vfs_create_file()."));try{const n=i.sqlite3_wasm_vfs_create_file(e,t,o,r);n&&l.toss("Creation of file failed with sqlite3 result code",s.sqlite3_js_rc_str(n))}finally{i.dealloc(o)}},y.isUIThread()){const e=function(e){const t=Object.create(null);return t.prefix="kvvfs-"+e,t.stores=[],"session"!==e&&""!==e||t.stores.push(globalThis.sessionStorage),"local"!==e&&""!==e||t.stores.push(globalThis.localStorage),t};s.sqlite3_js_kvvfs_clear=function(t=""){let n=0;const r=e(t);return r.stores.forEach((e=>{const t=[];let s;for(s=0;s<e.length;++s){const n=e.key(s);n.startsWith(r.prefix)&&t.push(n)}t.forEach((t=>e.removeItem(t))),n+=t.length})),n},s.sqlite3_js_kvvfs_size=function(t=""){let n=0;const r=e(t);return r.stores.forEach((e=>{let t;for(t=0;t<e.length;++t){const s=e.key(t);s.startsWith(r.prefix)&&(n+=s.length,n+=e.getItem(s).length)}})),2*n}}s.sqlite3_db_config=function(e,t,...n){this.s||(this.s=i.xWrap("sqlite3_wasm_db_config_s","int",["sqlite3*","int","string:static"]),this.pii=i.xWrap("sqlite3_wasm_db_config_pii","int",["sqlite3*","int","*","int","int"]),this.ip=i.xWrap("sqlite3_wasm_db_config_ip","int",["sqlite3*","int","int","*"]));const r=s;switch(t){case r.SQLITE_DBCONFIG_ENABLE_FKEY:case r.SQLITE_DBCONFIG_ENABLE_TRIGGER:case r.SQLITE_DBCONFIG_ENABLE_FTS3_TOKENIZER:case r.SQLITE_DBCONFIG_ENABLE_LOAD_EXTENSION:case r.SQLITE_DBCONFIG_NO_CKPT_ON_CLOSE:case r.SQLITE_DBCONFIG_ENABLE_QPSG:case r.SQLITE_DBCONFIG_TRIGGER_EQP:case r.SQLITE_DBCONFIG_RESET_DATABASE:case r.SQLITE_DBCONFIG_DEFENSIVE:case r.SQLITE_DBCONFIG_WRITABLE_SCHEMA:case r.SQLITE_DBCONFIG_LEGACY_ALTER_TABLE:case r.SQLITE_DBCONFIG_DQS_DML:case r.SQLITE_DBCONFIG_DQS_DDL:case r.SQLITE_DBCONFIG_ENABLE_VIEW:case r.SQLITE_DBCONFIG_LEGACY_FILE_FORMAT:case r.SQLITE_DBCONFIG_TRUSTED_SCHEMA:return this.ip(e,t,n[0],n[1]||0);case r.SQLITE_DBCONFIG_LOOKASIDE:return this.pii(e,t,n[0],n[1],n[2]);case r.SQLITE_DBCONFIG_MAINDBNAME:return this.s(e,t,n[0]);default:return r.SQLITE_MISUSE}}.bind(Object.create(null)),s.sqlite3_value_to_js=function(e,t=!0){let n;const r=s.sqlite3_value_type(e);switch(r){case s.SQLITE_INTEGER:i.bigIntEnabled?(n=s.sqlite3_value_int64(e),y.bigIntFitsDouble(n)&&(n=Number(n))):n=s.sqlite3_value_double(e);break;case s.SQLITE_FLOAT:n=s.sqlite3_value_double(e);break;case s.SQLITE_TEXT:n=s.sqlite3_value_text(e);break;case s.SQLITE_BLOB:{const t=s.sqlite3_value_bytes(e),r=s.sqlite3_value_blob(e);t&&!r&&w.WasmAllocError.toss("Cannot allocate memory for blob argument of",t,"byte(s)"),n=t?i.heap8u().slice(r,r+Number(t)):null;break}case s.SQLITE_NULL:n=null;break;default:t&&a(s.SQLITE_MISMATCH,"Unhandled sqlite3_value_type():",r),n=void 0}return n},s.sqlite3_values_to_js=function(e,t,n=!0){let r;const o=[];for(r=0;r<e;++r)o.push(s.sqlite3_value_to_js(i.peekPtr(t+i.ptrSizeof*r)));return o},s.sqlite3_result_error_js=function(e,t){t instanceof q?s.sqlite3_result_error_nomem(e):s.sqlite3_result_error(e,""+t,-1)},s.sqlite3_result_js=function(e,t){if(t instanceof Error)s.sqlite3_result_error_js(e,t);else try{switch(typeof t){case"undefined":break;case"boolean":s.sqlite3_result_int(e,t?1:0);break;case"bigint":y.bigIntFits32(t)?s.sqlite3_result_int(e,Number(t)):y.bigIntFitsDouble(t)?s.sqlite3_result_double(e,Number(t)):i.bigIntEnabled?y.bigIntFits64(t)?s.sqlite3_result_int64(e,t):a("BigInt value",t.toString(),"is too BigInt for int64."):a("BigInt value",t.toString(),"is too BigInt.");break;case"number":{let n;n=y.isInt32(t)?s.sqlite3_result_int:i.bigIntEnabled&&Number.isInteger(t)&&y.bigIntFits64(BigInt(t))?s.sqlite3_result_int64:s.sqlite3_result_double,n(e,t);break}case"string":{const[n,r]=i.allocCString(t,!0);s.sqlite3_result_text(e,n,r,s.SQLITE_WASM_DEALLOC);break}case"object":if(null===t){s.sqlite3_result_null(e);break}if(y.isBindableTypedArray(t)){const n=i.allocFromTypedArray(t);s.sqlite3_result_blob(e,n,t.byteLength,s.SQLITE_WASM_DEALLOC);break}default:a("Don't not how to handle this UDF result value:",typeof t,t)}}catch(t){s.sqlite3_result_error_js(e,t)}},s.sqlite3_column_js=function(e,t,n=!0){const r=s.sqlite3_column_value(e,t);return 0===r?void 0:s.sqlite3_value_to_js(r,n)};const v=function(e,t,n){n=s[n],this.ptr?i.pokePtr(this.ptr,0):this.ptr=i.allocPtr();const r=n(e,t,this.ptr);if(r)return l.toss(r,arguments[2]+"() failed with code "+r);const o=i.peekPtr(this.ptr);return o?s.sqlite3_value_to_js(o,!0):void 0}.bind(Object.create(null));s.sqlite3_preupdate_new_js=(e,t)=>v(e,t,"sqlite3_preupdate_new"),s.sqlite3_preupdate_old_js=(e,t)=>v(e,t,"sqlite3_preupdate_old"),s.sqlite3changeset_new_js=(e,t)=>v(e,t,"sqlite3changeset_new"),s.sqlite3changeset_old_js=(e,t)=>v(e,t,"sqlite3changeset_old");const w={WasmAllocError:q,SQLite3Error:l,capi:s,util:y,wasm:i,config:r,version:Object.create(null),client:void 0,asyncPostInit:async function(){let t=e.initializersAsync;if(delete e.initializersAsync,!t||!t.length)return Promise.resolve(w);t=t.map((e=>(e instanceof Promise?e:e(w)).catch((e=>{throw console.error("an async sqlite3 initializer failed:",e),e}))));const n=()=>(w.__isUnderTest||(delete w.util,delete w.StructBinder),w);{let e=t.shift();for(;t.length;)e=e.then(t.shift());return e.then(n)}},scriptInfo:void 0};try{e.initializers.forEach((e=>{e(w)}))}catch(e){throw console.error("sqlite3 bootstrap initializer threw:",e),e}return delete e.initializers,e.sqlite3=w,w},globalThis.sqlite3ApiBootstrap.initializers=[],globalThis.sqlite3ApiBootstrap.initializersAsync=[],globalThis.sqlite3ApiBootstrap.defaultConfig=Object.create(null),globalThis.sqlite3ApiBootstrap.sqlite3=void 0,globalThis.WhWasmUtilInstaller=function(e){void 0===e.bigIntEnabled&&(e.bigIntEnabled=!!self.BigInt64Array);const t=(...e)=>{throw new Error(e.join(" "))};e.exports||Object.defineProperty(e,"exports",{enumerable:!0,configurable:!0,get:()=>e.instance&&e.instance.exports});const n=e.pointerIR||"i32",r=e.ptrSizeof="i32"===n?4:"i64"===n?8:t("Unhandled ptrSizeof:",n),s=Object.create(null);s.heapSize=0,s.memory=null,s.freeFuncIndexes=[],s.scopedAlloc=[],s.utf8Decoder=new TextDecoder,s.utf8Encoder=new TextEncoder("utf-8"),e.sizeofIR=e=>{switch(e){case"i8":return 1;case"i16":return 2;case"i32":case"f32":case"float":return 4;case"i64":case"f64":case"double":return 8;case"*":return r;default:return(""+e).endsWith("*")?r:void 0}};const i=function(){if(s.memory){if(s.heapSize===s.memory.buffer.byteLength)return s}else s.memory=e.memory instanceof WebAssembly.Memory?e.memory:e.exports.memory;const t=s.memory.buffer;return s.HEAP8=new Int8Array(t),s.HEAP8U=new Uint8Array(t),s.HEAP16=new Int16Array(t),s.HEAP16U=new Uint16Array(t),s.HEAP32=new Int32Array(t),s.HEAP32U=new Uint32Array(t),e.bigIntEnabled&&(s.HEAP64=new BigInt64Array(t),s.HEAP64U=new BigUint64Array(t)),s.HEAP32F=new Float32Array(t),s.HEAP64F=new Float64Array(t),s.heapSize=t.byteLength,s};e.heap8=()=>i().HEAP8,e.heap8u=()=>i().HEAP8U,e.heap16=()=>i().HEAP16,e.heap16u=()=>i().HEAP16U,e.heap32=()=>i().HEAP32,e.heap32u=()=>i().HEAP32U,e.heapForSize=function(n,r=!0){const o=s.memory&&s.heapSize===s.memory.buffer.byteLength?s:i();switch(n){case Int8Array:return o.HEAP8;case Uint8Array:return o.HEAP8U;case Int16Array:return o.HEAP16;case Uint16Array:return o.HEAP16U;case Int32Array:return o.HEAP32;case Uint32Array:return o.HEAP32U;case 8:return r?o.HEAP8U:o.HEAP8;case 16:return r?o.HEAP16U:o.HEAP16;case 32:return r?o.HEAP32U:o.HEAP32;case 64:if(o.HEAP64)return r?o.HEAP64U:o.HEAP64;break;default:if(e.bigIntEnabled){if(n===self.BigUint64Array)return o.HEAP64U;if(n===self.BigInt64Array)return o.HEAP64;break}}t("Invalid heapForSize() size: expecting 8, 16, 32,","or (if BigInt is enabled) 64.")},e.functionTable=function(){return e.exports.__indirect_function_table},e.functionEntry=function(t){const n=e.functionTable();return t<n.length?n.get(t):void 0},e.jsFuncToWasm=function e(n,r){if(e._||(e._={sigTypes:Object.assign(Object.create(null),{i:"i32",p:"i32",P:"i32",s:"i32",j:"i64",f:"f32",d:"f64"}),typeCodes:Object.assign(Object.create(null),{f64:124,f32:125,i64:126,i32:127}),uleb128Encode:function(e,t,n){n<128?e[t](n):e[t](n%128|128,n>>7)},rxJSig:/^(\w)\((\w*)\)$/,sigParams:function(t){const n=e._.rxJSig.exec(t);return n?n[2]:t.substr(1)},letterType:n=>e._.sigTypes[n]||t("Invalid signature letter:",n),pushSigType:(t,n)=>t.push(e._.typeCodes[e._.letterType(n)])}),"string"==typeof n){const e=r;r=n,n=e}const s=e._.sigParams(r),i=[1,96];e._.uleb128Encode(i,"push",s.length);for(const t of s)e._.pushSigType(i,t);return"v"===r[0]?i.push(0):(i.push(1),e._.pushSigType(i,r[0])),e._.uleb128Encode(i,"unshift",i.length),i.unshift(0,97,115,109,1,0,0,0,1),i.push(2,7,1,1,101,1,102,0,0,7,5,1,1,102,0,0),new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array(i)),{e:{f:n}}).exports.f};const o=function(n,r,i){if(i&&!s.scopedAlloc.length&&t("No scopedAllocPush() scope is active."),"string"==typeof n){const e=r;r=n,n=e}"string"==typeof r&&n instanceof Function||t("Invalid arguments: expecting (function,signature) or (signature,function).");const o=e.functionTable(),l=o.length;let a;for(;s.freeFuncIndexes.length&&(a=s.freeFuncIndexes.pop(),o.get(a));)a=null;a||(a=l,o.grow(1));try{return o.set(a,n),i&&s.scopedAlloc[s.scopedAlloc.length-1].push(a),a}catch(e){if(!(e instanceof TypeError))throw a===l&&s.freeFuncIndexes.push(l),e}try{const t=e.jsFuncToWasm(n,r);o.set(a,t),i&&s.scopedAlloc[s.scopedAlloc.length-1].push(a)}catch(e){throw a===l&&s.freeFuncIndexes.push(l),e}return a};e.installFunction=(e,t)=>o(e,t,!1),e.scopedInstallFunction=(e,t)=>o(e,t,!0),e.uninstallFunction=function(t){if(!t&&0!==t)return;const n=s.freeFuncIndexes,r=e.functionTable();n.push(t);const i=r.get(t);return r.set(t,null),i},e.peek=function(r,o="i8"){o.endsWith("*")&&(o=n);const l=s.memory&&s.heapSize===s.memory.buffer.byteLength?s:i(),a=Array.isArray(r)?[]:void 0;let c;do{switch(a&&(r=arguments[0].shift()),o){case"i1":case"i8":c=l.HEAP8[r>>0];break;case"i16":c=l.HEAP16[r>>1];break;case"i32":c=l.HEAP32[r>>2];break;case"float":case"f32":c=l.HEAP32F[r>>2];break;case"double":case"f64":c=Number(l.HEAP64F[r>>3]);break;case"i64":if(e.bigIntEnabled){c=BigInt(l.HEAP64[r>>3]);break}default:t("Invalid type for peek():",o)}a&&a.push(c)}while(a&&arguments[0].length);return a||c},e.poke=function(e,r,o="i8"){o.endsWith("*")&&(o=n);const l=s.memory&&s.heapSize===s.memory.buffer.byteLength?s:i();for(const n of Array.isArray(e)?e:[e])switch(o){case"i1":case"i8":l.HEAP8[n>>0]=r;continue;case"i16":l.HEAP16[n>>1]=r;continue;case"i32":l.HEAP32[n>>2]=r;continue;case"float":case"f32":l.HEAP32F[n>>2]=r;continue;case"double":case"f64":l.HEAP64F[n>>3]=r;continue;case"i64":if(l.HEAP64){l.HEAP64[n>>3]=BigInt(r);continue}default:t("Invalid type for poke(): "+o)}return this},e.peekPtr=(...t)=>e.peek(1===t.length?t[0]:t,n),e.pokePtr=(t,r=0)=>e.poke(t,r,n),e.peek8=(...t)=>e.peek(1===t.length?t[0]:t,"i8"),e.poke8=(t,n)=>e.poke(t,n,"i8"),e.peek16=(...t)=>e.peek(1===t.length?t[0]:t,"i16"),e.poke16=(t,n)=>e.poke(t,n,"i16"),e.peek32=(...t)=>e.peek(1===t.length?t[0]:t,"i32"),e.poke32=(t,n)=>e.poke(t,n,"i32"),e.peek64=(...t)=>e.peek(1===t.length?t[0]:t,"i64"),e.poke64=(t,n)=>e.poke(t,n,"i64"),e.peek32f=(...t)=>e.peek(1===t.length?t[0]:t,"f32"),e.poke32f=(t,n)=>e.poke(t,n,"f32"),e.peek64f=(...t)=>e.peek(1===t.length?t[0]:t,"f64"),e.poke64f=(t,n)=>e.poke(t,n,"f64"),e.getMemValue=e.peek,e.getPtrValue=e.peekPtr,e.setMemValue=e.poke,e.setPtrValue=e.pokePtr,e.isPtr32=e=>"number"==typeof e&&e===(0|e)&&e>=0,e.isPtr=e.isPtr32,e.cstrlen=function(t){if(!t||!e.isPtr(t))return null;const n=i().HEAP8U;let r=t;for(;0!==n[r];++r);return r-t};const l="undefined"==typeof SharedArrayBuffer?function(){}:SharedArrayBuffer;e.cstrToJs=function(t){const n=e.cstrlen(t);return n?(r=i().HEAP8U,o=t,a=t+n,s.utf8Decoder.decode(r.buffer instanceof l?r.slice(o,a):r.subarray(o,a))):null===n?n:"";var r,o,a},e.jstrlen=function(e){if("string"!=typeof e)return null;const t=e.length;let n=0;for(let r=0;r<t;++r){let t=e.charCodeAt(r);t>=55296&&t<=57343&&(t=65536+((1023&t)<<10)|1023&e.charCodeAt(++r)),t<=127?++n:n+=t<=2047?2:t<=65535?3:4}return n},e.jstrcpy=function(e,n,r=0,s=-1,i=!0){if(n&&(n instanceof Int8Array||n instanceof Uint8Array)||t("jstrcpy() target must be an Int8Array or Uint8Array."),s<0&&(s=n.length-r),!(s>0&&r>=0))return 0;let o=0,l=e.length;const a=r,c=r+s-(i?1:0);for(;o<l&&r<c;++o){let t=e.charCodeAt(o);if(t>=55296&&t<=57343&&(t=65536+((1023&t)<<10)|1023&e.charCodeAt(++o)),t<=127){if(r>=c)break;n[r++]=t}else if(t<=2047){if(r+1>=c)break;n[r++]=192|t>>6,n[r++]=128|63&t}else if(t<=65535){if(r+2>=c)break;n[r++]=224|t>>12,n[r++]=128|t>>6&63,n[r++]=128|63&t}else{if(r+3>=c)break;n[r++]=240|t>>18,n[r++]=128|t>>12&63,n[r++]=128|t>>6&63,n[r++]=128|63&t}}return i&&(n[r++]=0),r-a},e.cstrncpy=function(n,r,s){if(n&&r||t("cstrncpy() does not accept NULL strings."),s<0)s=e.cstrlen(strPtr)+1;else if(!(s>0))return 0;const i=e.heap8u();let o,l=0;for(;l<s&&(o=i[r+l]);++l)i[n+l]=o;return l<s&&(i[n+l++]=0),l},e.jstrToUintArray=(e,t=!1)=>s.utf8Encoder.encode(t?e+"\0":e);const a=(e,n)=>{e.alloc instanceof Function&&e.dealloc instanceof Function||t("Object is missing alloc() and/or dealloc() function(s)","required by",n+"().")},c=function(t,n,r,o){if(a(e,o),"string"!=typeof t)return null;{const e=s.utf8Encoder.encode(t),o=r(e.length+1),l=i().HEAP8U;return l.set(e,o),l[o+e.length]=0,n?[o,e.length]:o}};e.allocCString=(t,n=!1)=>c(t,n,e.alloc,"allocCString()"),e.scopedAllocPush=function(){a(e,"scopedAllocPush");const t=[];return s.scopedAlloc.push(t),t},e.scopedAllocPop=function(n){a(e,"scopedAllocPop");const r=arguments.length?s.scopedAlloc.indexOf(n):s.scopedAlloc.length-1;r<0&&t("Invalid state object for scopedAllocPop()."),0===arguments.length&&(n=s.scopedAlloc[r]),s.scopedAlloc.splice(r,1);for(let t;t=n.pop();)e.functionEntry(t)?e.uninstallFunction(t):e.dealloc(t)},e.scopedAlloc=function(n){s.scopedAlloc.length||t("No scopedAllocPush() scope is active.");const r=e.alloc(n);return s.scopedAlloc[s.scopedAlloc.length-1].push(r),r},Object.defineProperty(e.scopedAlloc,"level",{configurable:!1,enumerable:!1,get:()=>s.scopedAlloc.length,set:()=>t("The 'active' property is read-only.")}),e.scopedAllocCString=(t,n=!1)=>c(t,n,e.scopedAlloc,"scopedAllocCString()");const u=function(t,n){const r=e[t?"scopedAlloc":"alloc"]((n.length+1)*e.ptrSizeof);let s=0;return n.forEach((n=>{e.pokePtr(r+e.ptrSizeof*s++,e[t?"scopedAllocCString":"allocCString"](""+n))})),e.pokePtr(r+e.ptrSizeof*s,0),r};e.scopedAllocMainArgv=e=>u(!0,e),e.allocMainArgv=e=>u(!1,e),e.cArgvToJs=(t,n)=>{const r=[];for(let s=0;s<t;++s){const t=e.peekPtr(n+e.ptrSizeof*s);r.push(t?e.cstrToJs(t):null)}return r},e.scopedAllocCall=function(t){e.scopedAllocPush();try{return t()}finally{e.scopedAllocPop()}};const _=function(t,s,i){a(e,i);const o=s?"i64":n;let l=e[i](t*(s?8:r));if(e.poke(l,0,o),1===t)return l;const c=[l];for(let n=1;n<t;++n)l+=s?8:r,c[n]=l,e.poke(l,0,o);return c};e.allocPtr=(e=1,t=!0)=>_(e,t,"alloc"),e.scopedAllocPtr=(e=1,t=!0)=>_(e,t,"scopedAlloc"),e.xGet=function(n){return e.exports[n]||t("Cannot find exported symbol:",n)};const f=(e,n)=>t(e+"() requires",n,"argument(s).");e.xCall=function(n,...r){const s=e.xGet(n);return s instanceof Function||t("Exported symbol",n,"is not a function."),s.length!==r.length&&f(n,s.length),2===arguments.length&&Array.isArray(arguments[1])?s.apply(null,arguments[1]):s.apply(null,r)},s.xWrap=Object.create(null),s.xWrap.convert=Object.create(null),s.xWrap.convert.arg=new Map,s.xWrap.convert.result=new Map;const p=s.xWrap.convert.arg,d=s.xWrap.convert.result;e.bigIntEnabled&&p.set("i64",(e=>BigInt(e)));const m="i32"===n?e=>0|e:e=>BigInt(e)|BigInt(0);p.set("i32",m).set("i16",(e=>65535&(0|e))).set("i8",(e=>255&(0|e))).set("f32",(e=>Number(e).valueOf())).set("float",p.get("f32")).set("f64",p.get("f32")).set("double",p.get("f64")).set("int",p.get("i32")).set("null",(e=>e)).set(null,p.get("null")).set("**",m).set("*",m),d.set("*",m).set("pointer",m).set("number",(e=>Number(e))).set("void",(e=>{})).set("null",(e=>e)).set(null,d.get("null"));{const r=["i8","i16","i32","int","f32","float","f64","double"];e.bigIntEnabled&&r.push("i64");const s=p.get(n);for(const e of r)p.set(e+"*",s),d.set(e+"*",s),d.set(e,p.get(e)||t("Missing arg converter:",e))}const h=function(t){return"string"==typeof t?e.scopedAllocCString(t):t?m(t):null};p.set("string",h).set("utf8",h).set("pointer",h),d.set("string",(t=>e.cstrToJs(t))).set("utf8",d.get("string")).set("string:dealloc",(t=>{try{return t?e.cstrToJs(t):null}finally{e.dealloc(t)}})).set("utf8:dealloc",d.get("string:dealloc")).set("json",(t=>JSON.parse(e.cstrToJs(t)))).set("json:dealloc",(t=>{try{return t?JSON.parse(e.cstrToJs(t)):null}finally{e.dealloc(t)}}));const g=class{constructor(e){this.name=e.name||"unnamed adapter"}convertArg(e,n,r){t("AbstractArgAdapter must be subclassed.")}};p.FuncPtrAdapter=class n extends g{constructor(e){super(e),p.FuncPtrAdapter.warnOnUse&&console.warn("xArg.FuncPtrAdapter is an internal-only API","and is not intended to be invoked from","client-level code. Invoked with:",e),this.signature=e.signature,e.contextKey instanceof Function&&(this.contextKey=e.contextKey,e.bindScope||(e.bindScope="context")),this.bindScope=e.bindScope||t("FuncPtrAdapter options requires a bindScope (explicit or implied)."),n.bindScopes.indexOf(e.bindScope)<0&&t("Invalid options.bindScope ("+e.bindMod+") for FuncPtrAdapter. Expecting one of: ("+n.bindScopes.join(", ")+")"),this.isTransient="transient"===this.bindScope,this.isContext="context"===this.bindScope,this.isPermanent="permanent"===this.bindScope,this.singleton="singleton"===this.bindScope?[]:void 0,this.callProxy=e.callProxy instanceof Function?e.callProxy:void 0}static warnOnUse=!1;static debugFuncInstall=!1;static debugOut=console.debug.bind(console);static bindScopes=["transient","context","singleton","permanent"];contextKey(e,t){return this}contextMap(e){const t=this.__cmap||(this.__cmap=new Map);let n=t.get(e);return void 0===n&&t.set(e,n=[]),n}convertArg(t,r,s){let i=this.singleton;if(!i&&this.isContext&&(i=this.contextMap(this.contextKey(r,s))),i&&i[0]===t)return i[1];if(t instanceof Function){this.callProxy&&(t=this.callProxy(t));const l=o(t,this.signature,this.isTransient);if(n.debugFuncInstall&&n.debugOut("FuncPtrAdapter installed",this,this.contextKey(r,s),"@"+l,t),i){if(i[1]){n.debugFuncInstall&&n.debugOut("FuncPtrAdapter uninstalling",this,this.contextKey(r,s),"@"+i[1],t);try{e.uninstallFunction(i[1])}catch(e){}}i[0]=t,i[1]=l}return l}if(e.isPtr(t)||null==t){if(i&&i[1]&&i[1]!==t){n.debugFuncInstall&&n.debugOut("FuncPtrAdapter uninstalling",this,this.contextKey(r,s),"@"+i[1],t);try{e.uninstallFunction(i[1])}catch(e){}i[0]=i[1]=0|t}return t||0}throw new TypeError("Invalid FuncPtrAdapter argument type. Expecting a function pointer or a "+(this.name?this.name+" ":"")+"function matching signature "+this.signature+".")}};const q=e=>p.get(e)||t("Argument adapter not found:",e),y=e=>d.get(e)||t("Result adapter not found:",e);s.xWrap.convertArg=(e,...t)=>q(e)(...t),s.xWrap.convertArgNoCheck=(e,...t)=>p.get(e)(...t),s.xWrap.convertResult=(e,t)=>null===e?t:e?y(e)(t):void 0,s.xWrap.convertResultNoCheck=(e,t)=>null===e?t:e?d.get(e)(t):void 0,e.xWrap=function(n,r,...i){3===arguments.length&&Array.isArray(arguments[2])&&(i=arguments[2]),e.isPtr(n)&&(n=e.functionEntry(n)||t("Function pointer not found in WASM function table."));const o=n instanceof Function,l=o?n:e.xGet(n);if(o&&(n=l.name||"unnamed function"),i.length!==l.length&&f(n,l.length),null===r&&0===l.length)return l;null!=r&&y(r);for(const e of i)e instanceof g?p.set(e,((...t)=>e.convertArg(...t))):q(e);const a=s.xWrap;return 0===l.length?(...e)=>e.length?f(n,l.length):a.convertResult(r,l.call(null)):function(...t){t.length!==l.length&&f(n,l.length);const s=e.scopedAllocPush();try{for(const e in t)t[e]=a.convertArgNoCheck(i[e],t[e],t,e);return a.convertResultNoCheck(r,l.apply(null,t))}finally{e.scopedAllocPop(s)}}};const b=function(e,n,r,s,i,o){if("string"==typeof r){if(1===n)return o.get(r);if(2===n)return s?(s instanceof Function||t(i,"requires a function argument."),o.set(r,s),e):(o.get(r),e)}t("Invalid arguments to",i)};return e.xWrap.resultAdapter=function e(t,n){return b(e,arguments.length,t,n,"resultAdapter()",d)},e.xWrap.argAdapter=function e(t,n){return b(e,arguments.length,t,n,"argAdapter()",p)},e.xWrap.FuncPtrAdapter=p.FuncPtrAdapter,e.xCallWrapped=function(t,n,r,...s){return Array.isArray(arguments[3])&&(s=arguments[3]),e.xWrap(t,n,r||[]).apply(null,s||[])},e.xWrap.testConvertArg=s.xWrap.convertArg,e.xWrap.testConvertResult=s.xWrap.convertResult,e},globalThis.WhWasmUtilInstaller.yawl=function(e){const t=()=>fetch(e.uri,{credentials:"same-origin"}),n=this,r=function(t){if(e.wasmUtilTarget){const r=(...e)=>{throw new Error(e.join(" "))},s=e.wasmUtilTarget;if(s.module=t.module,s.instance=t.instance,s.instance.exports.memory||(s.memory=e.imports&&e.imports.env&&e.imports.env.memory||r("Missing 'memory' object!")),!s.alloc&&t.instance.exports.malloc){const e=t.instance.exports;s.alloc=function(t){return e.malloc(t)||r("Allocation of",t,"bytes failed.")},s.dealloc=function(t){e.free(t)}}n(s)}return e.onload&&e.onload(t,e),t};return WebAssembly.instantiateStreaming?function(){return WebAssembly.instantiateStreaming(t(),e.imports||{}).then(r)}:function(){return t().then((e=>e.arrayBuffer())).then((t=>WebAssembly.instantiate(t,e.imports||{}))).then(r)}}.bind(globalThis.WhWasmUtilInstaller),globalThis.Jaccwabyt=function e(t){const n=(...e)=>{throw new Error(e.join(" "))};t.heap instanceof WebAssembly.Memory||t.heap instanceof Function||n("config.heap must be WebAssembly.Memory instance or a function."),["alloc","dealloc"].forEach((function(e){t[e]instanceof Function||n("Config option '"+e+"' must be a function.")}));const r=e,s=t.heap instanceof Function?t.heap:()=>new Uint8Array(t.heap.buffer),i=t.alloc,o=t.dealloc,l=t.log||console.log.bind(console),a=t.memberPrefix||"",c=t.memberSuffix||"",u=void 0===t.bigIntEnabled?!!self.BigInt64Array:!!t.bigIntEnabled,_=self.BigInt,f=self.BigInt64Array,p=t.ptrSizeof||4,d=t.ptrIR||"i32";r.debugFlags||(r.__makeDebugFlags=function(e=null){e&&e.__flags&&(e=e.__flags);const t=function e(t){return 0===arguments.length?e.__flags:(t<0?(delete e.__flags.getter,delete e.__flags.setter,delete e.__flags.alloc,delete e.__flags.dealloc):(e.__flags.getter=0!=(1&t),e.__flags.setter=0!=(2&t),e.__flags.alloc=0!=(4&t),e.__flags.dealloc=0!=(8&t)),e._flags)};return Object.defineProperty(t,"__flags",{iterable:!1,writable:!1,value:Object.create(e)}),e||t(0),t},r.debugFlags=r.__makeDebugFlags());const m=function(){const e=new ArrayBuffer(2);return new DataView(e).setInt16(0,256,!0),256===new Int16Array(e)[0]}(),h=e=>(e=>"("===e[1])(e)?"p":e[0],g=function(e){switch(h(e)){case"c":case"C":return"i8";case"i":return"i32";case"p":case"P":case"s":return d;case"j":return"i64";case"f":return"float";case"d":return"double"}n("Unhandled signature IR:",e)},q=f?()=>!0:()=>n("BigInt64Array is not available."),y=(e,t)=>e+"::"+t,b=new WeakMap,v="(pointer-is-external)",w=function(e,t,n){if(n||(n=b.get(t)),n){if(b.delete(t),Array.isArray(t.ondispose)){let r;for(;r=t.ondispose.shift();)try{r instanceof Function?r.call(t):r instanceof N?r.dispose():"number"==typeof r&&o(r)}catch(t){console.warn("ondispose() for",e.structName,"@",n,"threw. NOT propagating it.",t)}}else if(t.ondispose instanceof Function)try{t.ondispose()}catch(t){console.warn("ondispose() for",e.structName,"@",n,"threw. NOT propagating it.",t)}delete t.ondispose,e.debugFlags.__flags.dealloc&&l("debug.dealloc:",t[v]?"EXTERNAL":"",e.structName,"instance:",e.structInfo.sizeof,"bytes @"+n),t[v]||o(n)}},E=e=>({configurable:!1,writable:!1,iterable:!1,value:e}),x=function(e,t,r){let o=!r;r?Object.defineProperty(t,v,E(r)):(r=i(e.structInfo.sizeof))||n("Allocation of",e.structName,"structure failed.");try{e.debugFlags.__flags.alloc&&l("debug.alloc:",o?"":"EXTERNAL",e.structName,"instance:",e.structInfo.sizeof,"bytes @"+r),o&&s().fill(0,r,r+e.structInfo.sizeof),b.set(t,r)}catch(n){throw w(e,t,r),n}},S=E((e=>a+e+c)),A=function(e,t,r=!0){let s=e.members[t];if(!s&&(a||c)){for(const n of Object.values(e.members))if(n.key===t){s=n;break}!s&&r&&n(y(e.name,t),"is not a mapped struct member.")}return s},I=function e(t,n,r=!1){e._||(e._=e=>e.replace(/[^vipPsjrdcC]/g,"").replace(/[pPscC]/g,"i"));const s=A(t.structInfo,n,!0);return r?e._(s.signature):s.signature},k={configurable:!1,enumerable:!1,get:function(){return b.get(this)},set:()=>n("Cannot assign the 'pointer' property of a struct.")},T=E((function(){const e=[];for(const t of Object.keys(this.structInfo.members))e.push(this.memberKey(t));return e})),F=new TextDecoder("utf-8"),O=new TextEncoder,L="undefined"==typeof SharedArrayBuffer?function(){}:SharedArrayBuffer,P=function(e){"s"!==e.signature&&n("Invalid member type signature for C-string value:",JSON.stringify(e))},C=function(e,...t){e.ondispose?Array.isArray(e.ondispose)||(e.ondispose=[e.ondispose]):e.ondispose=[],e.ondispose.push(...t)},D=function(e){const t=O.encode(e),r=i(t.length+1);r||n("Allocation error while duplicating string:",e);const o=s();return o.set(t,r),o[r+t.length]=0,r},N=function(e,t){arguments[2]!==E&&n("Do not call the StructType constructor","from client-level code."),Object.defineProperties(this,{structName:E(e),structInfo:E(t)})};N.prototype=Object.create(null,{dispose:E((function(){w(this.constructor,this)})),lookupMember:E((function(e,t=!0){return A(this.structInfo,e,t)})),memberToJsString:E((function(e){return function(e,t){const n=A(e.structInfo,t,!0);P(n);const r=e[n.key];if(!r)return null;let i=r;const o=s();for(;0!==o[i];++i);return r===i?"":(l=o,a=r,c=i,F.decode(l.buffer instanceof L?l.slice(a,c):l.subarray(a,c)));var l,a,c}(this,e)})),memberIsString:E((function(e,t=!0){return function(e,t,n=!1){const r=A(e.structInfo,t,n);return!(!r||1!==r.signature.length||"s"!==r.signature[0])&&r}(this,e,t)})),memberKey:S,memberKeys:T,memberSignature:E((function(e,t=!1){return I(this,e,t)})),memoryDump:E((function(){const e=this.pointer;return e?new Uint8Array(s().slice(e,e+this.structInfo.sizeof)):null})),pointer:k,setMemberCString:E((function(e,t){return function(e,t,n){const r=A(e.structInfo,t,!0);P(r);const s=D(n);return e[r.key]=s,C(e,s),e}(this,e,t)}))}),Object.assign(N.prototype,{addOnDispose:function(...e){return C(this,...e),this}}),Object.defineProperties(N,{allocCString:E(D),isA:E((e=>e instanceof N)),hasExternalPointer:E((e=>e instanceof N&&!!e[v])),memberKey:S});const R=e=>Number.isFinite(e)||e instanceof(_||Number),M=function e(t,r,i){if(!e._){e._={getters:{},setters:{},sw:{}};const t=["i","c","C","p","P","s","f","d","v()"];u&&t.push("j"),t.forEach((function(t){e._.getters[t]=function(e){switch(h(e)){case"p":case"P":case"s":switch(p){case 4:return"getInt32";case 8:return q()&&"getBigInt64"}break;case"i":return"getInt32";case"c":return"getInt8";case"C":return"getUint8";case"j":return q()&&"getBigInt64";case"f":return"getFloat32";case"d":return"getFloat64"}n("Unhandled DataView getter for signature:",e)}(t),e._.setters[t]=function(e){switch(h(e)){case"p":case"P":case"s":switch(p){case 4:return"setInt32";case 8:return q()&&"setBigInt64"}break;case"i":return"setInt32";case"c":return"setInt8";case"C":return"setUint8";case"j":return q()&&"setBigInt64";case"f":return"setFloat32";case"d":return"setFloat64"}n("Unhandled DataView setter for signature:",e)}(t),e._.sw[t]=function(e){switch(h(e)){case"i":case"f":case"c":case"C":case"d":return Number;case"j":return q()&&_;case"p":case"P":case"s":switch(p){case 4:return Number;case 8:return q()&&_}}n("Unhandled DataView set wrapper for signature:",e)}(t)}));const r=/^[ipPsjfdcC]$/,s=/^[vipPsjfdcC]\([ipPsjfdcC]*\)$/;e.sigCheck=function(e,t,i,o){Object.prototype.hasOwnProperty.call(e,i)&&n(e.structName,"already has a property named",i+"."),r.test(o)||s.test(o)||n("Malformed signature for",y(e.structName,t)+":",o)}}const o=t.memberKey(r);e.sigCheck(t.prototype,r,o,i.signature),i.key=o,i.name=r;const a=h(i.signature),c=y(t.prototype.structName,o),f=t.prototype.debugFlags.__flags,d=Object.create(null);var b,v;d.configurable=!1,d.enumerable=!1,d.get=function(){f.getter&&l("debug.getter:",e._.getters[a],"for",g(a),c,"@",this.pointer,"+",i.offset,"sz",i.sizeof);let t=new DataView(s().buffer,this.pointer+i.offset,i.sizeof)[e._.getters[a]](0,m);return f.getter&&l("debug.getter:",c,"result =",t),t},i.readOnly?d.set=(b=t.prototype.structName,v=o,()=>n(y(b,v),"is read-only.")):d.set=function(t){if(f.setter&&l("debug.setter:",e._.setters[a],"for",g(a),c,"@",this.pointer,"+",i.offset,"sz",i.sizeof,t),this.pointer||n("Cannot set struct property on disposed instance."),null===t)t=0;else for(;!R(t);){if("P"===i.signature&&t instanceof N){t=t.pointer||0,f.setter&&l("debug.setter:",c,"resolved to",t);break}n("Invalid value for pointer-type",c+".")}new DataView(s().buffer,this.pointer+i.offset,i.sizeof)[e._.setters[a]](0,e._.sw[a](t),m)},Object.defineProperty(t.prototype,o,d)},j=function e(t,s){1===arguments.length?t=(s=t).name:s.name||(s.name=t),t||n("Struct name is required.");let i=!1;Object.keys(s.members).forEach((e=>{const r=s.members[e];r.sizeof?1===r.sizeof?"c"===r.signature||"C"===r.signature||n("Unexpected sizeof==1 member",y(s.name,e),"with signature",r.signature):(0!=r.sizeof%4&&(console.warn("Invalid struct member description =",r,"from",s),n(t,"member",e,"sizeof is not aligned. sizeof="+r.sizeof)),0!=r.offset%4&&(console.warn("Invalid struct member description =",r,"from",s),n(t,"member",e,"offset is not aligned. offset="+r.offset))):n(t,"member",e,"is missing sizeof."),(!i||i.offset<r.offset)&&(i=r)})),i?s.sizeof<i.offset+i.sizeof&&n("Invalid struct config:",t,"max member offset ("+i.offset+") ","extends past end of struct (sizeof="+s.sizeof+")."):n("No member property descriptions found.");const o=E(r.__makeDebugFlags(e.debugFlags)),l=function e(r){this instanceof e?arguments.length?((r!==(0|r)||r<=0)&&n("Invalid pointer value for",t,"constructor."),x(e,this,r)):x(e,this):n("The",t,"constructor may only be called via 'new'.")};return Object.defineProperties(l,{debugFlags:o,isA:E((e=>e instanceof l)),memberKey:S,memberKeys:T,methodInfoForKey:E((function(e){})),structInfo:E(s),structName:E(t)}),l.prototype=new N(t,s,E),Object.defineProperties(l.prototype,{debugFlags:o,constructor:E(l)}),Object.keys(s.members).forEach((e=>M(l,e,s.members[e]))),l};return j.StructType=N,j.config=t,j.allocCString=D,j.debugFlags||(j.debugFlags=r.__makeDebugFlags(r.debugFlags)),j},globalThis.sqlite3ApiBootstrap.initializers.push((function(e){const t=(...e)=>{throw new Error(e.join(" "))},n=(e.SQLite3Error.toss,e.capi),r=e.wasm,s=e.util;if(globalThis.WhWasmUtilInstaller(r),delete globalThis.WhWasmUtilInstaller,r.bindingSignatures=[["sqlite3_aggregate_context","void*","sqlite3_context*","int"],["sqlite3_bind_double","int","sqlite3_stmt*","int","f64"],["sqlite3_bind_int","int","sqlite3_stmt*","int","int"],["sqlite3_bind_null",void 0,"sqlite3_stmt*","int"],["sqlite3_bind_parameter_count","int","sqlite3_stmt*"],["sqlite3_bind_parameter_index","int","sqlite3_stmt*","string"],["sqlite3_bind_pointer","int","sqlite3_stmt*","int","*","string:static","*"],["sqlite3_busy_handler","int",["sqlite3*",new r.xWrap.FuncPtrAdapter({signature:"i(pi)",contextKey:(e,t)=>e[0]}),"*"]],["sqlite3_busy_timeout","int","sqlite3*","int"],["sqlite3_changes","int","sqlite3*"],["sqlite3_clear_bindings","int","sqlite3_stmt*"],["sqlite3_collation_needed","int","sqlite3*","*","*"],["sqlite3_column_blob","*","sqlite3_stmt*","int"],["sqlite3_column_bytes","int","sqlite3_stmt*","int"],["sqlite3_column_count","int","sqlite3_stmt*"],["sqlite3_column_double","f64","sqlite3_stmt*","int"],["sqlite3_column_int","int","sqlite3_stmt*","int"],["sqlite3_column_name","string","sqlite3_stmt*","int"],["sqlite3_column_text","string","sqlite3_stmt*","int"],["sqlite3_column_type","int","sqlite3_stmt*","int"],["sqlite3_column_value","sqlite3_value*","sqlite3_stmt*","int"],["sqlite3_commit_hook","void*",["sqlite3*",new r.xWrap.FuncPtrAdapter({name:"sqlite3_commit_hook",signature:"i(p)",contextKey:e=>e[0]}),"*"]],["sqlite3_compileoption_get","string","int"],["sqlite3_compileoption_used","int","string"],["sqlite3_complete","int","string:flexible"],["sqlite3_context_db_handle","sqlite3*","sqlite3_context*"],["sqlite3_data_count","int","sqlite3_stmt*"],["sqlite3_db_filename","string","sqlite3*","string"],["sqlite3_db_handle","sqlite3*","sqlite3_stmt*"],["sqlite3_db_name","string","sqlite3*","int"],["sqlite3_db_status","int","sqlite3*","int","*","*","int"],["sqlite3_errcode","int","sqlite3*"],["sqlite3_errmsg","string","sqlite3*"],["sqlite3_error_offset","int","sqlite3*"],["sqlite3_errstr","string","int"],["sqlite3_exec","int",["sqlite3*","string:flexible",new r.xWrap.FuncPtrAdapter({signature:"i(pipp)",bindScope:"transient",callProxy:e=>{let t;return(s,i,o,l)=>{try{const n=r.cArgvToJs(i,o);return t||(t=r.cArgvToJs(i,l)),0|e(n,t)}catch(e){return e.resultCode||n.SQLITE_ERROR}}}}),"*","**"]],["sqlite3_expanded_sql","string","sqlite3_stmt*"],["sqlite3_extended_errcode","int","sqlite3*"],["sqlite3_extended_result_codes","int","sqlite3*","int"],["sqlite3_file_control","int","sqlite3*","string","int","*"],["sqlite3_finalize","int","sqlite3_stmt*"],["sqlite3_free",void 0,"*"],["sqlite3_get_auxdata","*","sqlite3_context*","int"],["sqlite3_initialize",void 0],["sqlite3_keyword_count","int"],["sqlite3_keyword_name","int",["int","**","*"]],["sqlite3_keyword_check","int",["string","int"]],["sqlite3_libversion","string"],["sqlite3_libversion_number","int"],["sqlite3_limit","int",["sqlite3*","int","int"]],["sqlite3_malloc","*","int"],["sqlite3_open","int","string","*"],["sqlite3_open_v2","int","string","*","int","string"],["sqlite3_progress_handler",void 0,["sqlite3*","int",new r.xWrap.FuncPtrAdapter({name:"xProgressHandler",signature:"i(p)",bindScope:"context",contextKey:(e,t)=>e[0]}),"*"]],["sqlite3_realloc","*","*","int"],["sqlite3_reset","int","sqlite3_stmt*"],["sqlite3_result_blob",void 0,"sqlite3_context*","*","int","*"],["sqlite3_result_double",void 0,"sqlite3_context*","f64"],["sqlite3_result_error",void 0,"sqlite3_context*","string","int"],["sqlite3_result_error_code",void 0,"sqlite3_context*","int"],["sqlite3_result_error_nomem",void 0,"sqlite3_context*"],["sqlite3_result_error_toobig",void 0,"sqlite3_context*"],["sqlite3_result_int",void 0,"sqlite3_context*","int"],["sqlite3_result_null",void 0,"sqlite3_context*"],["sqlite3_result_pointer",void 0,"sqlite3_context*","*","string:static","*"],["sqlite3_result_subtype",void 0,"sqlite3_value*","int"],["sqlite3_result_text",void 0,"sqlite3_context*","string","int","*"],["sqlite3_result_zeroblob",void 0,"sqlite3_context*","int"],["sqlite3_rollback_hook","void*",["sqlite3*",new r.xWrap.FuncPtrAdapter({name:"sqlite3_rollback_hook",signature:"v(p)",contextKey:e=>e[0]}),"*"]],["sqlite3_set_authorizer","int",["sqlite3*",new r.xWrap.FuncPtrAdapter({name:"sqlite3_set_authorizer::xAuth",signature:"i(pissss)",contextKey:(e,t)=>e[0],callProxy:e=>(t,s,i,o,l,a)=>{try{return i=i&&r.cstrToJs(i),o=o&&r.cstrToJs(o),l=l&&r.cstrToJs(l),a=a&&r.cstrToJs(a),e(t,s,i,o,l,a)||0}catch(e){return e.resultCode||n.SQLITE_ERROR}}}),"*"]],["sqlite3_set_auxdata",void 0,["sqlite3_context*","int","*",new r.xWrap.FuncPtrAdapter({name:"xDestroyAuxData",signature:"v(*)",contextKey:(e,t)=>e[0]})]],["sqlite3_shutdown",void 0],["sqlite3_sourceid","string"],["sqlite3_sql","string","sqlite3_stmt*"],["sqlite3_status","int","int","*","*","int"],["sqlite3_step","int","sqlite3_stmt*"],["sqlite3_stmt_isexplain","int",["sqlite3_stmt*"]],["sqlite3_stmt_readonly","int",["sqlite3_stmt*"]],["sqlite3_stmt_status","int","sqlite3_stmt*","int","int"],["sqlite3_strglob","int","string","string"],["sqlite3_stricmp","int","string","string"],["sqlite3_strlike","int","string","string","int"],["sqlite3_strnicmp","int","string","string","int"],["sqlite3_table_column_metadata","int","sqlite3*","string","string","string","**","**","*","*","*"],["sqlite3_total_changes","int","sqlite3*"],["sqlite3_trace_v2","int",["sqlite3*","int",new r.xWrap.FuncPtrAdapter({name:"sqlite3_trace_v2::callback",signature:"i(ippp)",contextKey:(e,t)=>e[0]}),"*"]],["sqlite3_txn_state","int",["sqlite3*","string"]],["sqlite3_uri_boolean","int","sqlite3_filename","string","int"],["sqlite3_uri_key","string","sqlite3_filename","int"],["sqlite3_uri_parameter","string","sqlite3_filename","string"],["sqlite3_user_data","void*","sqlite3_context*"],["sqlite3_value_blob","*","sqlite3_value*"],["sqlite3_value_bytes","int","sqlite3_value*"],["sqlite3_value_double","f64","sqlite3_value*"],["sqlite3_value_dup","sqlite3_value*","sqlite3_value*"],["sqlite3_value_free",void 0,"sqlite3_value*"],["sqlite3_value_frombind","int","sqlite3_value*"],["sqlite3_value_int","int","sqlite3_value*"],["sqlite3_value_nochange","int","sqlite3_value*"],["sqlite3_value_numeric_type","int","sqlite3_value*"],["sqlite3_value_pointer","*","sqlite3_value*","string:static"],["sqlite3_value_subtype","int","sqlite3_value*"],["sqlite3_value_text","string","sqlite3_value*"],["sqlite3_value_type","int","sqlite3_value*"],["sqlite3_vfs_find","*","string"],["sqlite3_vfs_register","int","sqlite3_vfs*","int"],["sqlite3_vfs_unregister","int","sqlite3_vfs*"]],r.exports.sqlite3_activate_see instanceof Function&&r.bindingSignatures.push(["sqlite3_key","int","sqlite3*","string","int"],["sqlite3_key_v2","int","sqlite3*","string","*","int"],["sqlite3_rekey","int","sqlite3*","string","int"],["sqlite3_rekey_v2","int","sqlite3*","string","*","int"],["sqlite3_activate_see",void 0,"string"]),r.bindingSignatures.int64=[["sqlite3_bind_int64","int",["sqlite3_stmt*","int","i64"]],["sqlite3_changes64","i64",["sqlite3*"]],["sqlite3_column_int64","i64",["sqlite3_stmt*","int"]],["sqlite3_create_module","int",["sqlite3*","string","sqlite3_module*","*"]],["sqlite3_create_module_v2","int",["sqlite3*","string","sqlite3_module*","*","*"]],["sqlite3_declare_vtab","int",["sqlite3*","string:flexible"]],["sqlite3_deserialize","int","sqlite3*","string","*","i64","i64","int"],["sqlite3_drop_modules","int",["sqlite3*","**"]],["sqlite3_last_insert_rowid","i64",["sqlite3*"]],["sqlite3_malloc64","*","i64"],["sqlite3_msize","i64","*"],["sqlite3_overload_function","int",["sqlite3*","string","int"]],["sqlite3_preupdate_blobwrite","int","sqlite3*"],["sqlite3_preupdate_count","int","sqlite3*"],["sqlite3_preupdate_depth","int","sqlite3*"],["sqlite3_preupdate_hook","*",["sqlite3*",new r.xWrap.FuncPtrAdapter({name:"sqlite3_preupdate_hook",signature:"v(ppippjj)",contextKey:e=>e[0],callProxy:e=>(t,n,s,i,o,l,a)=>{e(t,n,s,r.cstrToJs(i),r.cstrToJs(o),l,a)}}),"*"]],["sqlite3_preupdate_new","int",["sqlite3*","int","**"]],["sqlite3_preupdate_old","int",["sqlite3*","int","**"]],["sqlite3_realloc64","*","*","i64"],["sqlite3_result_int64",void 0,"*","i64"],["sqlite3_result_zeroblob64","int","*","i64"],["sqlite3_serialize","*","sqlite3*","string","*","int"],["sqlite3_set_last_insert_rowid",void 0,["sqlite3*","i64"]],["sqlite3_status64","int","int","*","*","int"],["sqlite3_total_changes64","i64",["sqlite3*"]],["sqlite3_update_hook","*",["sqlite3*",new r.xWrap.FuncPtrAdapter({name:"sqlite3_update_hook",signature:"v(iippj)",contextKey:e=>e[0],callProxy:e=>(t,n,s,i,o)=>{e(t,n,r.cstrToJs(s),r.cstrToJs(i),o)}}),"*"]],["sqlite3_uri_int64","i64",["sqlite3_filename","string","i64"]],["sqlite3_value_int64","i64","sqlite3_value*"],["sqlite3_vtab_collation","string","sqlite3_index_info*","int"],["sqlite3_vtab_distinct","int","sqlite3_index_info*"],["sqlite3_vtab_in","int","sqlite3_index_info*","int","int"],["sqlite3_vtab_in_first","int","sqlite3_value*","**"],["sqlite3_vtab_in_next","int","sqlite3_value*","**"],["sqlite3_vtab_nochange","int","sqlite3_context*"],["sqlite3_vtab_on_conflict","int","sqlite3*"],["sqlite3_vtab_rhs_value","int","sqlite3_index_info*","int","**"]],r.bigIntEnabled&&r.exports.sqlite3changegroup_add){const e={signature:"i(ps)",callProxy:e=>(t,s)=>{try{return 0|e(t,r.cstrToJs(s))}catch(e){return e.resultCode||n.SQLITE_ERROR}}};r.bindingSignatures.int64.push(["sqlite3changegroup_add","int",["sqlite3_changegroup*","int","void*"]],["sqlite3changegroup_add_strm","int",["sqlite3_changegroup*",new r.xWrap.FuncPtrAdapter({name:"xInput",signature:"i(ppp)",bindScope:"transient"}),"void*"]],["sqlite3changegroup_delete",void 0,["sqlite3_changegroup*"]],["sqlite3changegroup_new","int",["**"]],["sqlite3changegroup_output","int",["sqlite3_changegroup*","int*","**"]],["sqlite3changegroup_output_strm","int",["sqlite3_changegroup*",new r.xWrap.FuncPtrAdapter({name:"xOutput",signature:"i(ppi)",bindScope:"transient"}),"void*"]],["sqlite3changeset_apply","int",["sqlite3*","int","void*",new r.xWrap.FuncPtrAdapter({name:"xFilter",bindScope:"transient",...e}),new r.xWrap.FuncPtrAdapter({name:"xConflict",signature:"i(pip)",bindScope:"transient"}),"void*"]],["sqlite3changeset_apply_strm","int",["sqlite3*",new r.xWrap.FuncPtrAdapter({name:"xInput",signature:"i(ppp)",bindScope:"transient"}),"void*",new r.xWrap.FuncPtrAdapter({name:"xFilter",bindScope:"transient",...e}),new r.xWrap.FuncPtrAdapter({name:"xConflict",signature:"i(pip)",bindScope:"transient"}),"void*"]],["sqlite3changeset_apply_v2","int",["sqlite3*","int","void*",new r.xWrap.FuncPtrAdapter({name:"xFilter",bindScope:"transient",...e}),new r.xWrap.FuncPtrAdapter({name:"xConflict",signature:"i(pip)",bindScope:"transient"}),"void*","**","int*","int"]],["sqlite3changeset_apply_v2_strm","int",["sqlite3*",new r.xWrap.FuncPtrAdapter({name:"xInput",signature:"i(ppp)",bindScope:"transient"}),"void*",new r.xWrap.FuncPtrAdapter({name:"xFilter",bindScope:"transient",...e}),new r.xWrap.FuncPtrAdapter({name:"xConflict",signature:"i(pip)",bindScope:"transient"}),"void*","**","int*","int"]],["sqlite3changeset_concat","int",["int","void*","int","void*","int*","**"]],["sqlite3changeset_concat_strm","int",[new r.xWrap.FuncPtrAdapter({name:"xInputA",signature:"i(ppp)",bindScope:"transient"}),"void*",new r.xWrap.FuncPtrAdapter({name:"xInputB",signature:"i(ppp)",bindScope:"transient"}),"void*",new r.xWrap.FuncPtrAdapter({name:"xOutput",signature:"i(ppi)",bindScope:"transient"}),"void*"]],["sqlite3changeset_conflict","int",["sqlite3_changeset_iter*","int","**"]],["sqlite3changeset_finalize","int",["sqlite3_changeset_iter*"]],["sqlite3changeset_fk_conflicts","int",["sqlite3_changeset_iter*","int*"]],["sqlite3changeset_invert","int",["int","void*","int*","**"]],["sqlite3changeset_invert_strm","int",[new r.xWrap.FuncPtrAdapter({name:"xInput",signature:"i(ppp)",bindScope:"transient"}),"void*",new r.xWrap.FuncPtrAdapter({name:"xOutput",signature:"i(ppi)",bindScope:"transient"}),"void*"]],["sqlite3changeset_new","int",["sqlite3_changeset_iter*","int","**"]],["sqlite3changeset_next","int",["sqlite3_changeset_iter*"]],["sqlite3changeset_old","int",["sqlite3_changeset_iter*","int","**"]],["sqlite3changeset_op","int",["sqlite3_changeset_iter*","**","int*","int*","int*"]],["sqlite3changeset_pk","int",["sqlite3_changeset_iter*","**","int*"]],["sqlite3changeset_start","int",["**","int","*"]],["sqlite3changeset_start_strm","int",["**",new r.xWrap.FuncPtrAdapter({name:"xInput",signature:"i(ppp)",bindScope:"transient"}),"void*"]],["sqlite3changeset_start_v2","int",["**","int","*","int"]],["sqlite3changeset_start_v2_strm","int",["**",new r.xWrap.FuncPtrAdapter({name:"xInput",signature:"i(ppp)",bindScope:"transient"}),"void*","int"]],["sqlite3session_attach","int",["sqlite3_session*","string"]],["sqlite3session_changeset","int",["sqlite3_session*","int*","**"]],["sqlite3session_changeset_size","i64",["sqlite3_session*"]],["sqlite3session_changeset_strm","int",["sqlite3_session*",new r.xWrap.FuncPtrAdapter({name:"xOutput",signature:"i(ppp)",bindScope:"transient"}),"void*"]],["sqlite3session_config","int",["int","void*"]],["sqlite3session_create","int",["sqlite3*","string","**"]],["sqlite3session_diff","int",["sqlite3_session*","string","string","**"]],["sqlite3session_enable","int",["sqlite3_session*","int"]],["sqlite3session_indirect","int",["sqlite3_session*","int"]],["sqlite3session_isempty","int",["sqlite3_session*"]],["sqlite3session_memory_used","i64",["sqlite3_session*"]],["sqlite3session_object_config","int",["sqlite3_session*","int","void*"]],["sqlite3session_patchset","int",["sqlite3_session*","*","**"]],["sqlite3session_patchset_strm","int",["sqlite3_session*",new r.xWrap.FuncPtrAdapter({name:"xOutput",signature:"i(ppp)",bindScope:"transient"}),"void*"]],["sqlite3session_table_filter",void 0,["sqlite3_session*",new r.xWrap.FuncPtrAdapter({name:"xFilter",...e,contextKey:(e,t)=>e[0]}),"*"]])}r.bindingSignatures.wasm=[["sqlite3_wasm_db_reset","int","sqlite3*"],["sqlite3_wasm_db_vfs","sqlite3_vfs*","sqlite3*","string"],["sqlite3_wasm_vfs_create_file","int","sqlite3_vfs*","string","*","int"],["sqlite3_wasm_vfs_unlink","int","sqlite3_vfs*","string"]],e.StructBinder=globalThis.Jaccwabyt({heap:r.heap8u,alloc:r.alloc,dealloc:r.dealloc,bigIntEnabled:r.bigIntEnabled,memberPrefix:"$"}),delete globalThis.Jaccwabyt;{const i=r.xWrap.argAdapter("string");r.xWrap.argAdapter("string:flexible",(e=>i(s.flexibleString(e)))),r.xWrap.argAdapter("string:static",function(e){return r.isPtr(e)?e:this[e=""+e]||(this[e]=r.allocCString(e))}.bind(Object.create(null)));const o=r.xWrap.argAdapter("*"),l=function(){};r.xWrap.argAdapter("sqlite3_filename",o)("sqlite3_context*",o)("sqlite3_value*",o)("void*",o)("sqlite3_changegroup*",o)("sqlite3_changeset_iter*",o)("sqlite3_session*",o)("sqlite3_stmt*",(t=>o(t instanceof(e?.oo1?.Stmt||l)?t.pointer:t)))("sqlite3*",(t=>o(t instanceof(e?.oo1?.DB||l)?t.pointer:t)))("sqlite3_index_info*",(e=>o(e instanceof(n.sqlite3_index_info||l)?e.pointer:e)))("sqlite3_module*",(e=>o(e instanceof(n.sqlite3_module||l)?e.pointer:e)))("sqlite3_vfs*",(t=>"string"==typeof t?n.sqlite3_vfs_find(t)||e.SQLite3Error.toss(n.SQLITE_NOTFOUND,"Unknown sqlite3_vfs name:",t):o(t instanceof(n.sqlite3_vfs||l)?t.pointer:t)));const a=r.xWrap.resultAdapter("*");r.xWrap.resultAdapter("sqlite3*",a)("sqlite3_context*",a)("sqlite3_stmt*",a)("sqlite3_value*",a)("sqlite3_vfs*",a)("void*",a);for(const e of r.bindingSignatures)n[e[0]]=r.xWrap.apply(null,e);for(const e of r.bindingSignatures.wasm)r[e[0]]=r.xWrap.apply(null,e);const c=function(e){return()=>t(e+"() is unavailable due to lack","of BigInt support in this build.")};for(const e of r.bindingSignatures.int64)n[e[0]]=r.bigIntEnabled?r.xWrap.apply(null,e):c(e[0]);if(delete r.bindingSignatures,r.exports.sqlite3_wasm_db_error){const t=r.xWrap("sqlite3_wasm_db_error","int","sqlite3*","int","string");s.sqlite3_wasm_db_error=function(r,s,i){return s instanceof e.WasmAllocError?(s=n.SQLITE_NOMEM,i=0):s instanceof Error&&(i=i||""+s,s=s.resultCode||n.SQLITE_ERROR),r?t(r,s,i):s}}else s.sqlite3_wasm_db_error=function(e,t,n){return console.warn("sqlite3_wasm_db_error() is not exported.",arguments),t}}{const i=r.xCall("sqlite3_wasm_enum_json");i||t("Maintenance required: increase sqlite3_wasm_enum_json()'s","static buffer size!"),r.ctype=JSON.parse(r.cstrToJs(i));const o=["access","authorizer","blobFinalizers","changeset","config","dataTypes","dbConfig","dbStatus","encodings","fcntl","flock","ioCap","limits","openFlags","prepareFlags","resultCodes","sqlite3Status","stmtStatus","syncFlags","trace","txnState","udfFlags","version"];r.bigIntEnabled&&o.push("serialize","session","vtab");for(const e of o)for(const t of Object.entries(r.ctype[e]))n[t[0]]=t[1];r.functionEntry(n.SQLITE_WASM_DEALLOC)||t("Internal error: cannot resolve exported function","entry SQLITE_WASM_DEALLOC (=="+n.SQLITE_WASM_DEALLOC+").");const l=Object.create(null);for(const e of["resultCodes"])for(const t of Object.entries(r.ctype[e]))l[t[1]]=t[0];n.sqlite3_js_rc_str=e=>l[e];const a=Object.assign(Object.create(null),{WasmTestStruct:!0,sqlite3_kvvfs_methods:!s.isUIThread(),sqlite3_index_info:!r.bigIntEnabled,sqlite3_index_constraint:!r.bigIntEnabled,sqlite3_index_orderby:!r.bigIntEnabled,sqlite3_index_constraint_usage:!r.bigIntEnabled});for(const t of r.ctype.structs)a[t.name]||(n[t.name]=e.StructBinder(t));if(n.sqlite3_index_info){for(const e of["sqlite3_index_constraint","sqlite3_index_orderby","sqlite3_index_constraint_usage"])n.sqlite3_index_info[e]=n[e],delete n[e];n.sqlite3_vtab_config=r.xWrap("sqlite3_wasm_vtab_config","int",["sqlite3*","int","int"])}}const i=(t,r,s)=>e.util.sqlite3_wasm_db_error(t,n.SQLITE_MISUSE,r+"() requires "+s+" argument"+(1===s?"":"s")+"."),o=e=>s.sqlite3_wasm_db_error(e,n.SQLITE_FORMAT,"SQLITE_UTF8 is the only supported encoding."),l=e=>r.xWrap.argAdapter("sqlite3*")(e),a=e=>r.isPtr(e)?r.cstrToJs(e):e,c=function(e,t){e=l(e);let n=this.dbMap.get(e);return t?(!n&&t>0&&this.dbMap.set(e,n=Object.create(null)),n):(this.dbMap.delete(e),n)}.bind(Object.assign(Object.create(null),{dbMap:new Map}));c.addCollation=function(e,t){const n=c(e,1);n.collation||(n.collation=new Set),n.collation.add(a(t).toLowerCase())},c._addUDF=function(e,t,n,r){t=a(t).toLowerCase();let s=r.get(t);s||r.set(t,s=new Set),s.add(n<0?-1:n)},c.addFunction=function(e,t,n){const r=c(e,1);r.udf||(r.udf=new Map),this._addUDF(e,t,n,r.udf)},c.addWindowFunc=function(e,t,n){const r=c(e,1);r.wudf||(r.wudf=new Map),this._addUDF(e,t,n,r.wudf)},c.cleanup=function(e){const t=[e=l(e)];for(const e of["sqlite3_busy_handler","sqlite3_commit_hook","sqlite3_preupdate_hook","sqlite3_progress_handler","sqlite3_rollback_hook","sqlite3_set_authorizer","sqlite3_trace_v2","sqlite3_update_hook"]){const s=r.exports[e];t.length=s.length;try{n[e](...t)}catch(n){console.warn("close-time call of",e+"(",t,") threw:",n)}}const s=c(e,0);if(!s)return;if(s.collation){for(const t of s.collation)try{n.sqlite3_create_collation_v2(e,t,n.SQLITE_UTF8,0,0,0)}catch(e){}delete s.collation}let i;for(i=0;i<2;++i){const t=i?s.wudf:s.udf;if(!t)continue;const r=i?n.sqlite3_create_window_function:n.sqlite3_create_function_v2;for(const s of t){const t=s[0],o=s[1],l=[e,t,0,n.SQLITE_UTF8,0,0,0,0,0];i&&l.push(0);for(const e of o)try{l[2]=e,r.apply(null,l)}catch(e){}o.clear()}t.clear()}delete s.udf,delete s.wudf};{const e=r.xWrap("sqlite3_close_v2","int","sqlite3*");n.sqlite3_close_v2=function(t){if(1!==arguments.length)return i(t,"sqlite3_close_v2",1);if(t)try{c.cleanup(t)}catch(e){}return e(t)}}if(n.sqlite3session_table_filter){const e=r.xWrap("sqlite3session_delete",void 0,["sqlite3_session*"]);n.sqlite3session_delete=function(t){if(1!==arguments.length)return i(pDb,"sqlite3session_delete",1);t&&n.sqlite3session_table_filter(t,0,0),e(t)}}{const e=(e,t)=>"argv["+t+"]:"+e[0]+":"+r.cstrToJs(e[1]).toLowerCase(),t=r.xWrap("sqlite3_create_collation_v2","int",["sqlite3*","string","int","*",new r.xWrap.FuncPtrAdapter({name:"xCompare",signature:"i(pipip)",contextKey:e}),new r.xWrap.FuncPtrAdapter({name:"xDestroy",signature:"v(p)",contextKey:e})]);n.sqlite3_create_collation_v2=function(e,r,l,a,u,_){if(6!==arguments.length)return i(e,"sqlite3_create_collation_v2",6);if(0==(15&l))l|=n.SQLITE_UTF8;else if(n.SQLITE_UTF8!==(15&l))return o(e);try{const n=t(e,r,l,a,u,_);return 0===n&&u instanceof Function&&c.addCollation(e,r),n}catch(t){return s.sqlite3_wasm_db_error(e,t)}},n.sqlite3_create_collation=(e,t,r,s,o)=>5===arguments.length?n.sqlite3_create_collation_v2(e,t,r,s,o,0):i(e,"sqlite3_create_collation",5)}{const e=function(e,t){return e[0]+":"+(e[2]<0?-1:e[2])+":"+t+":"+r.cstrToJs(e[1]).toLowerCase()},t=Object.assign(Object.create(null),{xInverseAndStep:{signature:"v(pip)",contextKey:e,callProxy:e=>(t,r,s)=>{try{e(t,...n.sqlite3_values_to_js(r,s))}catch(e){n.sqlite3_result_error_js(t,e)}}},xFinalAndValue:{signature:"v(p)",contextKey:e,callProxy:e=>t=>{try{n.sqlite3_result_js(t,e(t))}catch(e){n.sqlite3_result_error_js(t,e)}}},xFunc:{signature:"v(pip)",contextKey:e,callProxy:e=>(t,r,s)=>{try{n.sqlite3_result_js(t,e(t,...n.sqlite3_values_to_js(r,s)))}catch(e){n.sqlite3_result_error_js(t,e)}}},xDestroy:{signature:"v(p)",contextKey:e,callProxy:e=>t=>{try{e(t)}catch(e){console.error("UDF xDestroy method threw:",e)}}}}),l=r.xWrap("sqlite3_create_function_v2","int",["sqlite3*","string","int","int","*",new r.xWrap.FuncPtrAdapter({name:"xFunc",...t.xFunc}),new r.xWrap.FuncPtrAdapter({name:"xStep",...t.xInverseAndStep}),new r.xWrap.FuncPtrAdapter({name:"xFinal",...t.xFinalAndValue}),new r.xWrap.FuncPtrAdapter({name:"xDestroy",...t.xDestroy})]),a=r.xWrap("sqlite3_create_window_function","int",["sqlite3*","string","int","int","*",new r.xWrap.FuncPtrAdapter({name:"xStep",...t.xInverseAndStep}),new r.xWrap.FuncPtrAdapter({name:"xFinal",...t.xFinalAndValue}),new r.xWrap.FuncPtrAdapter({name:"xValue",...t.xFinalAndValue}),new r.xWrap.FuncPtrAdapter({name:"xInverse",...t.xInverseAndStep}),new r.xWrap.FuncPtrAdapter({name:"xDestroy",...t.xDestroy})]);n.sqlite3_create_function_v2=function e(t,r,a,u,_,f,p,d,m){if(e.length!==arguments.length)return i(t,"sqlite3_create_function_v2",e.length);if(0==(15&u))u|=n.SQLITE_UTF8;else if(n.SQLITE_UTF8!==(15&u))return o(t);try{const e=l(t,r,a,u,_,f,p,d,m);return 0===e&&(f instanceof Function||p instanceof Function||d instanceof Function||m instanceof Function)&&c.addFunction(t,r,a),e}catch(e){return console.error("sqlite3_create_function_v2() setup threw:",e),s.sqlite3_wasm_db_error(t,e,"Creation of UDF threw: "+e)}},n.sqlite3_create_function=function e(t,r,s,o,l,a,c,u){return e.length===arguments.length?n.sqlite3_create_function_v2(t,r,s,o,l,a,c,u,0):i(t,"sqlite3_create_function",e.length)},n.sqlite3_create_window_function=function e(t,r,l,u,_,f,p,d,m,h){if(e.length!==arguments.length)return i(t,"sqlite3_create_window_function",e.length);if(0==(15&u))u|=n.SQLITE_UTF8;else if(n.SQLITE_UTF8!==(15&u))return o(t);try{const e=a(t,r,l,u,_,f,p,d,m,h);return 0===e&&(f instanceof Function||p instanceof Function||d instanceof Function||m instanceof Function||h instanceof Function)&&c.addWindowFunc(t,r,l),e}catch(e){return console.error("sqlite3_create_window_function() setup threw:",e),s.sqlite3_wasm_db_error(t,e,"Creation of UDF threw: "+e)}},n.sqlite3_create_function_v2.udfSetResult=n.sqlite3_create_function.udfSetResult=n.sqlite3_create_window_function.udfSetResult=n.sqlite3_result_js,n.sqlite3_create_function_v2.udfConvertArgs=n.sqlite3_create_function.udfConvertArgs=n.sqlite3_create_window_function.udfConvertArgs=n.sqlite3_values_to_js,n.sqlite3_create_function_v2.udfSetError=n.sqlite3_create_function.udfSetError=n.sqlite3_create_window_function.udfSetError=n.sqlite3_result_error_js}{const e=(e,t)=>("string"==typeof e?t=-1:s.isSQLableTypedArray(e)?(t=e.byteLength,e=s.typedArrayToString(e instanceof ArrayBuffer?new Uint8Array(e):e)):Array.isArray(e)&&(e=e.join(""),t=-1),[e,t]),t={basic:r.xWrap("sqlite3_prepare_v3","int",["sqlite3*","string","int","int","**","**"]),full:r.xWrap("sqlite3_prepare_v3","int",["sqlite3*","*","int","int","**","**"])};n.sqlite3_prepare_v3=function r(o,l,a,c,u,_){if(r.length!==arguments.length)return i(o,"sqlite3_prepare_v3",r.length);const[f,p]=e(l,a);switch(typeof f){case"string":return t.basic(o,f,p,c,u,null);case"number":return t.full(o,f,p,c,u,_);default:return s.sqlite3_wasm_db_error(o,n.SQLITE_MISUSE,"Invalid SQL argument type for sqlite3_prepare_v2/v3().")}},n.sqlite3_prepare_v2=function e(t,r,s,o,l){return e.length===arguments.length?n.sqlite3_prepare_v3(t,r,s,0,o,l):i(t,"sqlite3_prepare_v2",e.length)}}{const e=r.xWrap("sqlite3_bind_text","int",["sqlite3_stmt*","int","string","int","*"]),t=r.xWrap("sqlite3_bind_blob","int",["sqlite3_stmt*","int","*","int","*"]);n.sqlite3_bind_text=function t(o,l,a,c,u){if(t.length!==arguments.length)return i(n.sqlite3_db_handle(o),"sqlite3_bind_text",t.length);if(r.isPtr(a)||null===a)return e(o,l,a,c,u);let _,f;a instanceof ArrayBuffer?a=new Uint8Array(a):Array.isArray(pMem)&&(a=pMem.join(""));try{if(s.isSQLableTypedArray(a))_=r.allocFromTypedArray(a),f=a.byteLength;else{if("string"!=typeof a)return s.sqlite3_wasm_db_error(n.sqlite3_db_handle(o),n.SQLITE_MISUSE,"Invalid 3rd argument type for sqlite3_bind_text().");[_,f]=r.allocCString(a)}return e(o,l,_,f,n.SQLITE_WASM_DEALLOC)}catch(e){return r.dealloc(_),s.sqlite3_wasm_db_error(n.sqlite3_db_handle(o),e)}},n.sqlite3_bind_blob=function e(o,l,a,c,u){if(e.length!==arguments.length)return i(n.sqlite3_db_handle(o),"sqlite3_bind_blob",e.length);if(r.isPtr(a)||null===a)return t(o,l,a,c,u);let _,f;a instanceof ArrayBuffer?a=new Uint8Array(a):Array.isArray(a)&&(a=a.join(""));try{if(s.isBindableTypedArray(a))_=r.allocFromTypedArray(a),f=c>=0?c:a.byteLength;else{if("string"!=typeof a)return s.sqlite3_wasm_db_error(n.sqlite3_db_handle(o),n.SQLITE_MISUSE,"Invalid 3rd argument type for sqlite3_bind_blob().");[_,f]=r.allocCString(a)}return t(o,l,_,f,n.SQLITE_WASM_DEALLOC)}catch(e){return r.dealloc(_),s.sqlite3_wasm_db_error(n.sqlite3_db_handle(o),e)}}}n.sqlite3_config=function(e,...t){if(arguments.length<2)return n.SQLITE_MISUSE;switch(e){case n.SQLITE_CONFIG_COVERING_INDEX_SCAN:case n.SQLITE_CONFIG_MEMSTATUS:case n.SQLITE_CONFIG_SMALL_MALLOC:case n.SQLITE_CONFIG_SORTERREF_SIZE:case n.SQLITE_CONFIG_STMTJRNL_SPILL:case n.SQLITE_CONFIG_URI:return r.exports.sqlite3_wasm_config_i(e,t[0]);case n.SQLITE_CONFIG_LOOKASIDE:return r.exports.sqlite3_wasm_config_ii(e,t[0],t[1]);case n.SQLITE_CONFIG_MEMDB_MAXSIZE:return r.exports.sqlite3_wasm_config_j(e,t[0]);case n.SQLITE_CONFIG_GETMALLOC:case n.SQLITE_CONFIG_GETMUTEX:case n.SQLITE_CONFIG_GETPCACHE2:case n.SQLITE_CONFIG_GETPCACHE:case n.SQLITE_CONFIG_HEAP:case n.SQLITE_CONFIG_LOG:case n.SQLITE_CONFIG_MALLOC:case n.SQLITE_CONFIG_MMAP_SIZE:case n.SQLITE_CONFIG_MULTITHREAD:case n.SQLITE_CONFIG_MUTEX:case n.SQLITE_CONFIG_PAGECACHE:case n.SQLITE_CONFIG_PCACHE2:case n.SQLITE_CONFIG_PCACHE:case n.SQLITE_CONFIG_PCACHE_HDRSZ:case n.SQLITE_CONFIG_PMASZ:case n.SQLITE_CONFIG_SERIALIZED:case n.SQLITE_CONFIG_SINGLETHREAD:case n.SQLITE_CONFIG_SQLLOG:case n.SQLITE_CONFIG_WIN32_HEAPSIZE:default:return n.SQLITE_NOTFOUND}};{const e=new Set;n.sqlite3_auto_extension=function(t){if(t instanceof Function)t=r.installFunction("i(ppp)",t);else if(1!==arguments.length||!r.isPtr(t))return n.SQLITE_MISUSE;const s=r.exports.sqlite3_auto_extension(t);return t!==arguments[0]&&(0===s?e.add(t):r.uninstallFunction(t)),s},n.sqlite3_cancel_auto_extension=function(e){return e&&1===arguments.length&&r.isPtr(e)?r.exports.sqlite3_cancel_auto_extension(e):0},n.sqlite3_reset_auto_extension=function(){r.exports.sqlite3_reset_auto_extension();for(const t of e)r.uninstallFunction(t);e.clear()}}const u=n.sqlite3_vfs_find("kvvfs");if(u)if(s.isUIThread()){const e=new n.sqlite3_kvvfs_methods(r.exports.sqlite3_wasm_kvvfs_methods());delete n.sqlite3_kvvfs_methods;const t=r.exports.sqlite3_wasm_kvvfsMakeKeyOnPstack,s=r.pstack,i=e=>115===r.peek(e)?sessionStorage:localStorage,o={xRead:(e,n,o,l)=>{const a=s.pointer,c=r.scopedAllocPush();try{const s=t(e,n);if(!s)return-3;const a=r.cstrToJs(s),c=i(e).getItem(a);if(!c)return-1;const u=c.length;if(l<=0)return u;if(1===l)return r.poke(o,0),u;const _=r.scopedAllocCString(c);return l>u+1&&(l=u+1),r.heap8u().copyWithin(o,_,_+l-1),r.poke(o+l-1,0),l-1}catch(e){return console.error("kvstorageRead()",e),-2}finally{s.restore(a),r.scopedAllocPop(c)}},xWrite:(e,o,l)=>{const a=s.pointer;try{const n=t(e,o);if(!n)return 1;const s=r.cstrToJs(n);return i(e).setItem(s,r.cstrToJs(l)),0}catch(e){return console.error("kvstorageWrite()",e),n.SQLITE_IOERR}finally{s.restore(a)}},xDelete:(e,o)=>{const l=s.pointer;try{const n=t(e,o);return n?(i(e).removeItem(r.cstrToJs(n)),0):1}catch(e){return console.error("kvstorageDelete()",e),n.SQLITE_IOERR}finally{s.restore(l)}}};for(const t of Object.keys(o))e[e.memberKey(t)]=r.installFunction(e.memberSignature(t),o[t])}else n.sqlite3_vfs_unregister(u);r.xWrap.FuncPtrAdapter.warnOnUse=!0})),globalThis.sqlite3ApiBootstrap.initializers.push((function(e){e.version={libVersion:"3.42.0",libVersionNumber:3042e3,sourceId:"2023-03-09 16:11:43 870de61f8ef8781f2f9969b012f5c1cb95b6bce1a9a4dcaf02945b7846c3aa83",downloadVersion:342e4}})),globalThis.sqlite3ApiBootstrap.initializers.push((function(e){const t=(...t)=>{throw new e.SQLite3Error(...t)},n=e.capi,r=e.wasm,s=e.util,i=new WeakMap,o=new WeakMap,l=(e,t,n)=>{const r=Object.getOwnPropertyDescriptor(e,t);return r?r.value:n},a=function(e,r){return r&&(e instanceof f&&(e=e.pointer),t("sqlite3 result code",r+":",e?n.sqlite3_errmsg(e):n.sqlite3_errstr(r))),arguments[0]},c=r.installFunction("i(ippp)",function(e,t,s,i){n.SQLITE_TRACE_STMT===e&&console.log("SQL TRACE #"+ ++this.counter+" via sqlite3@"+t+":",r.cstrToJs(i))}.bind({counter:0})),u=Object.create(null),_=function s(...l){if(!s._name2vfs){s._name2vfs=Object.create(null);const e="function"==typeof importScripts&&(e=>t("The VFS for",e,"is only available in the main window thread."));s._name2vfs[":localStorage:"]={vfs:"kvvfs",filename:e||(()=>"local")},s._name2vfs[":sessionStorage:"]={vfs:"kvvfs",filename:e||(()=>"session")}}const _=s.normalizeArgs(...l);let f=_.filename,p=_.vfs,d=_.flags;("string"!=typeof f&&"number"!=typeof f||"string"!=typeof d||p&&"string"!=typeof p&&"number"!=typeof p)&&(e.config.error("Invalid DB ctor args",_,arguments),t("Invalid arguments for DB constructor."));let m="number"==typeof f?r.cstrToJs(f):f;const h=s._name2vfs[m];h&&(p=h.vfs,f=m=h.filename(m));let g,q=0;d.indexOf("c")>=0&&(q|=n.SQLITE_OPEN_CREATE|n.SQLITE_OPEN_READWRITE),d.indexOf("w")>=0&&(q|=n.SQLITE_OPEN_READWRITE),0===q&&(q|=n.SQLITE_OPEN_READONLY),q|=n.SQLITE_OPEN_EXRESCODE;const y=r.pstack.pointer;try{const e=r.pstack.allocPtr();let t=n.sqlite3_open_v2(f,e,q,p||0);g=r.peekPtr(e),a(g,t),n.sqlite3_extended_result_codes(g,1),d.indexOf("t")>=0&&n.sqlite3_trace_v2(g,n.SQLITE_TRACE_STMT,c,g)}catch(e){throw g&&n.sqlite3_close_v2(g),e}finally{r.pstack.restore(y)}this.filename=m,i.set(this,g),o.set(this,Object.create(null));try{const r=n.sqlite3_js_db_vfs(g);r||t("Internal error: cannot get VFS for new db handle.");const s=u[r];s instanceof Function?s(this,e):s&&a(g,n.sqlite3_exec(g,s,0,0,0))}catch(e){throw this.close(),e}};_.setVfsPostOpenSql=function(e,t){u[e]=t},_.normalizeArgs=function(e=":memory:",t="c",n=null){const r={};return 1===arguments.length&&arguments[0]&&"object"==typeof arguments[0]?(Object.assign(r,arguments[0]),void 0===r.flags&&(r.flags="c"),void 0===r.vfs&&(r.vfs=null),void 0===r.filename&&(r.filename=":memory:")):(r.filename=e,r.flags=t,r.vfs=n),r};const f=function(...e){_.apply(this,e)};f.dbCtorHelper=_;const p={null:1,number:2,string:3,boolean:4,blob:5};p[void 0],p.null,r.bigIntEnabled&&(p.bigint=p.number);const d=function(){p!==arguments[2]&&t(n.SQLITE_MISUSE,"Do not call the Stmt constructor directly. Use DB.prepare()."),this.db=arguments[0],i.set(this,arguments[1]),this.columnCount=n.sqlite3_column_count(this.pointer),this.parameterCount=n.sqlite3_bind_parameter_count(this.pointer)},m=function(e){return e.pointer||t("DB has been closed."),e},h=function(e,n){return(n!==(0|n)||n<0||n>=e.columnCount)&&t("Column index",n,"is out of range."),e},g=(e,t,n,...r)=>{const s=e.prepare(t);try{return s.bind(n).step()?s.get(...r):void 0}finally{s.finalize()}},q=(e,t,n,r)=>e.exec({sql:t,bind:n,rowMode:r,returnValue:"resultRows"});f.checkRc=(e,t)=>a(e,t),f.prototype={isOpen:function(){return!!this.pointer},affirmOpen:function(){return m(this)},close:function(){if(this.pointer){if(this.onclose&&this.onclose.before instanceof Function)try{this.onclose.before(this)}catch(e){}const e=this.pointer;if(Object.keys(o.get(this)).forEach(((e,t)=>{t&&t.pointer&&t.finalize()})),i.delete(this),o.delete(this),n.sqlite3_close_v2(e),this.onclose&&this.onclose.after instanceof Function)try{this.onclose.after(this)}catch(e){}delete this.filename}},changes:function(e=!1,t=!1){const r=m(this).pointer;return e?t?n.sqlite3_total_changes64(r):n.sqlite3_total_changes(r):t?n.sqlite3_changes64(r):n.sqlite3_changes(r)},dbFilename:function(e="main"){return n.sqlite3_db_filename(m(this).pointer,e)},dbName:function(e=0){return n.sqlite3_db_name(m(this).pointer,e)},dbVfsName:function(e=0){let t;const s=n.sqlite3_js_db_vfs(m(this).pointer,e);if(s){const e=new n.sqlite3_vfs(s);try{t=r.cstrToJs(e.$zName)}finally{e.dispose()}}return t},prepare:function(e){m(this);const s=r.pstack.pointer;let i,l;try{i=r.pstack.alloc(8),f.checkRc(this,n.sqlite3_prepare_v2(this.pointer,e,-1,i,null)),l=r.peekPtr(i)}finally{r.pstack.restore(s)}l||t("Cannot prepare empty SQL.");const a=new d(this,l,p);return o.get(this)[l]=a,a},exec:function(){m(this);const e=function(e,r){const i=Object.create(null);switch(i.opt=Object.create(null),r.length){case 1:"string"==typeof r[0]||s.isSQLableTypedArray(r[0])||Array.isArray(r[0])?i.sql=r[0]:r[0]&&"object"==typeof r[0]&&(i.opt=r[0],i.sql=i.opt.sql);break;case 2:i.sql=r[0],i.opt=r[1];break;default:t("Invalid argument count for exec().")}i.sql=s.flexibleString(i.sql),"string"!=typeof i.sql&&t("Missing SQL argument or unsupported SQL value type.");const o=i.opt;switch(o.returnValue){case"resultRows":o.resultRows||(o.resultRows=[]),i.returnVal=()=>o.resultRows;break;case"saveSql":o.saveSql||(o.saveSql=[]),i.returnVal=()=>o.saveSql;break;case void 0:case"this":i.returnVal=()=>e;break;default:t("Invalid returnValue value:",o.returnValue)}if(o.callback||o.returnValue||void 0===o.rowMode||(o.resultRows||(o.resultRows=[]),i.returnVal=()=>o.resultRows),o.callback||o.resultRows)switch(void 0===o.rowMode?"array":o.rowMode){case"object":i.cbArg=e=>e.get(Object.create(null));break;case"array":i.cbArg=e=>e.get([]);break;case"stmt":Array.isArray(o.resultRows)&&t("exec(): invalid rowMode for a resultRows array: must","be one of 'array', 'object',","a result column number, or column name reference."),i.cbArg=e=>e;break;default:if(s.isInt32(o.rowMode)){i.cbArg=e=>e.get(o.rowMode);break}if("string"==typeof o.rowMode&&o.rowMode.length>1&&"$"===o.rowMode[0]){const e=o.rowMode.substr(1);i.cbArg=r=>{const s=r.get(Object.create(null))[e];return void 0===s?t(n.SQLITE_NOTFOUND,"exec(): unknown result column:",e):s};break}t("Invalid rowMode:",o.rowMode)}return i}(this,arguments);if(!e.sql)return t("exec() requires an SQL string.");const i=e.opt,o=i.callback,l=Array.isArray(i.resultRows)?i.resultRows:void 0;let a,c=i.bind,u=!!(e.cbArg||i.columnNames||l);const _=r.scopedAllocPush(),h=Array.isArray(i.saveSql)?i.saveSql:void 0;try{const t=s.isSQLableTypedArray(e.sql);let _=t?e.sql.byteLength:r.jstrlen(e.sql);const m=r.scopedAlloc(2*r.ptrSizeof+(_+1)),g=m+r.ptrSizeof;let q=g+r.ptrSizeof;const y=q+_;for(t?r.heap8().set(e.sql,q):r.jstrcpy(e.sql,r.heap8(),q,_,!1),r.poke(q+_,0);q&&r.peek(q,"i8");){r.pokePtr([m,g],0),f.checkRc(this,n.sqlite3_prepare_v3(this.pointer,q,_,0,m,g));const t=r.peekPtr(m);if(q=r.peekPtr(g),_=y-q,t){if(h&&h.push(n.sqlite3_sql(t).trim()),a=new d(this,t,p),c&&a.parameterCount&&(a.bind(c),c=null),u&&a.columnCount){if(u=!1,Array.isArray(i.columnNames)&&a.getColumnNames(i.columnNames),e.cbArg||l){for(;a.step();a._isLocked=!1){a._isLocked=!0;const t=e.cbArg(a);if(l&&l.push(t),o&&!1===o.call(i,t,a))break}a._isLocked=!1}}else a.step();a.finalize(),a=null}}}finally{a&&(delete a._isLocked,a.finalize()),r.scopedAllocPop(_)}return e.returnVal()},createFunction:function(e,r,i){const o=e=>e instanceof Function;switch(arguments.length){case 1:e=(i=e).name,r=i.xFunc||0;break;case 2:o(r)||(r=(i=r).xFunc||0)}i||(i={}),"string"!=typeof e&&t("Invalid arguments: missing function name.");let a=i.xStep||0,c=i.xFinal||0;const u=i.xValue||0,_=i.xInverse||0;let p;o(r)?(p=!1,(o(a)||o(c))&&t("Ambiguous arguments: scalar or aggregate?"),a=c=null):o(a)?(o(c)||t("Missing xFinal() callback for aggregate or window UDF."),r=null):o(c)?t("Missing xStep() callback for aggregate or window UDF."):t("Missing function-type properties."),!1===p?(o(u)||o(_))&&t("xValue and xInverse are not permitted for non-window UDFs."):o(u)?(o(_)||t("xInverse must be provided if xValue is."),p=!0):o(_)&&t("xValue must be provided if xInverse is.");const d=i.pApp;null==d||"number"==typeof d&&s.isInt32(d)||t("Invalid value for pApp property. Must be a legal WASM pointer value.");const m=i.xDestroy||0;m&&!o(m)&&t("xDestroy property must be a function.");let h=0;l(i,"deterministic")&&(h|=n.SQLITE_DETERMINISTIC),l(i,"directOnly")&&(h|=n.SQLITE_DIRECTONLY),l(i,"innocuous")&&(h|=n.SQLITE_INNOCUOUS),e=e.toLowerCase();const g=r||a,q=l(i,"arity"),y="number"==typeof q?q:g.length?g.length-1:0;let b;return b=p?n.sqlite3_create_window_function(this.pointer,e,y,n.SQLITE_UTF8|h,d||0,a,c,u,_,m):n.sqlite3_create_function_v2(this.pointer,e,y,n.SQLITE_UTF8|h,d||0,r,a,c,m),f.checkRc(this,b),this},selectValue:function(e,t,n){return g(this,e,t,0,n)},selectValues:function(e,t,n){const r=this.prepare(e),s=[];try{for(r.bind(t);r.step();)s.push(r.get(0,n))}finally{r.finalize()}return s},selectArray:function(e,t){return g(this,e,t,[])},selectObject:function(e,t){return g(this,e,t,{})},selectArrays:function(e,t){return q(this,e,t,"array")},selectObjects:function(e,t){return q(this,e,t,"object")},openStatementCount:function(){return this.pointer?Object.keys(o.get(this)).length:0},transaction:function(e){let r="BEGIN";arguments.length>1&&(/[^a-zA-Z]/.test(arguments[0])&&t(n.SQLITE_MISUSE,"Invalid argument for BEGIN qualifier."),r+=" "+arguments[0],e=arguments[1]),m(this).exec(r);try{const t=e(this);return this.exec("COMMIT"),t}catch(e){throw this.exec("ROLLBACK"),e}},savepoint:function(e){m(this).exec("SAVEPOINT oo1");try{const t=e(this);return this.exec("RELEASE oo1"),t}catch(e){throw this.exec("ROLLBACK to SAVEPOINT oo1; RELEASE SAVEPOINT oo1"),e}},checkRc:function(e){return f.checkRc(this,e)}};const y=function(e){return e.pointer||t("Stmt has been closed."),e},b=function(e){return function(e){let t=p[null==e?"null":typeof e];switch(t){case p.boolean:case p.null:case p.number:case p.string:return t;case p.bigint:if(r.bigIntEnabled)return t;default:return s.isBindableTypedArray(e)?p.blob:void 0}}(e)||t("Unsupported bind() argument type:",typeof e)},v=function(e,n){return e._isLocked&&t("Operation is illegal when statement is locked:",n),e},w=function i(o,l,a,c){v(y(o),"bind()"),i._||(i._tooBigInt=e=>t("BigInt value is too big to store without precision loss:",e),i._={string:function(e,t,s,i){const[o,l]=r.allocCString(s,!0);return(i?n.sqlite3_bind_blob:n.sqlite3_bind_text)(e.pointer,t,o,l,n.SQLITE_WASM_DEALLOC)}}),b(c),l=function(e,r){const i="number"==typeof r?r:n.sqlite3_bind_parameter_index(e.pointer,r);return 0!==i&&s.isInt32(i)?(i<1||i>e.parameterCount)&&t("Bind index",r,"is out of range."):t("Invalid bind() parameter name: "+r),i}(o,l);let u=0;switch(null==c?p.null:a){case p.null:u=n.sqlite3_bind_null(o.pointer,l);break;case p.string:u=i._.string(o,l,c,!1);break;case p.number:{let e;s.isInt32(c)?e=n.sqlite3_bind_int:"bigint"==typeof c?s.bigIntFits64(c)?r.bigIntEnabled?e=n.sqlite3_bind_int64:s.bigIntFitsDouble(c)?(c=Number(c),e=n.sqlite3_bind_double):i._tooBigInt(c):i._tooBigInt(c):(c=Number(c),e=r.bigIntEnabled&&Number.isInteger(c)?n.sqlite3_bind_int64:n.sqlite3_bind_double),u=e(o.pointer,l,c);break}case p.boolean:u=n.sqlite3_bind_int(o.pointer,l,c?1:0);break;case p.blob:{if("string"==typeof c){u=i._.string(o,l,c,!0);break}c instanceof ArrayBuffer?c=new Uint8Array(c):s.isBindableTypedArray(c)||t("Binding a value as a blob requires","that it be a string, Uint8Array, Int8Array, or ArrayBuffer.");const e=r.alloc(c.byteLength||1);r.heap8().set(c.byteLength?c:[0],e),u=n.sqlite3_bind_blob(o.pointer,l,e,c.byteLength,n.SQLITE_WASM_DEALLOC);break}default:e.config.warn("Unsupported bind() argument type:",c),t("Unsupported bind() argument type: "+typeof c)}return u&&f.checkRc(o.db.pointer,u),o._mayGet=!1,o};d.prototype={finalize:function(){this.pointer&&(v(this,"finalize()"),delete o.get(this.db)[this.pointer],n.sqlite3_finalize(this.pointer),i.delete(this),delete this._mayGet,delete this.columnCount,delete this.parameterCount,delete this.db,delete this._isLocked)},clearBindings:function(){return v(y(this),"clearBindings()"),n.sqlite3_clear_bindings(this.pointer),this._mayGet=!1,this},reset:function(e){return v(this,"reset()"),e&&this.clearBindings(),n.sqlite3_reset(y(this).pointer),this._mayGet=!1,this},bind:function(){let e,n;switch(y(this),arguments.length){case 1:e=1,n=arguments[0];break;case 2:e=arguments[0],n=arguments[1];break;default:t("Invalid bind() arguments.")}return void 0===n?this:(this.parameterCount||t("This statement has no bindable parameters."),this._mayGet=!1,null===n?w(this,e,p.null,n):Array.isArray(n)?(1!==arguments.length&&t("When binding an array, an index argument is not permitted."),n.forEach(((e,t)=>w(this,t+1,b(e),e))),this):(n instanceof ArrayBuffer&&(n=new Uint8Array(n)),"object"!=typeof n||s.isBindableTypedArray(n)?w(this,e,b(n),n):(1!==arguments.length&&t("When binding an object, an index argument is not permitted."),Object.keys(n).forEach((e=>w(this,e,b(n[e]),n[e]))),this)))},bindAsBlob:function(e,n){y(this),1===arguments.length&&(n=e,e=1);const r=b(n);return p.string!==r&&p.blob!==r&&p.null!==r&&t("Invalid value type for bindAsBlob()"),w(this,e,p.blob,n)},step:function(){v(this,"step()");const t=n.sqlite3_step(y(this).pointer);switch(t){case n.SQLITE_DONE:return this._mayGet=!1;case n.SQLITE_ROW:return this._mayGet=!0;default:this._mayGet=!1,e.config.warn("sqlite3_step() rc=",t,n.sqlite3_js_rc_str(t),"SQL =",n.sqlite3_sql(this.pointer)),f.checkRc(this.db.pointer,t)}},stepReset:function(){return this.step(),this.reset()},stepFinalize:function(){const e=this.step();return this.finalize(),e},get:function(e,i){if(y(this)._mayGet||t("Stmt.step() has not (recently) returned true."),Array.isArray(e)){let t=0;for(;t<this.columnCount;)e[t]=this.get(t++);return e}if(e&&"object"==typeof e){let t=0;for(;t<this.columnCount;)e[n.sqlite3_column_name(this.pointer,t)]=this.get(t++);return e}switch(h(this,e),void 0===i?n.sqlite3_column_type(this.pointer,e):i){case n.SQLITE_NULL:return null;case n.SQLITE_INTEGER:if(r.bigIntEnabled){const t=n.sqlite3_column_int64(this.pointer,e);return t>=Number.MIN_SAFE_INTEGER&&t<=Number.MAX_SAFE_INTEGER?Number(t).valueOf():t}{const r=n.sqlite3_column_double(this.pointer,e);return(r>Number.MAX_SAFE_INTEGER||r<Number.MIN_SAFE_INTEGER)&&t("Integer is out of range for JS integer range: "+r),s.isInt32(r)?0|r:r}case n.SQLITE_FLOAT:return n.sqlite3_column_double(this.pointer,e);case n.SQLITE_TEXT:return n.sqlite3_column_text(this.pointer,e);case n.SQLITE_BLOB:{const t=n.sqlite3_column_bytes(this.pointer,e),s=n.sqlite3_column_blob(this.pointer,e),i=new Uint8Array(t);return t&&i.set(r.heap8u().slice(s,s+t),0),t&&this.db._blobXfer instanceof Array&&this.db._blobXfer.push(i.buffer),i}default:t("Don't know how to translate","type of result column #"+e+".")}t("Not reached.")},getInt:function(e){return this.get(e,n.SQLITE_INTEGER)},getFloat:function(e){return this.get(e,n.SQLITE_FLOAT)},getString:function(e){return this.get(e,n.SQLITE_TEXT)},getBlob:function(e){return this.get(e,n.SQLITE_BLOB)},getJSON:function(e){const t=this.get(e,n.SQLITE_STRING);return null===t?t:JSON.parse(t)},getColumnName:function(e){return n.sqlite3_column_name(h(y(this),e).pointer,e)},getColumnNames:function(e=[]){h(y(this),0);for(let t=0;t<this.columnCount;++t)e.push(n.sqlite3_column_name(this.pointer,t));return e},getParamIndex:function(e){return y(this).parameterCount?n.sqlite3_bind_parameter_index(this.pointer,e):void 0}};{const e={enumerable:!0,get:function(){return i.get(this)},set:()=>t("The pointer property is read-only.")};Object.defineProperty(d.prototype,"pointer",e),Object.defineProperty(f.prototype,"pointer",e)}if(e.oo1={DB:f,Stmt:d},s.isUIThread()){e.oo1.JsStorageDb=function(e="session"){"session"!==e&&"local"!==e&&t("JsStorageDb db name must be one of 'session' or 'local'."),_.call(this,{filename:e,flags:"c",vfs:"kvvfs"})};const r=e.oo1.JsStorageDb;r.prototype=Object.create(f.prototype),r.clearStorage=n.sqlite3_js_kvvfs_clear,r.prototype.clearStorage=function(){return r.clearStorage(m(this).filename)},r.storageSize=n.sqlite3_js_kvvfs_size,r.prototype.storageSize=function(){return r.storageSize(m(this).filename)}}})),globalThis.sqlite3ApiBootstrap.initializers.push((function(e){e.initWorker1API=function(){const e=(...e)=>{throw new Error(e.join(" "))};globalThis.WorkerGlobalScope instanceof Function||e("initWorker1API() must be run from a Worker thread."),this.self;const t=this.sqlite3||e("Missing this.sqlite3 object."),n=t.oo1.DB,r=function(e){let t=s.idMap.get(e);return t||(t="db#"+ ++s.idSeq+"@"+e.pointer,s.idMap.set(e,t),t)},s={dbList:[],idSeq:0,idMap:new WeakMap,xfer:[],open:function(e){const t=new n(e);return this.dbs[r(t)]=t,this.dbList.indexOf(t)<0&&this.dbList.push(t),t},close:function(e,n){if(e){delete this.dbs[r(e)];const s=e.filename,i=t.wasm.sqlite3_wasm_db_vfs(e.pointer,0);e.close();const o=this.dbList.indexOf(e);o>=0&&this.dbList.splice(o,1),n&&s&&i&&t.wasm.sqlite3_wasm_vfs_unlink(i,s)}},post:function(e,t){t&&t.length?(globalThis.postMessage(e,Array.from(t)),t.length=0):globalThis.postMessage(e)},dbs:Object.create(null),getDb:function(t,n=!0){return this.dbs[t]||(n?e("Unknown (or closed) DB ID:",t):void 0)}},i=function(t,n=!0){const r=s.getDb(t.dbId,!1)||s.dbList[0];return n?function(t=s.dbList[0]){return t&&t.pointer?t:e("DB is not opened.")}(r):r},o={open:function(n){const i=Object.create(null),o=n.args||Object.create(null);o.simulateError&&e("Throwing because of simulateError flag.");const l=Object.create(null);let a,c;var u;if(i.vfs=o.vfs,""===(u=o.filename)||":"===u[0]?i.filename=o.filename||"":(i.filename=o.filename,a=o.byteArray,a&&(c=function(e){const n=/^file:.+(vfs=(\w+))/.exec(e);return t.capi.sqlite3_vfs_find(n?n[2]:0)}(o.filename))),c){let e;try{e=t.wasm.allocFromTypedArray(a);const n=t.wasm.sqlite3_wasm_vfs_create_file(c,i.filename,e,a.byteLength);n&&t.SQLite3Error.toss(n)}catch(e){throw new t.SQLite3Error(e.name+" creating "+o.filename+": "+e.message,{cause:e})}finally{e&&t.wasm.dealloc(e)}}const _=s.open(i);return l.filename=_.filename,l.persistent=!!t.capi.sqlite3_js_db_uses_vfs(_.pointer,"opfs"),l.dbId=r(_),l.vfs=_.dbVfsName(),l},close:function(e){const t=i(e,!1),n={filename:t&&t.filename};if(t){const n=!(!e.args||"object"!=typeof e.args||!e.args.unlink);s.close(t,n)}return n},exec:function(t){const n="string"==typeof t.args?{sql:t.args}:t.args||Object.create(null);"stmt"===n.rowMode?e("Invalid rowMode for 'exec': stmt mode","does not work in the Worker API."):n.sql||e("'exec' requires input SQL.");const r=i(t);(n.callback||Array.isArray(n.resultRows))&&(r._blobXfer=s.xfer);const o=n.callback;let l=0;const a=!!n.columnNames;"string"==typeof o&&(a||(n.columnNames=[]),n.callback=function(e,t){s.post({type:o,columnNames:n.columnNames,rowNumber:++l,row:e},s.xfer)});try{r.exec(n),n.callback instanceof Function&&(n.callback=o,s.post({type:o,columnNames:n.columnNames,rowNumber:null,row:void 0}))}finally{delete r._blobXfer,n.callback&&(n.callback=o)}return n},"config-get":function(){const e=Object.create(null),n=t.config;return["bigIntEnabled"].forEach((function(t){Object.getOwnPropertyDescriptor(n,t)&&(e[t]=n[t])})),e.version=t.version,e.vfsList=t.capi.sqlite3_js_vfs_list(),e.opfsEnabled=!!t.opfs,e},export:function(e){const n=i(e),r={byteArray:t.capi.sqlite3_js_db_export(n.pointer),filename:n.filename,mimetype:"application/x-sqlite3"};return s.xfer.push(r.byteArray.buffer),r},toss:function(t){e("Testing worker exception")},"opfs-tree":async function(n){return t.opfs||e("OPFS support is unavailable."),await t.opfs.treeList()}};globalThis.onmessage=async function(t){let n,i=(t=t.data).dbId,l=t.type;const a=performance.now();try{o.hasOwnProperty(l)&&o[l]instanceof Function?n=await o[l](t):e("Unknown db worker message type:",t.type)}catch(e){l="error",n={operation:t.type,message:e.message,errorClass:e.name,input:t},e.stack&&(n.stack="string"==typeof e.stack?e.stack.split(/\n\s*/):e.stack)}i||(i=n.dbId||s.dbList[0]&&r(s.dbList[0])),s.post({type:l,dbId:i,messageId:t.messageId,workerReceivedTime:a,workerRespondTime:performance.now(),departureTime:t.departureTime,result:n},s.xfer)},globalThis.postMessage({type:"sqlite3-api",result:"worker1-ready"})}.bind({self,sqlite3:e})})),globalThis.sqlite3ApiBootstrap.initializers.push((function(e){const t=e.wasm,n=e.capi,r=e.util.toss3,s=Object.create(null),i=Object.create(null),o=e.StructBinder;e.vfs=s,e.vtab=i;const l=n.sqlite3_index_info;l.prototype.nthConstraint=function(e,t=!1){if(e<0||e>=this.$nConstraint)return!1;const n=this.$aConstraint+l.sqlite3_index_constraint.structInfo.sizeof*e;return t?n:new l.sqlite3_index_constraint(n)},l.prototype.nthConstraintUsage=function(e,t=!1){if(e<0||e>=this.$nConstraint)return!1;const n=this.$aConstraintUsage+l.sqlite3_index_constraint_usage.structInfo.sizeof*e;return t?n:new l.sqlite3_index_constraint_usage(n)},l.prototype.nthOrderBy=function(e,t=!1){if(e<0||e>=this.$nOrderBy)return!1;const n=this.$aOrderBy+l.sqlite3_index_orderby.structInfo.sizeof*e;return t?n:new l.sqlite3_index_orderby(n)};const a=function e(n,s,i,l=e.installMethodArgcCheck){if(n instanceof o.StructType?i instanceof Function||t.isPtr(i)||r("Usage errror: expecting a Function or WASM pointer to one."):r("Usage error: target object is-not-a StructType."),1===arguments.length)return(t,r)=>e(n,t,r,l);e.argcProxy||(e.argcProxy=function(e,t,n,s){return function(...i){return n.length!==arguments.length&&r("Argument mismatch for",e.structInfo.name+"::"+t+": Native signature is:",s),n.apply(this,i)}},e.removeFuncList=function(){this.ondispose.__removeFuncList&&(this.ondispose.__removeFuncList.forEach(((e,n)=>{if("number"==typeof e)try{t.uninstallFunction(e)}catch(e){}})),delete this.ondispose.__removeFuncList)});const a=n.memberSignature(s);a.length<2&&r("Member",s,"does not have a function pointer signature:",a);const c=n.memberKey(s),u=l&&!t.isPtr(i)?e.argcProxy(n,c,i,a):i;if(t.isPtr(u))u&&!t.functionEntry(u)&&r("Pointer",u,"is not a WASM function table entry."),n[c]=u;else{const r=t.installFunction(u,n.memberSignature(s,!0));n[c]=r,n.ondispose&&n.ondispose.__removeFuncList||(n.addOnDispose("ondispose.__removeFuncList handler",e.removeFuncList),n.ondispose.__removeFuncList=[]),n.ondispose.__removeFuncList.push(c,r)}return(t,r)=>e(n,t,r,l)};a.installMethodArgcCheck=!1;const c=function(e,t,n=a.installMethodArgcCheck){const r=new Map;for(const s of Object.keys(t)){const i=t[s],o=r.get(i);if(o){const t=e.memberKey(s);e[t]=e[e.memberKey(o)]}else a(e,s,i,n),r.set(i,s)}return e};o.StructType.prototype.installMethod=function(e,t,n=a.installMethodArgcCheck){return arguments.length<3&&e&&"object"==typeof e?c(this,...arguments):a(this,...arguments)},o.StructType.prototype.installMethods=function(e,t=a.installMethodArgcCheck){return c(this,e,t)},n.sqlite3_vfs.prototype.registerVfs=function(t=!1){this instanceof e.capi.sqlite3_vfs||r("Expecting a sqlite3_vfs-type argument.");const s=n.sqlite3_vfs_register(this,t?1:0);return s&&r("sqlite3_vfs_register(",this,") failed with rc",s),this.pointer!==n.sqlite3_vfs_find(this.$zName)&&r("BUG: sqlite3_vfs_find(vfs.$zName) failed for just-installed VFS",this),this},s.installVfs=function(e){let n=0;const s=["io","vfs"];for(const r of s){const s=e[r];s&&(++n,c(s.struct,s.methods,!!s.applyArgcCheck),"vfs"===r&&(s.struct.$zName||"string"!=typeof s.name||s.struct.addOnDispose(s.struct.$zName=t.allocCString(s.name)),s.struct.registerVfs(!!s.asDefault)))}return n||r("Misuse: installVfs() options object requires at least","one of:",s),this};const u=function(n,r){const s=function(n,r){return function(s,i=!1){if(0===arguments.length&&(s=new r),s instanceof r)return this.set(s.pointer,s),s;t.isPtr(s)||e.SQLite3Error.toss("Invalid argument to",n+"()");let o=this.get(s);return i&&this.delete(s),o}.bind(new Map)}(n,r);return Object.assign(Object.create(null),{StructType:r,create:e=>{const n=s();return t.pokePtr(e,n.pointer),n},get:e=>s(e),unget:e=>s(e,!0),dispose:e=>{const t=s(e,!0);t&&t.dispose()}})};i.xVtab=u("xVtab",n.sqlite3_vtab),i.xCursor=u("xCursor",n.sqlite3_vtab_cursor),i.xIndexInfo=e=>new n.sqlite3_index_info(e),i.xError=function t(r,s,i){if(t.errorReporter instanceof Function)try{t.errorReporter("sqlite3_module::"+r+"(): "+s.message)}catch(e){}let o;return s instanceof e.WasmAllocError?o=n.SQLITE_NOMEM:arguments.length>2?o=i:s instanceof e.SQLite3Error&&(o=s.resultCode),o||n.SQLITE_ERROR},i.xError.errorReporter=console.error.bind(console),i.xRowid=(e,n)=>t.poke(e,n,"i64"),i.setupModule=function(s){let o=!1;const l=this instanceof n.sqlite3_module?this:s.struct||(o=new n.sqlite3_module);try{const n=s.methods||r("Missing 'methods' object.");for(const e of Object.entries({xConnect:"xCreate",xDisconnect:"xDestroy"})){const t=e[0],r=e[1];!0===n[t]?n[t]=n[r]:!0===n[r]&&(n[r]=n[t])}if(s.catchExceptions){const r=function(n,r){return["xConnect","xCreate"].indexOf(n)>=0?function(s,o,l,a,c,u){try{return r(...arguments)||0}catch(r){return r instanceof e.WasmAllocError||(t.dealloc(t.peekPtr(u)),t.pokePtr(u,t.allocCString(r.message))),i.xError(n,r)}}:function(...e){try{return r(...e)||0}catch(e){return i.xError(n,e)}}},s=["xCreate","xConnect","xBestIndex","xDisconnect","xDestroy","xOpen","xClose","xFilter","xNext","xEof","xColumn","xRowid","xUpdate","xBegin","xSync","xCommit","xRollback","xFindFunction","xRename","xSavepoint","xRelease","xRollbackTo","xShadowName"],o=Object.create(null);for(const e of s){const t=n[e];t instanceof Function&&("xConnect"===e&&n.xCreate===t?o[e]=n.xCreate:"xCreate"===e&&n.xConnect===t?o[e]=n.xConnect:o[e]=r(e,t))}c(l,o,!1)}else c(l,n,!!s.applyArgcCheck);if(0===l.$iVersion){let e;e="number"==typeof s.iVersion?s.iVersion:l.$xShadowName?3:l.$xSavePoint||l.$xRelease||l.$xRollbackTo?2:1,l.$iVersion=e}}catch(e){throw o&&o.dispose(),e}return l},n.sqlite3_module.prototype.setupModule=function(e){return i.setupModule.call(this,e)}})),globalThis.sqlite3ApiBootstrap.initializers.push((function(t){const n=function n(s){if(!globalThis.SharedArrayBuffer||!globalThis.Atomics)return Promise.reject(new Error("Cannot install OPFS: Missing SharedArrayBuffer and/or Atomics. The server must emit the COOP/COEP response headers to enable those. See https://sqlite.org/wasm/doc/trunk/persistence.md#coop-coep"));if("undefined"==typeof WorkerGlobalScope)return Promise.reject(new Error("The OPFS sqlite3_vfs cannot run in the main thread because it requires Atomics.wait()."));if(!(globalThis.FileSystemHandle&&globalThis.FileSystemDirectoryHandle&&globalThis.FileSystemFileHandle&&globalThis.FileSystemFileHandle.prototype.createSyncAccessHandle&&navigator?.storage?.getDirectory))return Promise.reject(new Error("Missing required OPFS APIs."));s&&"object"==typeof s||(s=Object.create(null));const i=new URL(globalThis.location.href).searchParams;void 0===s.verbose&&(s.verbose=i.has("opfs-verbose")?+i.get("opfs-verbose")||2:1),void 0===s.sanityChecks&&(s.sanityChecks=i.has("opfs-sanity-check")),void 0===s.proxyUri&&(s.proxyUri=n.defaultProxyUri),"function"==typeof s.proxyUri&&(s.proxyUri=s.proxyUri());const o=new Promise((function(n,i){const o={0:t.config.error,1:t.config.warn,2:t.config.log},l=(e,...t)=>{s.verbose>e&&o[e]("OPFS syncer:",...t)},a=(...e)=>l(2,...e),c=(...e)=>l(1,...e),u=(...e)=>l(0,...e),_=t.util.toss,f=t.capi,p=t.wasm,d=f.sqlite3_vfs,m=f.sqlite3_file,h=f.sqlite3_io_methods,g=Object.create(null);g.metrics={dump:function(){let e,n=0,r=0,s=0;for(e in x.opIds){const t=S[e];n+=t.count,r+=t.time,s+=t.wait,t.avgTime=t.count&&t.time?t.time/t.count:0,t.avgWait=t.count&&t.wait?t.wait/t.count:0}t.config.log(globalThis.location.href,"metrics for",globalThis.location.href,":",S,"\nTotal of",n,"op(s) for",r,"ms (incl. "+s+" ms of waiting on the async side)"),t.config.log("Serialization metrics:",S.s11n),v.postMessage({type:"opfs-async-metrics"})},reset:function(){let e;for(e in x.opIds)(t=S[e]=Object.create(null)).count=t.time=t.wait=0;var t;let n=S.s11n=Object.create(null);n=n.serialize=Object.create(null),n.count=n.time=0,n=S.s11n.deserialize=Object.create(null),n.count=n.time=0}};const q=new d,y=new h,b=function(e){return q.dispose(),i(e)},v=new Worker(new URL(r.p+r.u(829),r.b));v._originalOnError=v.onerror,v.onerror=function(e){u("Error initializing OPFS asyncer:",e),b(new Error("Loading OPFS async Worker failed for unknown reasons."))};const w=f.sqlite3_vfs_find(null),E=w?new d(w):null;q.$iVersion=2,q.$szOsFile=f.sqlite3_file.structInfo.sizeof,q.$mxPathname=1024,q.$zName=p.allocCString("opfs"),q.$xDlOpen=q.$xDlError=q.$xDlSym=q.$xDlClose=null,q.ondispose=["$zName",q.$zName,"cleanup default VFS wrapper",()=>E?E.dispose():null,"cleanup opfsIoMethods",()=>y.dispose()];const x=Object.create(null);x.verbose=s.verbose,x.littleEndian=(()=>{const e=new ArrayBuffer(2);return new DataView(e).setInt16(0,256,!0),256===new Int16Array(e)[0]})(),x.asyncIdleWaitTime=150,x.asyncS11nExceptions=1,x.fileBufferSize=65536,x.sabS11nOffset=x.fileBufferSize,x.sabS11nSize=2*q.$mxPathname,x.sabIO=new SharedArrayBuffer(x.fileBufferSize+x.sabS11nSize),x.opIds=Object.create(null);const S=Object.create(null);{let e=0;x.opIds.whichOp=e++,x.opIds.rc=e++,x.opIds.xAccess=e++,x.opIds.xClose=e++,x.opIds.xDelete=e++,x.opIds.xDeleteNoWait=e++,x.opIds.xFileControl=e++,x.opIds.xFileSize=e++,x.opIds.xLock=e++,x.opIds.xOpen=e++,x.opIds.xRead=e++,x.opIds.xSleep=e++,x.opIds.xSync=e++,x.opIds.xTruncate=e++,x.opIds.xUnlock=e++,x.opIds.xWrite=e++,x.opIds.mkdir=e++,x.opIds["opfs-async-metrics"]=e++,x.opIds["opfs-async-shutdown"]=e++,x.opIds.retry=e++,x.sabOP=new SharedArrayBuffer(4*e),g.metrics.reset()}x.sq3Codes=Object.create(null),["SQLITE_ACCESS_EXISTS","SQLITE_ACCESS_READWRITE","SQLITE_BUSY","SQLITE_ERROR","SQLITE_IOERR","SQLITE_IOERR_ACCESS","SQLITE_IOERR_CLOSE","SQLITE_IOERR_DELETE","SQLITE_IOERR_FSYNC","SQLITE_IOERR_LOCK","SQLITE_IOERR_READ","SQLITE_IOERR_SHORT_READ","SQLITE_IOERR_TRUNCATE","SQLITE_IOERR_UNLOCK","SQLITE_IOERR_WRITE","SQLITE_LOCK_EXCLUSIVE","SQLITE_LOCK_NONE","SQLITE_LOCK_PENDING","SQLITE_LOCK_RESERVED","SQLITE_LOCK_SHARED","SQLITE_LOCKED","SQLITE_MISUSE","SQLITE_NOTFOUND","SQLITE_OPEN_CREATE","SQLITE_OPEN_DELETEONCLOSE","SQLITE_OPEN_MAIN_DB","SQLITE_OPEN_READONLY"].forEach((e=>{void 0===(x.sq3Codes[e]=f[e])&&_("Maintenance required: not found:",e)})),x.opfsFlags=Object.assign(Object.create(null),{OPFS_UNLOCK_ASAP:1,defaultUnlockAsap:!1});const A=(e,...t)=>{const n=x.opIds[e]||_("Invalid op ID:",e);x.s11n.serialize(...t),Atomics.store(x.sabOPView,x.opIds.rc,-1),Atomics.store(x.sabOPView,x.opIds.whichOp,n),Atomics.notify(x.sabOPView,x.opIds.whichOp);const r=performance.now();Atomics.wait(x.sabOPView,x.opIds.rc,-1);const s=Atomics.load(x.sabOPView,x.opIds.rc);if(S[e].wait+=performance.now()-r,s&&x.asyncS11nExceptions){const t=x.s11n.deserialize();t&&u(e+"() async error:",...t)}return s};g.debug={asyncShutdown:()=>{c("Shutting down OPFS async listener. The OPFS VFS will no longer work."),A("opfs-async-shutdown")},asyncRestart:()=>{c("Attempting to restart OPFS VFS async listener. Might work, might not."),v.postMessage({type:"opfs-async-restart"})}};const I=function e(t=16){e._chars||(e._n=(e._chars="abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ012346789").length);const n=[];let r=0;for(;r<t;++r){const t=Math.random()*(64*e._n)%e._n|0;n[r]=e._chars[t]}return n.join("")},k=Object.create(null),T=Object.create(null);T.op=void 0,T.start=void 0;const F=e=>{T.start=performance.now(),T.op=e,++S[e].count},O=()=>S[T.op].time+=performance.now()-T.start,L={xCheckReservedLock:function(e,t){const n=k[e];return p.poke(t,n.lockType?1:0,"i32"),0},xClose:function(e){F("xClose");let t=0;const n=k[e];return n&&(delete k[e],t=A("xClose",e),n.sq3File&&n.sq3File.dispose()),O(),t},xDeviceCharacteristics:function(e){return f.SQLITE_IOCAP_UNDELETABLE_WHEN_OPEN},xFileControl:function(e,t,n){F("xFileControl");const r=f.SQLITE_FCNTL_SYNC===t?A("xSync",e,0):f.SQLITE_NOTFOUND;return O(),r},xFileSize:function(e,t){F("xFileSize");let n=A("xFileSize",e);if(0==n)try{const e=x.s11n.deserialize()[0];p.poke(t,e,"i64")}catch(e){u("Unexpected error reading xFileSize() result:",e),n=x.sq3Codes.SQLITE_IOERR}return O(),n},xLock:function(e,t){F("xLock");const n=k[e];let r=0;return n.lockType?n.lockType=t:(r=A("xLock",e,t),0===r&&(n.lockType=t)),O(),r},xRead:function(e,t,n,r){F("xRead");const s=k[e];let i;try{i=A("xRead",e,n,Number(r)),0!==i&&f.SQLITE_IOERR_SHORT_READ!==i||p.heap8u().set(s.sabView.subarray(0,n),t)}catch(e){u("xRead(",arguments,") failed:",e,s),i=f.SQLITE_IOERR_READ}return O(),i},xSync:function(e,t){return++S.xSync.count,0},xTruncate:function(e,t){F("xTruncate");const n=A("xTruncate",e,Number(t));return O(),n},xUnlock:function(e,t){F("xUnlock");const n=k[e];let r=0;return f.SQLITE_LOCK_NONE===t&&n.lockType&&(r=A("xUnlock",e,t)),0===r&&(n.lockType=t),O(),r},xWrite:function(e,t,n,r){F("xWrite");const s=k[e];let i;try{s.sabView.set(p.heap8u().subarray(t,t+n)),i=A("xWrite",e,n,Number(r))}catch(e){u("xWrite(",arguments,") failed:",e,s),i=f.SQLITE_IOERR_WRITE}return O(),i}},P={xAccess:function(e,t,n,r){F("xAccess");const s=A("xAccess",p.cstrToJs(t));return p.poke(r,s?0:1,"i32"),O(),0},xCurrentTime:function(e,t){return p.poke(t,2440587.5+(new Date).getTime()/864e5,"double"),0},xCurrentTimeInt64:function(e,t){return p.poke(t,21086676e7+(new Date).getTime(),"i64"),0},xDelete:function(e,t,n){return F("xDelete"),A("xDelete",p.cstrToJs(t),n,!1),O(),0},xFullPathname:function(e,t,n,r){return p.cstrncpy(r,t,n)<n?0:f.SQLITE_CANTOPEN},xGetLastError:function(e,t,n){return c("OPFS xGetLastError() has nothing sensible to return."),0},xOpen:function(e,t,n,r,s){F("xOpen");let i=0;0===t?t=I():"number"==typeof t&&(f.sqlite3_uri_boolean(t,"opfs-unlock-asap",0)&&(i|=x.opfsFlags.OPFS_UNLOCK_ASAP),t=p.cstrToJs(t));const o=Object.create(null);o.fid=n,o.filename=t,o.sab=new SharedArrayBuffer(x.fileBufferSize),o.flags=r;const l=A("xOpen",n,t,r,i);return l||(o.readOnly&&p.poke(s,f.SQLITE_OPEN_READONLY,"i32"),k[n]=o,o.sabView=x.sabFileBufView,o.sq3File=new m(n),o.sq3File.$pMethods=y.pointer,o.lockType=f.SQLITE_LOCK_NONE),O(),l}};if(E&&(q.$xRandomness=E.$xRandomness,q.$xSleep=E.$xSleep),q.$xRandomness||(P.xRandomness=function(e,t,n){const r=p.heap8u();let s=0;for(;s<t;++s)r[n+s]=255e3*Math.random()&255;return s}),q.$xSleep||(P.xSleep=function(e,t){return Atomics.wait(x.sabOPView,x.opIds.xSleep,0,t),0}),g.getResolvedPath=function(e,t){const n=new URL(e,"file://irrelevant").pathname;return t?n.split("/").filter((e=>!!e)):n},g.getDirForFilename=async function(e,t=!1){const n=g.getResolvedPath(e,!0),r=n.pop();let s=g.rootDirectory;for(const e of n)e&&(s=await s.getDirectoryHandle(e,{create:!!t}));return[s,r]},g.mkdir=async function(e){try{return await g.getDirForFilename(e+"/filepart",!0),!0}catch(e){return!1}},g.entryExists=async function(e){try{const[t,n]=await g.getDirForFilename(e);return await t.getFileHandle(n),!0}catch(e){return!1}},g.randomFilename=I,g.registerVfs=(e=!1)=>p.exports.sqlite3_vfs_register(q.pointer,e?1:0),g.treeList=async function(){const e=Object.create(null);return await async function e(t,n){n.name=t.name,n.dirs=[],n.files=[];for await(const r of t.values())if("directory"===r.kind){const t=Object.create(null);n.dirs.push(t),await e(r,t)}else n.files.push(r.name)}(g.rootDirectory,e),e},g.rmfr=async function(){const e=g.rootDirectory,t={recurse:!0};for await(const n of e.values())e.removeEntry(n.name,t)},g.unlink=async function(e,t=!1,n=!1){try{const[n,r]=await g.getDirForFilename(e,!1);return await n.removeEntry(r,{recursive:t}),!0}catch(e){if(n)throw new Error("unlink(",arguments[0],") failed: "+e.message,{cause:e});return!1}},g.traverse=async function(e){const t={recursive:!0,directory:g.rootDirectory};"function"==typeof e&&(e={callback:e}),async function t(n,r){for await(const s of n.values()){if(!1===e.callback(s,n,r))return!1;if(e.recursive&&"directory"===s.kind&&!1===await t(s,r+1))break}}((e=Object.assign(t,e||{})).directory,0)},t.oo1){const e=function(...e){const n=t.oo1.DB.dbCtorHelper.normalizeArgs(...e);n.vfs=q.$zName,t.oo1.DB.dbCtorHelper.call(this,n)};e.prototype=Object.create(t.oo1.DB.prototype),t.oo1.OpfsDb=e,t.oo1.DB.dbCtorHelper.setVfsPostOpenSql(q.pointer,(function(e,t){t.capi.sqlite3_busy_timeout(e,1e4),t.capi.sqlite3_exec(e,["pragma journal_mode=persist;","pragma cache_size=-16384;"],0,0,0)}))}v.onmessage=function({data:r}){switch(r.type){case"opfs-unavailable":b(new Error(r.payload.join(" ")));break;case"opfs-async-loaded":v.postMessage({type:"opfs-async-init",args:x});break;case"opfs-async-inited":try{t.vfs.installVfs({io:{struct:y,methods:L},vfs:{struct:q,methods:P}}),x.sabOPView=new Int32Array(x.sabOP),x.sabFileBufView=new Uint8Array(x.sabIO,0,x.fileBufferSize),x.sabS11nView=new Uint8Array(x.sabIO,x.sabS11nOffset,x.sabS11nSize),(()=>{if(x.s11n)return x.s11n;const e=new TextDecoder,t=new TextEncoder("utf-8"),n=new Uint8Array(x.sabIO,x.sabS11nOffset,x.sabS11nSize),r=new DataView(x.sabIO,x.sabS11nOffset,x.sabS11nSize);x.s11n=Object.create(null);const s=Object.create(null);s.number={id:1,size:8,getter:"getFloat64",setter:"setFloat64"},s.bigint={id:2,size:8,getter:"getBigInt64",setter:"setBigInt64"},s.boolean={id:3,size:4,getter:"getInt32",setter:"setInt32"},s.string={id:4};const i=e=>{switch(e){case s.number.id:return s.number;case s.bigint.id:return s.bigint;case s.boolean.id:return s.boolean;case s.string.id:return s.string;default:_("Invalid type ID:",e)}};x.s11n.deserialize=function(t=!1){++S.s11n.deserialize.count;const s=performance.now(),o=n[0],l=o?[]:null;if(o){const t=[];let s,a,c,u=1;for(s=0;s<o;++s,++u)t.push(i(n[u]));for(s=0;s<o;++s){const i=t[s];i.getter?(c=r[i.getter](u,x.littleEndian),u+=i.size):(a=r.getInt32(u,x.littleEndian),u+=4,c=e.decode(n.slice(u,u+a)),u+=a),l.push(c)}}return t&&(n[0]=0),S.s11n.deserialize.time+=performance.now()-s,l},x.s11n.serialize=function(...e){const i=performance.now();if(++S.s11n.serialize.count,e.length){const i=[];let l=0,a=1;for(n[0]=255&e.length;l<e.length;++l,++a)i.push((o=e[l],s[typeof o]||_("Maintenance required: this value type cannot be serialized.",o))),n[a]=i[l].id;for(l=0;l<e.length;++l){const s=i[l];if(s.setter)r[s.setter](a,e[l],x.littleEndian),a+=s.size;else{const s=t.encode(e[l]);r.setInt32(a,s.byteLength,x.littleEndian),a+=4,n.set(s,a),a+=s.byteLength}}}else n[0]=0;var o;S.s11n.serialize.time+=performance.now()-i},x.s11n})(),s.sanityChecks&&(c("Running sanity checks because of opfs-sanity-check URL arg..."),function(){const e=p.scopedAllocPush(),t=new m;try{const e=t.pointer,n=f.SQLITE_OPEN_CREATE|f.SQLITE_OPEN_READWRITE|f.SQLITE_OPEN_MAIN_DB,r=p.scopedAlloc(8),s="/sanity/check/file"+I(8),i=p.scopedAllocCString(s);let o;if(x.s11n.serialize("This is ä string."),o=x.s11n.deserialize(),a("deserialize() says:",o),"This is ä string."!==o[0]&&_("String d13n error."),P.xAccess(q.pointer,i,0,r),o=p.peek(r,"i32"),a("xAccess(",s,") exists ?=",o),o=P.xOpen(q.pointer,i,e,n,r),a("open rc =",o,"state.sabOPView[xOpen] =",x.sabOPView[x.opIds.xOpen]),0!==o)return void u("open failed with code",o);P.xAccess(q.pointer,i,0,r),o=p.peek(r,"i32"),o||_("xAccess() failed to detect file."),o=L.xSync(t.pointer,0),o&&_("sync failed w/ rc",o),o=L.xTruncate(t.pointer,1024),o&&_("truncate failed w/ rc",o),p.poke(r,0,"i64"),o=L.xFileSize(t.pointer,r),o&&_("xFileSize failed w/ rc",o),a("xFileSize says:",p.peek(r,"i64")),o=L.xWrite(t.pointer,i,10,1),o&&_("xWrite() failed!");const l=p.scopedAlloc(16);o=L.xRead(t.pointer,l,6,2),p.poke(l+6,0);let d=p.cstrToJs(l);a("xRead() got:",d),"sanity"!==d&&_("Unexpected xRead() value."),P.xSleep&&(a("xSleep()ing before close()ing..."),P.xSleep(q.pointer,2e3),a("waking up from xSleep()")),o=L.xClose(e),a("xClose rc =",o,"sabOPView =",x.sabOPView),a("Deleting file:",s),P.xDelete(q.pointer,i,4660),P.xAccess(q.pointer,i,0,r),o=p.peek(r,"i32"),o&&_("Expecting 0 from xAccess(",s,") after xDelete()."),c("End of OPFS sanity checks.")}finally{t.dispose(),p.scopedAllocPop(e)}}()),globalThis.FileSystemHandle&&globalThis.FileSystemDirectoryHandle&&globalThis.FileSystemFileHandle&&globalThis.FileSystemFileHandle.prototype.createSyncAccessHandle&&navigator?.storage?.getDirectory?navigator.storage.getDirectory().then((e=>{v.onerror=v._originalOnError,delete v._originalOnError,t.opfs=g,g.rootDirectory=e,a("End of OPFS sqlite3_vfs setup.",q),n(t)})).catch(b):n(t)}catch(e){u(e),b(e)}break;default:b(e),u("Unexpected message from the async worker:",r)}}}));return o};n.defaultProxyUri="sqlite3-opfs-async-proxy.js",globalThis.sqlite3ApiBootstrap.initializersAsync.push((async e=>{try{let t=n.defaultProxyUri;return e.scriptInfo.sqlite3Dir&&(n.defaultProxyUri=e.scriptInfo.sqlite3Dir+t),n().catch((t=>{e.config.warn("Ignoring inability to install OPFS sqlite3_vfs:",t.message)}))}catch(t){throw e.config.error("installOpfsVfs() exception:",t),t}}))})),void 0!==t){const e=Object.assign(Object.create(null),{exports:t.asm,memory:t.wasmMemory},globalThis.sqlite3ApiConfig||{});let n;globalThis.sqlite3ApiConfig=e;try{n=globalThis.sqlite3ApiBootstrap()}catch(e){throw console.error("sqlite3ApiBootstrap() error:",e),e}finally{delete globalThis.sqlite3ApiBootstrap,delete globalThis.sqlite3ApiConfig}t.sqlite3=n}else console.warn("This is not running in an Emscripten module context, so","globalThis.sqlite3ApiBootstrap() is _not_ being called due to lack","of config info for the WASM environment.","It must be called manually.")})),t.ready});const o=function(){const e=i;if(!e)throw new Error("Expecting globalThis.sqlite3InitModule to be defined by the Emscripten build.");const t=globalThis.sqlite3InitModuleState=Object.assign(Object.create(null),{moduleScript:globalThis?.document?.currentScript,isWorker:"undefined"!=typeof WorkerGlobalScope,location:globalThis.location,urlParams:globalThis?.location?.href?new URL(globalThis.location.href).searchParams:new URLSearchParams});if(t.debugModule=t.urlParams.has("sqlite3.debugModule")?(...e)=>console.warn("sqlite3.debugModule:",...e):()=>{},t.urlParams.has("sqlite3.dir"))t.sqlite3Dir=t.urlParams.get("sqlite3.dir")+"/";else if(t.moduleScript){const e=t.moduleScript.src.split("/");e.pop(),t.sqlite3Dir=e.join("/")+"/"}if(globalThis.sqlite3InitModule=function n(...r){return e(...r).then((e=>{if("undefined"!=typeof WorkerGlobalScope&&(e.ENVIRONMENT_IS_PTHREAD||e._pthread_self||"function"==typeof threadAlert||globalThis?.location?.pathname?.endsWith?.(".worker.js")))return e;const r=e.sqlite3;r.scriptInfo=t,n.__isUnderTest&&(r.__isUnderTest=!0);const s=r.asyncPostInit;return delete r.asyncPostInit,s()})).catch((e=>{throw console.error("Exception loading sqlite3 module:",e),e}))},globalThis.sqlite3InitModule.ready=e.ready,globalThis.sqlite3InitModuleState.moduleScript){const e=globalThis.sqlite3InitModuleState;let t=e.moduleScript.src.split("/");t.pop(),e.scriptDir=t.join("/")+"/"}return t.debugModule("sqlite3InitModuleState =",t),globalThis.sqlite3InitModule}()}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,